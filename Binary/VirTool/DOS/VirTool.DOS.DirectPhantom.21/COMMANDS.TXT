
    Поля в б йт х КОП и ModeR/M при 16 битной  дрес ции
    ───────────────────────────────────────────────────

 Wbit - определяет р змер опер нд 
 W=0  - б йт
 W=1  - полный р змер (16 или 32 бит )

 Dbit - н пр вление перед чи д нных
 D=0  - регистр в REG/MEM
 D=1  - REG/MEM в регистр

 Sbit - р сширение непосредственных д нных
 S=0  - до полного р змер  (16 или 32 бит )
 S=1  - б йт

 REG  - определяет регистр общего н зн чения 8/16/32 бит 
 MODE - определяет режим  дрес ции вместе с REG/MEM
 REG/MEM - второй опер нд - регистр 8/16/32 или п мять

 Mode    │   00    │      01      │  10   │    11
 REG/MEM │     │          │       │
 ────────┼─────────┼──────────────┼───────────────┼──────────
 000     │ [BX+SI] │ [BX+SI]+imm8 │ [BX+SI]+imm16 │ EAX/AX/AL
 001     │ [BX+DI] │ [BX+DI]+imm8 │ [BX+DI]+imm16 │ ECX/CX/CL
 010     │ [BP+SI] │ [BP+SI]+imm8 │ [BP+SI]+imm16 │ EDX/DX/DL
 011     │ [BP+DI] │ [BP+DI]+imm8 │ [BP+DI]+imm16 │ EBX/BX/BL
 100     │ [SI]    │ [SI]+imm8    │ [SI]+imm16    │ ESP/SP/AH
 101     │ [DI]    │ [DI]+imm8    │ [DI]+imm16    │ EBP/BP/CH
 110     │ [imm16] │ [BP]+imm8    │ [BP]+imm16    │ ESI/SI/DH
 111     │ [BX]    │ [BX]+imm8    │ [BX]+imm16    │ EDI/DI/BH


 SREG - сегментный регистр 000 - ES
               001 - CS
               010 - SS
               011 - DS
               100 - FS
               101 - GS

 НОП - непосредственный опер нд

 ────────────────────────────────────────────────────────────────────────────

             СИСТЕМА КОММАНД i386
             ────────────────────


  MOV─пересл ть регистр в регистр/п мять
 ┌────────────────┬────────────────┐
 │1 0 0 0 1 0 d w │mod reg reg/mem │
 └────────────────┴────────────────┘

  НОП в регистр/п мять
 ┌────────────────┬────────────────┐
 │1 1 0 0 0 1 1 w │mod 000 reg/mem │ + Immediate 8/16 bit
 └────────────────┴────────────────┘

  НОП в регистр
 ┌────────────────┐
 │1 0 1 1 w  reg  │ + Immediate 8/16 bit      
 └────────────────┘

  п мять в  ккумулятор
  (short form)
 ┌────────────────┐
 │1 0 1 0 0 0 d w │ + Immediate 16 bit
 └────────────────┘

  регистр/п мять в сегментный регистр
 ┌────────────────┬──────────────┐
 │1 0 0 0 1 1 d 0 │mod 0 sreg r/m│
 └────────────────┴──────────────┘

  Пересл ть с р спростр нением в регистр из регистр /п мяти
 ┌──────────┬──────────┬───────────┐
 │ 00001111 │ 1011x11w │mod reg r/m│
 └──────────┴──────────┴───────────┘
  x=0 - с р спростр нением нуля  - MOVZX
  x=1 - с р спростр нением зн к  - MOVSX

  ───────────────────────────────────────────────────────────────────────────

  PUSH─з пись в стек п мяти
 ┌────────────────┬────────────────┐
 │1 1 1 1 1 1 1 1 │mod 110 reg/mem │
 └────────────────┴────────────────┘

  POP─чтение из стек  в п мять
 ┌────────────────┬────────────────┐
 │1 0 0 0 1 1 1 1 │mod 000 reg/mem │
 └────────────────┴────────────────┘

  PUSH/POP регистр 
 ┌────────────────┐
 │0 1 0 1 x  reg  │   x=0 - PUSH , x=1 - POP
 └────────────────┘

  PUSH/POP сегментного регистр  ES, CS, SS или DS
 ┌────────────────┐
 │0 0 0 sreg 1 1 x│   x=0 - PUSH , x=1 - POP
 └────────────────┘

  сегментного регистр  ES, CS, SS, DS, FS или GS
 ┌────────────────┬────────────────┐
 │0 0 0 0 1 1 1 1 │1 0 sreg 0 0 x  │   x=0 - PUSH , x=1 - POP
 └────────────────┴────────────────┘

  НОП 
 ┌────────────────┐
 │0 1 1 0 1 0 s 0 │ + Immediate 8/16 bit
 └────────────────┘

  PUSHA/POPA AllReg's
 ┌────────────────┐
 │0 1 1 0 0 0 0 x │   x=0 - PUSH , x=1 - POP
 └────────────────┘

  PUSHF/POPF flags
 ┌────────────────┐
 │1 0 0 1 1 1 0 x │   x=0 - PUSH , x=1 - POP
 └────────────────┘

 ────────────────────────────────────────────────────────────────────────────

 XCHG - обмен

  TEST/XCHG регистр /п мяти с регистром
 ┌────────────────┬────────────────┐
 │1 0 0 0 0 1 x w │mod reg reg/mem │   x=0 - TEST , x=1 - XCHG
 └────────────────┴────────────────┘

  регистр с  ккумулятором
  (short form)
 ┌────────────────┐
 │1 0 0 1 0  reg  │     
 └────────────────┘

 ────────────────────────────────────────────────────────────────────────────

  Ввод/вывод через  ккумулятор
 ┌────────────────┐
 │1 1 1 0 x 1 y w │ + [Immediate 8] - номер порт 
 └────────────────┘
  xy = 00 - IN ввод с фиксиров нным портом
  xy = 01 - OUT вывод с фиксиров нным портом
  xy = 10 - IN ввод с вирту льным портом  дресуемым DL/DX
  xy = 11 - OUT вывод с вирту льным портом  дресуемым DL/DX

  INS/OUTS ─ строковый ввод/вывод с вирту льным портом  дресуемым DX
 ┌────────────────┐
 │0 1 1 0 1 1 x w │   x=0 - INS , x=1 - OUTS
 └────────────────┘

 ────────────────────────────────────────────────────────────────────────────

  LEA─з грузк  в регистр исполнительного  дрес 
 ┌────────────────┬────────────────┐
 │1 0 0 0 1 1 0 1 │mod reg reg/mem │
 └────────────────┴────────────────┘

  З грузк  ук з теля в DS,ES:REG , sreg : 01 - DS
 ┌────────────────┬────────────────┐      00 - ES
 │1 1 0 0 0 1 sreg│mod reg reg/mem │
 └────────────────┴────────────────┘

  З грузк  ук з теля в FS,GS,SS:REG , sreg : 100 - FS
 ┌──────────┬──────────┬───────────┐         101 - GS
 │ 00001111 │10110 sreg│mod reg r/m│         010 - SS
 └──────────┴──────────┴───────────┘

 ────────────────────────────────────────────────────────────────────────────

  Сброс и уст новк  фл гов CF,IF,DF во Flags
 ┌────────────────┐
 │1 1 1 1 1 x x x │   xxx = 000 - CLC - сбросить CF
 └────────────────┘     001 - STC - уст новить CF
                010 - CLI - сбросить IF
                011 - STI - уст новить IF
                100 - CLD - сбросить DF
                101 - STD - уст новить DF


  CLTS ─ сброс фл г  пош гового режим  TS
 ┌────────────────┬─────────────────┐
 │0 0 0 0 1 1 1 1 │ 0 0 0 0 0 1 1 0 │
 └────────────────┴─────────────────┘

  CMC ─ инверсия CF
 ┌────────────────┐
 │1 1 1 1 0 1 0 1 │
 └────────────────┘

  LAHF─з грузить в AH регистр фл гов
  SAHF─сохр нить в регистре фл гов AH
 ┌────────────────┐
 │1 0 0 1 1 1 1 x │   x=0 - SAHF , x=1 - LAHF
 └────────────────┘

 ────────────────────────────────────────────────────────────────────────────

  Арифметические и логические ком нды

  регистр с регистром/п мятью         xxx = 000 - add
 ┌────────────────┬────────────────┐        001 - or
 │0 0 x x x 0 d w │mod reg reg/mem │        010 - adc
 └────────────────┴────────────────┘        011 - sbb
                        100 - and
                        101 - sub
                        110 - xor
                        111 - cmp
  НОП с регистром/п мятью
 ┌────────────────┬────────────────┐
 │1 0 0 0 0 0 s w │mod xxx reg/mem │ + Immediate 8/16
 └────────────────┴────────────────┘

  НОП с  ккумулятором (short form)
 ┌────────────────┐
 │0 0 x x x 1 0 w │ + Immediate 8/16 bit
 └────────────────┘

 ────────────────────────────────────────────────────────────────────────────

  TEST ─ проверк  р зрядов

  TEST/XCHG регистр /п мяти и регистр 
 ┌────────────────┬────────────────┐
 │1 0 0 0 0 1 x w │mod reg reg/mem │   x=0 - TEST , x=1 - XCHG
 └────────────────┴────────────────┘

 TEST регистр /п мяти и НОП 
 ┌────────────────┬────────────────┐
 │1 1 1 1 0 1 1 w │mod 000 reg/mem │ + Immediate 8/16
 └────────────────┴────────────────┘

 TEST  ккумулятор  и НОП 
 ┌────────────────┐
 │1 0 1 0 1 0 0 w │ + Immediate 8/16          
 └────────────────┘

 ────────────────────────────────────────────────────────────────────────────

  INC/DEC регистр /п мяти
 ┌────────────────┬────────────────┐
 │1 1 1 1 1 1 1 w │mod 00x reg/mem │  x=0 - INC , x=1 - DEC
 └────────────────┴────────────────┘

  INC/DEC регистр 
 ┌────────────────┐
 │0 1 0 0 x  reg  │     
 └────────────────┘

 ────────────────────────────────────────────────────────────────────────────

  NEG ─ з мен  зн к  в регистре/п мяти
 ┌────────────────┬────────────────┐
 │1 1 1 1 0 1 1 w │mod 011 reg/mem │
 └────────────────┴────────────────┘

  NOT ─ инверсия регистр /п мяти
 ┌────────────────┬────────────────┐
 │1 1 1 1 0 1 1 w │mod 010 reg/mem │
 └────────────────┴────────────────┘

 ────────────────────────────────────────────────────────────────────────────

  Умножение/деление  ккумулятор  н  регистр/п мять
 ┌────────────────┬────────────────┐
 │1 1 1 1 0 1 1 w │mod 1xx reg/mem │   xx = 00 - MUL  - беззн ковое
 └────────────────┴────────────────┘        01 - IMUL - зн ковое
                        10 - DIV  - беззн ковое
                        11 - IDIV - зн ковое


  Зн ковое умножение регистр  н  регистр/п мять
 ┌──────────┬──────────┬───────────┐
 │ 00001111 │ 10101111 │mod reg r/m│
 └──────────┴──────────┴───────────┘

  Зн ковое умножение регистр /п мяти н  НОП
 ┌────────────────┬────────────────┐
 │0 1 1 0 1 0 s 1 │mod reg reg/mem │ + Immediate 8/16
 └────────────────┴────────────────┘

 ────────────────────────────────────────────────────────────────────────────

 Сдвиговые ком нды

  Сдвиг регистр /п мяти
 ┌────────────────┬────────────────┐
 │1 1 0 x 0 0 y w │mod zzz reg/mem │ + [Immediate 8bit]
 └────────────────┴────────────────┘

  xy = 00 - сдвиг н  Imm8         zzz = 000 - ROL
       01 - не используется         001 - ROR
       10 - сдвиг н  один р зряд        010 - RCL
       11 - сдвиг н  Imm8 через CL      011 - RCR
                        100 - SHL/SAL
                        101 - SHR
                        110 - SAL - (UnDocumented)
                        111 - SAR


  SHLD/SHRD ─ двойной сдвиг регистр /п мяти н  Imm8
 ┌──────────┬──────────┬───────────┐
 │ 00001111 │ 1010x10y │mod reg r/m│ + [Immediate 8 bit]
 └──────────┴──────────┴───────────┘
  xy = 00 - влево н  Imm8
       01 - влево н  Imm8 через CL
       10 - впр во н  Imm8
       11 - впр во н  Imm8 через CL

 ────────────────────────────────────────────────────────────────────────────

  Коррекция и р сширение  ккумулятор 

 ┌────────────────┐
 │0 0 1 x x 1 1 1 │  xx = 00 - DAA - десятичн я после сложения
 └────────────────┘   01 - DAS - десятичн я после вычит ния
              10 - AAA - после сложения
              11 - AAS - после вычит ния

 ┌────────────────┬────────────────┐
 │1 1 0 1 0 1 0 x │0 0 0 0 1 0 1 0 │
 └────────────────┴────────────────┘
  x=0 - AAM - коррекция после умножения
  x=1 - AAD - коррекция перед делением

  CBW/CWD ─ р сширение
 ┌────────────────┐
 │1 0 0 1 1 0 0 x │
 └────────────────┘
  x=0 - CBW - б йт  в слово
  x=1 - CWD - слов  в двойное слово

 ────────────────────────────────────────────────────────────────────────────

  Строковые ком нды   xxx = 010 - MOVS - пересылк 
 ┌────────────────┐     011 - CMPS - ср внение
 │1 0 1 0 x x x w │     101 - STOS - з пись        ккумулятор 
 └────────────────┘     110 - LODS - з грузк 
                111 - SCAS - ск ниров ние

  INS/OUTS ─ строковый ввод/вывод с вирту льным портом через DX
 ┌────────────────┐
 │0 1 1 0 1 1 x w │   x=0 - INS , x=1 - OUTS
 └────────────────┘

  XLAT ─ т бличное преобр зв ние
 ┌────────────────┐
 │1 1 0 1 0 1 1 1 │
 └────────────────┘

  Префиксы повторения  (Счетчик повторений в CX)
 ┌────────────────┐
 │1 1 1 1 0 0 1 x │  x=0 - REPNZ/REP , x=1 - REPZ
 └────────────────┘

 ────────────────────────────────────────────────────────────────────────────

  Обр ботк  р зрядов

  BSF/BSR - Поиск р зряд 
 ┌──────────┬──────────┬───────────┐
 │ 00001111 │ 1011110x │mod reg r/m│
 └──────────┴──────────┴───────────┘
  x=0 - Bit Scan Forward
  x=1 - Bit Scan Reverse


  BitTest Регистр/П мять,Регистр
 ┌──────────┬──────────┬───────────┐
 │ 00001111 │ 101xx011 │mod reg r/m│  xx = 00 - BT  тестиров ть
 └──────────┴──────────┴───────────┘       01 - BTS и уст новить
                       10 - BTR и сбросить
                       11 - BTC и инвертиров ть

  BitTest Регистр/П мять,НОП
 ┌──────────┬──────────┬───────────┐
 │ 00001111 │ 10111010 │mod xxx r/m│ + Immediate 8 bit
 └──────────┴──────────┴───────────┘
  xxx = 010 - BTS и уст новить
    100 - BT  тестиров ть
    110 - BTR и сбросить
    111 - BTC и инвертиров ть


   XBTS/IBTS - исключение/вст вк  битов встроку
 ┌────────────────┬────────────────┐
 │0 0 0 0 1 1 1 1 │1 0 1 0 0 1 1 x │  x=0 - XBTS , x=1 - IBTS
 └────────────────┴────────────────┘

 ────────────────────────────────────────────────────────────────────────────

  Ком нды перед чи упр вления

  CALL/JMP с прямой  дрес цией
 ┌────────────────┐
 │1 1 1 0 1 0 x x │ + Immediate 8/16/32
 └────────────────┘
  xx = 00 - CALL внутрисегментный - Rel16
       01 - JMP внутрисегментный - Rel16
       10 - JMP межсегментный - Abs16:Abs16 (смещение,селектор)
       11 - JMP внутрисегментный короткий - Rel8


  CALL межсегментный с прямой  дрес цией
 ┌────────────────┐
 │1 0 0 1 1 0 1 0 │ + Immediate 32 - Abs16:Abs16 (смещение,селектор)
 └────────────────┘

  CALL/JMP с косвенной  дрес цией через Регистр/П мять
 ┌────────────────┬────────────────┐
 │1 1 1 1 1 1 1 1 │mod xxy reg/mem │  xx = 01 - CALL  y=0 - внутрисегментный
 └────────────────┴────────────────┘       10 - JMP 1 - межсегментный
  xxy = 010 - CALL внутрисегментный
    011 - CALL межсегментный
    100 - JMP внутрисегментный
    101 - JMP межсегментный


  Условные Переходы и Уст новки призн к 

                              xxxx = 0000 - o
  Jxx - Условный короткий переход                0001 - no
 ┌────────────────┐                      0010 - c
 │0 1 1 1 x x x x │ + Immediate 8 bit - Rel8             0011 - nc
 └────────────────┘                      0100 - z
                                 0101 - nz
  Jxx - Условный близкий переход                 0110 - be
 ┌────────────────┬────────────────┐                 0111 - a
 │0 0 0 0 1 1 1 1 │1 0 0 0 x x x x │ + Immediate 16 bit      1000 - s
 └────────────────┴────────────────┘                 1001 - ns
                                 1010 - p
  SETxx - Уст новк  призн к  в регистр/п мять            1011 - np
 ┌──────────┬──────────┬───────────┐                 1100 - l
 │ 00001111 │ 1001xxxx │mod 000 r/m│                 1101 - ge
 └──────────┴──────────┴───────────┘                 1110 - le
                                 1111 - g

  Циклы и переходы со счетчиком CX
 ┌────────────────┐          xx = 00 - LOOPNZ
 │1 1 1 0 0 0 x x │ + Immediate 8 bit         01 - LOOPZ
 └────────────────┘               10 - LOOP
                          11 - JCXZ

 ────────────────────────────────────────────────────────────────────────────

  Прерыв ния,обр ботк  процедур и возвр ты
 ┌────────────────┐
 │1 1 0 0 1 x x x │ + [Immediate 16 bit] + [Immediate 8 bit]
 └────────────────┘
  xxx = 000 - ENTER - вход в процедуру (make stack frame)
    001 - LEAVE - выход из процедуры
    010 - RETF Imm8 - возвр т д льний с очисткой стек 
    011 - RETF  - возвр т д льний

    100 - INT 3 - debug Int
    101 - INT Imm8  - прерыв ние по вектору
    110 - INTO  - прерыв ние по переполнению
    111 - IRET  - возвр т из прерыв ния

  RET/RET Imm8 - ближние возвр ты
 ┌────────────────┐
 │1 1 0 0 0 0 1 x │  x=0 - RETN Imm8 , x=1 - RETN
 └────────────────┘

  BOUND - контроль индекс  в гр ниц х
 ┌────────────────┬────────────────┐
 │0 1 1 0 0 0 1 0 │mod reg reg/mem │
 └────────────────┴────────────────┘

 ────────────────────────────────────────────────────────────────────────────

  Упр вление процессором

  HLT - ост нов
 ┌────────────────┐
 │1 1 1 1 0 1 0 0 │
 └────────────────┘

  MOV - з грузк  упр вляющих регистров   xx = 00 - CR0
 ┌──────────┬──────────┬───────────┐          01 - CR1  (UnDocumented)
 │ 00001111 │ 001000d0 │ 000xx reg │          10 - CR2
 └──────────┴──────────┴───────────┘          11 - CR3

  MOV - з грузк  отл дочных регистров    xxx = 000 - DR0
 ┌──────────┬──────────┬───────────┐           001 - DR1
 │ 00001111 │ 001000d1 │ 11xxx reg │           010 - DR2
 └──────────┴──────────┴───────────┘           011 - DR3
                           100 - DR4  (UnDocumented)
                           101 - DR5  (UnDocumented)
                           110 - DR6
                           111 - DR7

  MOV - з грузк  проверочных регистров   xxx = 000 - TR0  (UnDocumented)
 ┌──────────┬──────────┬───────────┐           001 - TR1  (UnDocumented)
 │ 00001111 │ 001001d0 │ 11xxx reg │           010 - TR2  (UnDocumented)
 └──────────┴──────────┴───────────┘           011 - TR3
                           100 - TR4
                           101 - TR5
                           110 - TR6
                           111 - TR7

  NOP/XCHG AX,AX - нет опер ции
 ┌────────────────┐
 │1 0 0 1 0 0 0 0 │
 └────────────────┘

  WAIT - ожид ние
 ┌────────────────┐
 │1 0 0 1 1 0 1 1 │
 └────────────────┘

  Ком нды сопроцессор 
 ┌────────────────┬────────────────┐
 │1 1 0 1 1 x x x │mod yyy reg/mem │
 └────────────────┴────────────────┘
 xxx и yyy р зряды код  опер ции для сопроцессор 

 ────────────────────────────────────────────────────────────────────────────

  Б йты префикс 

  Префикс р змер  - 16/32 bit
 ┌────────────────┐
 │0 1 1 0 0 1 1 x │  x=0 - величины опер нд  , x=1 -  дресной величины
 └────────────────┘

  LOCK - Префикс з хв т  шины
 ┌────────────────┐
 │1 1 1 1 0 0 0 0 │
 └────────────────┘

  Префикс з меняющего сегмент     xx = 00 - ES
 ┌────────────────┐            01 - CS
 │0 0 1 x x 1 1 0 │            10 - SS
 └────────────────┘            11 - DS

  Префикс з меняющего сегмент 
 ┌────────────────┐
 │0 1 1 0 0 1 0 x │  x=0 - FS , x=1 - GS
 └────────────────┘

  Префиксы повторения  (Счетчик повторений в CX)
 ┌────────────────┐
 │1 1 1 1 0 0 1 x │  x=0 - REPNZ/REP , x=1 - REPZ
 └────────────────┘

 ────────────────────────────────────────────────────────────────────────────

   Упр вление з SHITой

  ARPL ─ коррекция Requested Privilege Level
 ┌────────────────┬────────────────┐
 │0 1 1 0 0 0 1 1 │mod reg reg/mem │
 └────────────────┴────────────────┘

  З грузк  из дескриптор  сегмент 
 ┌──────────┬──────────┬───────────┐
 │ 00001111 │ 0000001x │mod reg r/m│
 └──────────┴──────────┴───────────┘
  x=0 - LAR ─ з грузить пр в  доступ 
  x=1 - LSL ─ з грузить предел сегмент 




  LGDT/SGDT ─ з грузить/сохр нить глоб льную дескрипторную т блицу
 ┌──────────┬──────────┬───────────┐
 │ 00001111 │ 00000001 │mod 0x0 r/m│  x=0 - SGDT , x=1 - LGDT
 └──────────┴──────────┴───────────┘

  LIDT/SIDT ─ з грузить/сохр нить т блицу прерыв ний
 ┌──────────┬──────────┬───────────┐
 │ 00001111 │ 00000001 │mod 0x1 r/m│  x=0 - SIDT , x=1 - LIDT
 └──────────┴──────────┴───────────┘

  LLDT/SLDT ─ з грузить/сохр нить лок льную дескрипторную т блицу
 ┌──────────┬──────────┬───────────┐
 │ 00001111 │ 00000000 │mod 0x0 r/m│  x=0 - SLDT , x=1 - LLDT
 └──────────┴──────────┴───────────┘

  LMSW/SMSW ─ з грузить/сохр нить состояния м шиты
 ┌──────────┬──────────┬───────────┐
 │ 00001111 │ 00000001 │mod 1x0 r/m│  x=0 - SMSW , x=1 - LMSW
 └──────────┴──────────┴───────────┘

  LTR/STR ─ з грузить/сохр нить регистр р боты
 ┌──────────┬──────────┬───────────┐
 │ 00001111 │ 00000000 │mod 0x1 r/m│  x=0 - STR , x=1 - LTR
 └──────────┴──────────┴───────────┘

  VERR/VERW ─ проверить н  доступ
 ┌──────────┬──────────┬───────────┐
 │ 00001111 │ 00000000 │mod 10x r/m│
 └──────────┴──────────┴───────────┘
  x=0 - VERR - по чтению
  x=1 - VERW - по з писи

 ────────────────────────────────────────────────────────────────────────────
  Copyright Intel Corp.
  Edited [DaemonSerJ] ,August'98

