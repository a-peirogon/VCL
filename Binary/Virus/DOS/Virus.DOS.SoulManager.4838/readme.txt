                                           /-----------------------------\
                                           | Xine - issue #3 - Phile 302 |
                                           \-----------------------------/




   The Author of this engine says it is only beta version 0.1 and so he apologizes
   if the code is a bit messy.

   ÄÄÄ[README.TXT start]ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

    Red Team Polymorphy 0.1b
    (c) 1997 The Soul Manager [IR/G].
   __________________________________

    % Contents %
    ____________

     - Introduction.
     - Usage.
     - Modification of the engine source.
     - Modification of the test file generator source.


    % Introduction %
    ________________

    RTP was the polymorphic engine originally written for my Red Team virus,
    but as the virus was already quite large and complex, I decided not to
    complicate methods further. This is the second polymorphic engine I am
    releasing, the first being [TCE] published in IR#7 zine, 1996.

    A generator program (RTP_GEN) is included for you to sample the RTP engines
    capabilities.

    The engine boasts a number of features:
       - Highly flexible decryptor structure:
           + 8/16 bit.
           + forwards/backwards.
           + many different loop types.
           + single/double reference.

       - Anti-Emmulator code:
           + checks for hardware interrupts.
           + checks for AAM/AAD emmulation.
           + string moves.
           + calls to DOS, causing infinite loops if results are
             inconsistant.
           + anti-heuristic code (see below).
           + multiple layers of decryption.

       - Anti-Debugger code:
           + checks for INT 01h tracing.

       - Anti-Cryptanalysis techniques:
           + multiple decrption and key modification operations.
           + 1st level cryptanalytic techniques
              ( add/xor/sub/rol/ror [txt],imm ).
           + 2nd level cryptanalytic techniques
              ( add/xor/sub [txt],[key / ptr / count] ).
           + 3rd level cryptanalytic techniques.
              ( add/xor/sub [key],[ptr / count] ).

       - Realistic code structures (anti-heuristic):
           + loops.
           + *forward* referenced calls and jumps.
           + interrupt calls.
           + memory reads.
           + string memory moves (rep movs?)
           + the ability to push and pop registers modified in loops
             and by interrupt calls, as nescessary.

    The results of RTP appear as follows:

     +-----<entry point> \_ Supplied as needed by your virus.
     |...                /
     |
     | [Encrypted Virus] <-+
     |                         |
     | +-> [Decryptor 0]-------+
     | |
     | +---[Decryptor 1] <-+
     |                     |
     +---> [Decryptor 2]---+


    Execution is passed directly to Decryptor-2. Decryptor-2 contains junk
    and anti-emmulator code, is approximately 1k long, and takes some time
    to execute. Decryptor-1, and only Decryptor-1 is decrypted by Decryptor-2.
    Decryptor-1 shares the same characterisitcs as Decryptor-2, and is executed
    after being decrypted by Decryptor-2. Decryptor-1 then executes and passes
    control to Decryptor-0. Decryptor-0 contains no junk or anti-emmulator code,
    and twice the usual number of cryptanalytic operations. It is approximately
    300 bytes long, and executes quite quickly. Decryptor-0 decrypts and passes
    control to the virus body.

    Note that as the encrypted virus is ABOVE all code generated by RTP, it is
    possible to calculate the execution offset (or delta offset) of the virus
    at execution time in the usual manners, hence avoiding heuristiclly-costly
    runtime delta offset calculations.

    % Usage %
    _________

    To begin with, you must include the virus engine include file at an
    appropriate point in your virus:

       INCLUDE RTP.INC

    If nescessary, you will need to include the header files used by the
    engine source:

       INCLUDE SHORT.INC
       INCLUDE STAR.INC

    Next you will need to decide what routine to call:

       rtp_boot        - boot decryptors:
                       + 1 layer.
                       + no junk.

       rtp_file        - file decryptors:
                       + 3 layers as described above.
                       + junk.


    Calling these routine requires the following input:

       DS:SI   =   Seg:Off ptr to virus body.
       ES:DI   =   Seg:Off ptr of buffer to create encrypted code.
               (this should be the size of the virus body, with
                an additional 3k).
       CX  =   Size of virus body.
       BX  =   Delta offset of virus body at runtime.
       DX  =   Offset in virus body (regardless of delta offset in
               BX) that execution should be passed to.

    The RTP routines return the following output:

       DS:DX   =   Seg:Off ptr to encrypted code and decryptors.
       CX  =   Size of encrypted code and decryptors.
       AX  =   IP (including delta offset) that execution should be
               passed to.


    % Modification of the Engine Source %
    _____________________________________

    The Engine Source (RTP.INC) is highly modifiable. There are a series of
    'ENABLE' statements under the 'Conditional Assembly' section of the file.
    The relevant options can be disabled by using a 'DISABLE' command, or simply
    by commenting out the appropriate 'ENABLE' command.

    The following options are available:

       + DEBUG_ENCRYPTOR - directs the engine to generate an INT 03h
         (software debugger breakpoint) at the beginning of the generated
         *ENCRYPTION* routines (i.e. those executed by the engine to encrypt
         your code, and NOT the routines appended to the encrypted virus
         body).

       + DISPLAY_STATUS - directs TASM to compile code that will cause the
         engine to display status messages, such as when a routine is
         entered. Used for debugging, this option generates large amounts
         of compiled code, and emits large amounts of output at runtime.

       + MULTI_LAYER - toggles between single layer and triple layer file
         decryption routines.

       + GARBLING - Enable Garbling / Junk code / Anti-Emmulator code.

       + GARBLE_* - Toggles different Junk generation options.


    % Modification of the Test File Generator Source %
    __________________________________________________

    RTP_GEN.ASM also has a number of options:

       + USE_VIRUS - If enabled, the generator will encrypt a common virus
         sample (Jerusalem or Vienna). Otherwise, the generator will encrypt
         the typical standalone program that displays a message and then
         terminates. This option is useful for testing heuristic scanners
         and emmulators.

       + DELETE_HOST - If enabled, and USE_VIRUS is disabled, this will
         cause the encrypted stand alone program to delete the .COM file
         it was executed from, before termination. This option is useful
         to execute a large number of test files. If a file should not work,
         it will not be deleted, and will still exist on disk.

       + FILE_SIZE - If USE_VIRUS is disabled, this will determine the size
         of the message displaying test host (excluding decryptor code, zero
         padded).

       + FILES - The number of test files to generate per run.


    [END DOCUMENT]
