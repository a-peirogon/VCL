??date
-----------------------------------------------------------------
Назначение:     Строковое значение для текущей даты

Замечания:      ??data является текстовым значением, представляю-
                щим текущую  дату.  Точный формат строки для даты
                для разных стран определяется с помощью DOS

См.также        ??Time

Пример:         ASMTIME DB ??data ; строка из 8 байт


??Time
-----------------------------------------------------------------
Назначение:     Строковое  значение  для  текущего времени ??Time
                является текстовым значением,  представляющим те-
                кущее  время.  Точный  формат  строки для времени
                определяется для разных стран с помощью DOS

См.также:       ??Data

Пример:         ASMTIME DB ??Time ; строка из 8 символов


CATSTR
-----------------------------------------------------------------
Назначение:     Объединяет несколько строк в одну строку

Режим:          MASM51, Ideal

Синтаксис:      имя CATSTR строка[,строка]...

Замечания:      Имя - данное значение, состоящее из идентификато-
                ров каждой строки, объединенных в одну строку.

                Каждая строка может быть одной из следующих:

                - строковый аргумент, заключенный в угловые скоб-
                ки, подобно <abc>

                - заранее определенный текстовый макро

                - числовое строковое  замещение,  начинающееся  с
                процента (%)

См.также:       SUBSTR, INSTR, SIZESTR

Пример:         LETTER CATSTR <abc>,<def>;LETTER="abcdef"

INSTR
-----------------------------------------------------------------
Назначение:     Определение позиции,  с которой одна строка "вхо-
                дит" в другую.

Режим:          MASM51, Ideal

Синтаксис:      <имя> INSTR [<начало>,] <строка1>,<строка2>

Замечания:      После  выполнения  этой директивы аргументу <имя>
                присваивается значение номера позиции,  с которой
                <строка2> входит в <строку1>.

                Номер позиции  первого  символа в строке равен 1.
                Если <строка2> не "входит" в <строку1>, то дирек-
                тива возвращает 0.

См.также:       CATSTR,SIZESTR,SUBSTR

Пример:         COMMAPOS INSTR <aaa,bbb>,<,>  ; COMMAPOS=4


SIZESTR
-----------------------------------------------------------------
Назначение:     Определение количества идентификаторов в строке.

Режим:          MASM51, Ideal

Синтаксис:      <имя> SIZESTR <строка>

Замечания:      Аргументу <имя> присваивается  числовое  значение
                количества символов в строке. Строка <> имеет ну-
                левую длину.

См.также:       SUBSTR,CATSTR,INSTR

Пример:         REGLIST EQU <si di>
                REGLEN SIZESTR REGLIST ; REGLEN = 5


SUBSTR
-----------------------------------------------------------------
Назначение:     Определение новой строки как подстроки из сущест-
                вующей строки.

Режим:          MASM51, Ideal

Синтаксис:      <имя> SUBSTR <строка>,<позиция>[,<размер>]

Замечания:      Аргументу <имя> присваивается значение, состоящее
                из символов <строки>,  начиная с <позиции> длиной
                <размер>.  Если  вы не указали аргумент <размер>,
                то подстрока начинается с номера  символа  <пози-
                ция>,  а  заканчивается  там  же,  где и исходная
                строка.

                Аргумент <строка> может принимать следующие  зна-
                чения:
                - строка, заключенная в скобки (<abc>);
                - ранее  определенный  текст макроса;
                - оператор замещения строки выражением (%).

См.также:       CATSTR,INSTR,SIZESTR

Пример:         N = 0A
                HEXC SUBSTR <0123456789ABCDEF>,N+1,1 ; HEXC="A"



REPT
-----------------------------------------------------------------
Назначение:     Повторение блока операторов.

Режим:          MASM, Ideal

Синтаксис:      REPT <выражение>
                     <операторы>
                ENDM

Замечания:      Значением аргумента <выражение> должна быть конс-
                танта, и <выражение> не должно содержать  иденти-
                фикаторов, не определенных к данному моменту тра-
                нсляции. Оно  определяет  количество   повторений
                <операторов>.

                Директива REPT может быть использована как внутри
                макросов, так и вне их.

См.также:       ENDM,IRPC,IRP

Пример:         REPT 4
                 shl  ax,1
                ENDM


IRP
-----------------------------------------------------------------
Назначение:     Повторение блока операторов с заменой строки.

Режим:          MASM, Ideal

Синтаксис:      IRP <параметр>,<<арг1>[,<арг2>] ...>
                    <операторы>
                ENDM

Замечания:      <Операторы> внутри блока ассемблируются  один раз
                для  каждого  аргумента  списка,  заключенного  в
                скобки (<>). Число аргументов в списке не ограни-
                чено. Аргументы могут содержать любой текст (сим-
                волы,  строки,  числа и т.д.).  Каждый раз, когда
                блок ассемблируется,  следующий аргумент в списке
                заменяет поле <параметр> в операторах блока.

                Аргументы в списке должны разделяться запятыми, а
                список  аргументов  должен быть заключен в скобки
                (<>).  Для завершения действия директивы IRP  ис-
                пользуется директива ENDM.

                Эту директиву  можно использовать как внутри мак-
                росов, так и вне их.

См.также:       IRPC,REPT

Пример:         IRP reg,<ax,bx,cx,dx>
                   push reg
                ENDM

IRPC
-----------------------------------------------------------------
Назначение:     Повторение блока операторов с заменой идентифика-
                тора.

Режим:          MASM, Ideal

Синтаксис:      IRPC <параметр>,<строка>
                     <операторы>
                ENDM

Замечания:      <Операторы> внутри блока ассемблируются  один раз
                для каждого идентификатора строки.  Число иденти-
                фикаторов в строке  не  ограничено.  Каждый  раз,
                когда блок ассемблируется,  следующий идентифика-
                тор в строке заменяет поле <параметр> в  операто-
                рах блока.

                Для завершения действия директивы IRPC  использу-
                ется директива ENDM.

                Эту директиву  можно использовать как внутри мак-
                росов, так и вне их.

См.также:       IRP,REPT

Пример:           IRPC lucky,1379
                   db lucky
                ENDM
                В результате будет создано 4  байта  данных  со
                значениями 1,3,7 и 9.
