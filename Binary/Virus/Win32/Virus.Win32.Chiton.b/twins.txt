                            I get by with a little help
                                  from my friends
                                 roy g biv / defjam

                                    -= defjam =-
                                     since 1992
                        bringing you the viruses of tomorrow
                                       today!


   About the author:

   Former  DOS/Win16  virus writer, author of several virus  families,  including
   Ginger  (see Coderz #1 zine for terrible buggy example, contact me for  better
   sources  ;),  and  Virus Bulletin 9/95 for a description of what  they  called
   Rainbow.   Co-author  of  world's first virus using circular  partition  trick
   (Orsam,  coded  with  Prototype in 1993).  Designer of the world's  first  XMS
   swapping  virus (John Galt, coded by RTFishel in 1995, only 30 bytes stub, the
   rest  is  swapped  out).   Author of world's first virus  using  Thread  Local
   Storage  for  replication  (Shrug) and world's first Native  executable  virus
   (Chthon).   Author  of  various retrovirus articles (eg see Vlad  #7  for  the
   strings  that make your code invisible to TBScan).  Went to sleep for a number
   of years.  This is my fifth virus for Win32.

   I'm also available for joining a group.  Just in case anyone is interested. ;)


   What is process co-operation?

   Process  co-operation  is a technique where one process verifies the state  of
   another  process, and the other process verifies the state of the one process.
   There  can also be more than two processes involved.  If we consider the  case
   of  two  processses,  one process is called "Local" and the other  process  is
   called  "Remote", then the Local process can ensure that the Remote process is
   still  running;  the Local process can ensure that the Remote process is still
   active (that is has not been suspended); the Local process can ensure that the
   Remote  process has not been altered.  If the Remote process has been  altered
   or  terminated, then the Local process can start a new instance of the  Remote
   process;  if the Remote process has been suspended, then the Local process can
   resume  the Remote process or start a new instance of the Remote process.   If
   the  Remote process contains the same code, then the Remote process can ensure
   the  same  things  about  the Local process and perform the  same  actions  in
   response.   This makes it a very powerful technique to protect against  forced
   termination and "disinfection" of the memory image by AV softwares.

   This is not a new technique, but this seems to be the first time on Windows.
   The earliest reference that I found is the mid 1970s (older than me ;) ).
   (www.tuxedo.org/~esr/jargon/jargon.html#The%20Meaning%20of%20Hack)

   Let's see the algorithm for one process that runs as two instances.
   First there is some startup code:

   if argc == 1                            ;first time execution
   {
   restart:
       do
       {
           event1 = true                   ;set initial states
           event2 = false                  ;set intial states
           pid2 = run(process2, pid1)      ;run second instance
       }
       while !wait (event2, timeout)       ;loop if Remote process dies
   }

   So now we have two instances running.  We enter the main loop:

   process 1 (Local)                       process 2 (Remote)

   do                                      do
   {                                       {
       if event1                               if event2
           break                                   break
       event2 = false                          event1 = false
       if !checksum(pid2)                      if !checksum(pid1)
           break                                   break
       event1 = true                           event2 = true
   }                                       }
   while wait (event2, timeout)            while wait (event1, timeout)
   goto restart                            goto restart

   Let's examine line by line:

       if event1
           break

   If the Local event was not reset by the Remote process, then we think that the
   Remote process is suspended or terminated, so we exit the loop and restart the
   Remote process.

       event2 = false

   Reset the Remote event.  Dis is one half ;) of the "I'm alive" checking.

       if !checksum(pid2)
           break

   If  the Remote checksum fails then the memory image of the Remote process  has
   been altered, so we exit the loop and restart the Remote process.

       event1 = true

   Set the Local event.  This is the other half of the "I'm alive" checking.

       while wait (event2, timeout)

   Loop while Remote event signals before timeout expires.

   That's it.  So simple.  We are ready for ourselves.  Are you?


   Greets to the old Defjam crew:

   Prototype, RTFishel, Obleak, and The Gingerbread Man


   rgb/dj feb 2002
   iam_rgb@hotmail.com
