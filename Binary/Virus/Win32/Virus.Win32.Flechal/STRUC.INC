   callx macro x
   extrn x:proc
   call x
   endm

   esp_crypt macro x
   mov eax, not x
   not eax
   push eax
   mov eax, esp
   endm

   stosd_crypt macro x, y
   push edi eax
   mov edi, x
   mov eax, not y
   not eax
   stosd
   pop eax edi
   add x, 4
   endm

   x_not macro x
   irpc z, <x>
   y = not "&z"
   db y
   endm
   db 0ffh
   endm

   string_decrypt macro x, y
   push edi ecx
   mov edi, offset x
   mov ecx, y
   dec ecx
   not byte ptr [edi]
   inc edi
   loop $-3
   pop ecx edi
   endm

   crash macro ;  DEBUG
   mov esp, 0
   call $
   endm

x_push_first            macro   r
                        xor     r, r
                        _reg = 0
                        endm

x_push_next             macro   q, r, x
                        if q eq 0
                        sub     r, _reg - x
                        endif
                        if (q eq 1) or (q eq 3)
                        xor     r, _reg xor x
                        endif
                        if q eq 2
                        add     r, x - _reg
                        endif
                        push    r
                        _reg = x
                        endm

x_push                  macro   r, x
                        x_push_first r
                        _xsize = 0
                        l       = 0
                        irpc    c, <x>
                        l       = l + 1
                        endm
                        j = 0
                        s = 0
                        l0 = l
                        if (l0 and 3) ne 0
                        j = j shl 8 + "x"
                        s = s + 8
                        l0 = l0 + 1
                        endif
                        if (l0 and 3) ne 0
                        j = j shl 8 + "y"
                        s = s + 8
                        l0 = l0 + 1
                        endif
                        if (l0 and 3) ne 0
                        j = j shl 8 + "z"
                        s = s + 8
                        l0 = l0 + 1
                        endif
                        q = 0
                        i       = l - 1
                        irpc    c1, <x>
                          t       = 0
                          irpc    c, <x>
                            k = "&c"
                            if      k eq "~"    ; zero
                              k = 0
                            endif
                            if      k eq "|"    ; space
                              k = 32
                            endif
                            if      k eq "ö"    ; cr
                              k = 13
                            endif
                            if      k eq "÷"    ; lf
                              k = 10
                            endif
                            if t eq i
                              j = j shl 8
                              if k ne 0
                              j = j + k
                              endif
                              s = s + 8
                              if s eq 32
                                _xsize = _xsize + 4
                                x_push_next q,r,j
                                q = q + 1
                                if q eq 4
                                  q = 0
                                endif
                                s = 0
                                j = 0
                              endif
                              exitm
                            endif
                            t     = t + 1
                          endm l irpc
                          i = i - 1
                        endm ; irpc
                        if s ne 0
                          error
                        endif
                        mov r, esp
                        endm ; x_push

x_pop                   macro
                        lea     esp, [esp + _xsize]
                        endm

   NULL                 equ 0
   FALSE                equ NULL
   TRUE                 equ 1
   MAX_PATH             equ 260
   HKEY_LOCAL_MACHINE   equ 80000002h
   ERROR_SUCCESS        equ NULL
   KEY_ALL_ACCESS       equ 0F003FH
   REG_SZ               equ 1
   REG_NONE             equ NULL
   SW_SHOW              equ 5
   FILE_MAP_WRITE       equ 0002h
   FILE_MAP_READ        equ 0004h
   FILE_ATTRIBUTE_NORMAL      equ 80h
   FILE_ATTRIBUTE_DIRECTORY   equ 10h
   FILE_ATTRIBUTE_COMPRESSED  equ 800h
   GENERIC_READ         equ 80000000h
   GENERIC_WRITE        equ 40000000h
   PAGE_READONLY        equ 2
   PAGE_READWRITE       equ 4
   CREATE_ALWAYS        equ 2
   OPEN_EXISTING        equ 3
   FILE_SHARE_READ      equ 1h
   FILE_BEGIN           equ 0
   IMAGE_DIRECTORY_ENTRY_EXPORT  equ  0
   IMAGE_DIRECTORY_ENTRY_IMPORT  equ  1
   GMEM_ZEROINIT        equ 40h
   HEADER_SIZE          equ 0A00h
   CODE_SIZE            equ 2600h
   PAGE_EXECUTE_READWRITE  equ 40h
   PAGE_EXECUTE_WRITECOPY  equ 80h

   OPENFILE STRUCT
     _file_attrib   DWORD    ?
     _file_time     DWORD    ?,?,?,?,?,?
     _file_size     DWORD    ?
   OPENFILE ENDS

   FILETIME STRUCT
     dwLowDateTime     DWORD      ?
     dwHighDateTime    DWORD      ?
   FILETIME ENDS

   IMAGE_OPTIONAL_HEADER  equ  <IMAGE_OPTIONAL_HEADER32>

   IMAGE_DATA_DIRECTORY STRUCT
     VirtualAddress    DWORD      ?
     isize             DWORD      ?
   IMAGE_DATA_DIRECTORY ENDS

   IMAGE_NUMBEROF_DIRECTORY_ENTRIES equ 16

   IMAGE_OPTIONAL_HEADER32 STRUCT
     Magic                         WORD       ?
     MajorLinkerVersion            BYTE       ?
     MinorLinkerVersion            BYTE       ?
     SizeOfCode                    DWORD      ?
     SizeOfInitializedData         DWORD      ?
     SizeOfUninitializedData       DWORD      ?
     AddressOfEntryPoint           DWORD      ?
     BaseOfCode                    DWORD      ?
     BaseOfData                    DWORD      ?
     ImageBase                     DWORD      ?
     SectionAlignment              DWORD      ?
     FileAlignment                 DWORD      ?
     MajorOperatingSystemVersion   WORD       ?
     MinorOperatingSystemVersion   WORD       ?
     MajorImageVersion             WORD       ?
     MinorImageVersion             WORD       ?
     MajorSubsystemVersion         WORD       ?
     MinorSubsystemVersion         WORD       ?
     Win32VersionValue             DWORD      ?
     SizeOfImage                   DWORD      ?
     SizeOfHeaders                 DWORD      ?
     CheckSum                      DWORD      ?
     Subsystem                     WORD       ?
     DllCharacteristics            WORD       ?
     SizeOfStackReserve            DWORD      ?
     SizeOfStackCommit             DWORD      ?
     SizeOfHeapReserve             DWORD      ?
     SizeOfHeapCommit              DWORD      ?
     LoaderFlags                   DWORD      ?
     NumberOfRvaAndSizes           DWORD      ?
     DataDirectory                 IMAGE_DATA_DIRECTORY IMAGE_NUMBEROF_DIRECTORY_ENTRIES dup(<?>)
   IMAGE_OPTIONAL_HEADER32 ENDS

   IMAGE_FILE_HEADER STRUCT
     Machine               WORD    ?
     NumberOfSections      WORD    ?
     TimeDateStamp         DWORD   ?
     PointerToSymbolTable  DWORD   ?
     NumberOfSymbols       DWORD   ?
     SizeOfOptionalHeader  WORD    ?
     Characteristics       WORD    ?
   IMAGE_FILE_HEADER ENDS

   IMAGE_NT_HEADERS STRUCT
     Signature         DWORD                   ?
     FileHeader        IMAGE_FILE_HEADER       <?>
     OptionalHeader    IMAGE_OPTIONAL_HEADER32 <?>
   IMAGE_NT_HEADERS ENDS

   IMAGE_EXPORT_DIRECTORY STRUCT
     _Characteristics          DWORD      ?
     TimeDateStamp             DWORD      ?
     MajorVersion              WORD       ?
     MinorVersion              WORD       ?
     nName                     DWORD      ?
     nBase                     DWORD      ?
     NumberOfFunctions         DWORD      ?
     NumberOfNames             DWORD      ?
     AddressOfFunctions        DWORD      ?
     AddressOfNames            DWORD      ?
     AddressOfNameOrdinals     DWORD      ?
   IMAGE_EXPORT_DIRECTORY ENDS

   IMAGE_SECTION_HEADER STRUC                         ; 
       SH_Name                 DB 8 DUP(?)            ; 
       SH_VirtualSize          DD ?                   ; 
       SH_VirtualAddress       DD ?                   ; 
       SH_SizeOfRawData        DD ?                   ; 
       SH_PointerToRawData     DD ?                   ; 
       SH_PointerToRelocations DD ?                   ; 
       SH_PointerToLinenumbers DD ?                   ; 
       SH_NumberOfRelocations  DW ?                   ; 
       SH_NumberOfLinenumbers  DW ?                   ; 
       SH_Characteristics      DD ?                   ; 
   IMAGE_SECTION_HEADER ENDS                          ;

   IMAGE_IMPORT_DESCRIPTOR STRUCT
       OriginalFirstThunk  dd ?  ;  Hint/Name Table
       TimeDateStamp       dd ?
       ForwarderChain      dd ?
       Name1               dd ?
       FirstThunk          dd ?
   IMAGE_IMPORT_DESCRIPTOR ENDS

;   mov eax, 1
;   mov ecx, 2
;   mov edx, 3
;   mov ebx, 4
;   mov ebp, 5
;   mov esi, 6
;   mov edi, 7

